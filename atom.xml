<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OMG_By</title>
  
  <subtitle>你走与不走，路就在那里</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-09T13:24:33.759Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>OMG_By</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis设计与实现-数据结构篇（2）--链表</title>
    <link href="http://yoursite.com/2018/06/09/Redis/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%EF%BC%882%EF%BC%89-%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/06/09/Redis/Redis设计与实现-数据结构篇（2）-链表/</id>
    <published>2018-06-09T13:09:46.000Z</published>
    <updated>2018-06-09T13:24:33.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表和链表节点的实现"><a href="#链表和链表节点的实现" class="headerlink" title="链表和链表节点的实现"></a>链表和链表节点的实现</h2><p>每个链表节点都使用一个listNode结构来表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">typedef struct listNode&#123;</div><div class="line">//前置节点</div><div class="line">struct listNode *prev;</div><div class="line">//后置节点</div><div class="line">struct listNode *next;</div><div class="line">//节点的值</div><div class="line">void *value;</div><div class="line">&#125;listNode;</div></pre></td></tr></table></figure></p><p>虽然使用多个listNode结构就可以组成链表，但是使用list来持有链表的话，操作起来会更方便。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">typedef struct list&#123;</div><div class="line">//表头节点</div><div class="line">listNode *head;</div><div class="line">//表尾节点</div><div class="line">listNode *tail;</div><div class="line">//链表所包含的节点数量</div><div class="line">unsigned long len;</div><div class="line">//节点值复制函数</div><div class="line">void *(*dup)(void *ptr);</div><div class="line">//节点值释放函数</div><div class="line">void *(*free)(void *ptr);</div><div class="line">//节点值对比函数</div><div class="line">void *(match)(void *ptr,void *key);</div><div class="line">&#125;list;</div></pre></td></tr></table></figure></p><p><img src="http://ocx5m3vc3.bkt.clouddn.com/list.png" alt=""></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>双端：获取某个节点的前置和后置节点的复杂度都是O(1)</li><li>无环：两端都指向NULL</li><li>获取表头节点和表尾节点的复杂度为O(1)</li><li>O(1)获取链表长度</li><li>链表可以用来保存各种不同类型的值。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;链表和链表节点的实现&quot;&gt;&lt;a href=&quot;#链表和链表节点的实现&quot; class=&quot;headerlink&quot; title=&quot;链表和链表节点的实现&quot;&gt;&lt;/a&gt;链表和链表节点的实现&lt;/h2&gt;&lt;p&gt;每个链表节点都使用一个listNode结构来表示&lt;br&gt;&lt;figure cl
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>名言</title>
    <link href="http://yoursite.com/2018/06/09/%E5%90%8D%E8%A8%80/"/>
    <id>http://yoursite.com/2018/06/09/名言/</id>
    <published>2018-06-09T12:07:29.000Z</published>
    <updated>2018-06-09T12:09:15.884Z</updated>
    
    <content type="html"><![CDATA[<ul><li>隐藏在假象后面的未必是真理，也许是另一个骗局。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;隐藏在假象后面的未必是真理，也许是另一个骗局。&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="杂论" scheme="http://yoursite.com/tags/%E6%9D%82%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现-数据结构篇（1）--简单动态字符串SDS</title>
    <link href="http://yoursite.com/2018/06/09/Redis/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%EF%BC%881%EF%BC%89--%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2SDS/"/>
    <id>http://yoursite.com/2018/06/09/Redis/Redis设计与实现-数据结构篇（1）--简单动态字符串SDS/</id>
    <published>2018-06-09T11:34:13.000Z</published>
    <updated>2018-06-09T13:08:27.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis中的SDS结构"><a href="#Redis中的SDS结构" class="headerlink" title="Redis中的SDS结构"></a>Redis中的SDS结构</h2><p>Redis并没有直接使用C语言中的字符串，而是自己构建了SDS这样的一种简单动态字符串，并且将它作为Redis中字符串的默认表示。<br>在早期的版本中记录了其长度、剩余空间、以及字符数组；<br>最新版本3.2.4中，已经对SDS做了一定的改动：长度、分配内存大小（除去’\0’）、标志位（低三位表示类型，其余五位未使用）、以及字符数组。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/SDS.png" alt=""><br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">struct sdshdr&#123;</div><div class="line">//buf中已用空间长度</div><div class="line">int len;</div><div class="line">//buf中剩余可用空间长度</div><div class="line">int free;</div><div class="line">//数据空间</div><div class="line">char buf[];</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h2 id="SDS与C字符串区别"><a href="#SDS与C字符串区别" class="headerlink" title="SDS与C字符串区别"></a>SDS与C字符串区别</h2><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><p>&ensp;&ensp;SDS字符串保存了自身的长度，当需要获取长度的时候可以O(1)获得。（3.2中的剩余空间需要用alloc-len算出）</p><h3 id="杜绝缓存区溢出"><a href="#杜绝缓存区溢出" class="headerlink" title="杜绝缓存区溢出"></a>杜绝缓存区溢出</h3><p>&ensp;&ensp;SDS在进行字符串拼接的时候，会自行检查内存空间是否满足要求，如果不满足，将自动进行分配；而且在进行分配空间的时候，会实行预先分配的策略。</p><h3 id="减少修改字符串时带来的内存重分配次数"><a href="#减少修改字符串时带来的内存重分配次数" class="headerlink" title="减少修改字符串时带来的内存重分配次数"></a>减少修改字符串时带来的内存重分配次数</h3><p>&ensp;&ensp;C语言字符串在进行字符串的扩充和收缩的时候，都会面临着内存空间的重新分配问题。<br>&ensp;&ensp;Redis在内存空间分配的问题上进行了优化，只要分为两个过程。  </p><ol><li>内存预分配<br>如果修改之后SDS的长度小于1MB，那么程序将会分配和当前字符串len相同的空间给该字符串对象。<br>如果修改之后的SDS的长度大于等于1MB的话，程序将分配1MB剩余空间给该字符串对象。</li><li>惰性释放<br>当字符串进行缩短操作的时候，并不立即将空间释放出来，而是将这部分空间通过free进行标识。<br>当然，Redis中提供了专门的API，需要的时候，会真正的释放这部分空闲内存。</li></ol><h3 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h3><p>&ensp;&ensp;由于在Redis中，不是根据空字符而是通过len来判断字符串结束的。所以，即便是中间出现了空字符，对于SDS来说，读取该字符串还是可以的。</p><h3 id="兼容部分C语言函数"><a href="#兼容部分C语言函数" class="headerlink" title="兼容部分C语言函数"></a>兼容部分C语言函数</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Redis中的SDS结构&quot;&gt;&lt;a href=&quot;#Redis中的SDS结构&quot; class=&quot;headerlink&quot; title=&quot;Redis中的SDS结构&quot;&gt;&lt;/a&gt;Redis中的SDS结构&lt;/h2&gt;&lt;p&gt;Redis并没有直接使用C语言中的字符串，而是自己构建了SDS这样的一种简单动态字符串，并且将它作为Redis中字符串的默认表示。&lt;br&gt;在早期的版本中记录了其长度、剩余空间、以及字符数组；&lt;br&gt;最新版本3.2.4中，已经对SDS做了一定的改动：长度、分配内存大小（除去’\0’）、标志位（低三位表示类型，其余五位未使用）、以及字符数组。&lt;br&gt;&lt;img src=&quot;http://ocx5m3vc3.bkt.clouddn.com/SDS.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis逆向工程</title>
    <link href="http://yoursite.com/2018/04/23/Mybatis/Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/23/Mybatis/Mybatis逆向工程/</id>
    <published>2018-04-23T12:39:06.000Z</published>
    <updated>2018-04-22T09:37:22.571Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;逆向工程的字面意思就是反向生成工程。<br>使用逆向工程时，需要注意的是表之间的关系无法映射出来！也就是说Mybatis的逆向工程生成的都是单表操作。</p><ol><li><p>Mybatis逆向工程开发文档<br><a href="http://www.mybatis.org/generator/configreference/xmlconfig.html" target="_blank" rel="external">http://www.mybatis.org/generator/configreference/xmlconfig.html</a></p></li><li><p>使用逆向工程生成代码有好几种方式，这里就介绍一种最简单的，Java程序生成（解释在配置中)<br>&ensp;&ensp;2.1 准备逆向工程配置文件genreatorConfig.xml,名字无所谓,只要在java程序中作为file传入就好:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE generatorConfiguration</div><div class="line">  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</div><div class="line">  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</div><div class="line">&lt;generatorConfiguration&gt;</div><div class="line">    &lt;!--数据库驱动,最好不要有中文字符,不然会找不到--&gt;</div><div class="line">    &lt;classPathEntry location=&quot;F:/cache/mysql-connector-java-5.1.28-bin.jar&quot; /&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;context id=&quot;DB2Tables&quot;    targetRuntime=&quot;MyBatis3&quot;&gt;</div><div class="line"></div><div class="line">        &lt;commentGenerator&gt;</div><div class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;</div><div class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</div><div class="line">        &lt;/commentGenerator&gt;</div><div class="line">        &lt;!--数据库链接地址账号密码--&gt;</div><div class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost/test&quot; userId=&quot;root&quot; password=&quot;&quot;&gt;</div><div class="line">        &lt;/jdbcConnection&gt;</div><div class="line">        &lt;javaTypeResolver&gt;</div><div class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</div><div class="line">        &lt;/javaTypeResolver&gt;</div><div class="line">        &lt;!--生成Model类存放位置--&gt;</div><div class="line">        &lt;javaModelGenerator targetPackage=&quot;com.leige.domain&quot; targetProject=&quot;src&quot;&gt;</div><div class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</div><div class="line">        &lt;/javaModelGenerator&gt;</div><div class="line">        &lt;!--生成映射文件存放位置--&gt;</div><div class="line">        &lt;sqlMapGenerator targetPackage=&quot;com.leige.domain&quot; targetProject=&quot;src&quot;&gt;</div><div class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class="line">        &lt;/sqlMapGenerator&gt;</div><div class="line">        &lt;!--生成DaoMapper类存放位置--&gt;</div><div class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.leige.dao&quot; targetProject=&quot;src&quot;&gt;</div><div class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class="line">        &lt;/javaClientGenerator&gt;</div><div class="line">        &lt;!--生成对应表及类名,需要记住的一点是逆向工程无法生成关联关系,只能生成单表操作--&gt;</div><div class="line">        &lt;table tableName=&quot;student&quot; </div><div class="line">            domainObjectName=&quot;Student&quot; </div><div class="line">          &gt;&lt;/table&gt;</div><div class="line">           &lt;table tableName=&quot;teacher&quot; </div><div class="line">            domainObjectName=&quot;Teacher&quot; </div><div class="line">          &gt;&lt;/table&gt;</div><div class="line">    &lt;/context&gt;</div><div class="line">&lt;/generatorConfiguration&gt;</div></pre></td></tr></table></figure></li></ol><a id="more"></a><p>&ensp;&ensp;2.2<a href="http://pan.baidu.com/s/1jIvLufG" target="_blank" rel="external">下载jar包</a><br>&ensp;&ensp;2.3准备java程序,在开发文档首页,粘贴一下就好了,没必要记住:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.leige.test;</div><div class="line"></div><div class="line">import java.awt.geom.GeneralPath;</div><div class="line">import java.awt.im.InputContext;</div><div class="line">import java.io.File;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.apache.ibatis.io.Resources;</div><div class="line">import org.apache.log4j.chainsaw.Main;</div><div class="line">import org.apache.log4j.lf5.util.Resource;</div><div class="line">import org.mybatis.generator.api.MyBatisGenerator;</div><div class="line">import org.mybatis.generator.config.Configuration;</div><div class="line">import org.mybatis.generator.config.xml.ConfigurationParser;</div><div class="line">import org.mybatis.generator.internal.DefaultShellCallback;</div><div class="line"></div><div class="line">public class MybatisGen &#123;</div><div class="line">    public static void generator() throws Exception&#123;</div><div class="line">           List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();</div><div class="line">           boolean overwrite = true;</div><div class="line">           //项目根路径不要有中文,我的有中文,所以使用绝对路径</div><div class="line">           File configFile = new File(&quot;F:/cache/generatorConfig.xml&quot;);</div><div class="line">           ConfigurationParser cp = new ConfigurationParser(warnings);</div><div class="line">           Configuration config = cp.parseConfiguration(configFile);</div><div class="line">           DefaultShellCallback callback = new DefaultShellCallback(overwrite);</div><div class="line">           MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);</div><div class="line">           myBatisGenerator.generate(null);</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try &#123;</div><div class="line">            generator();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            // TODO Auto-generated catch block</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&ensp;&ensp;2.4运行java程序,就会发现生成的代码: </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;逆向工程的字面意思就是反向生成工程。&lt;br&gt;使用逆向工程时，需要注意的是表之间的关系无法映射出来！也就是说Mybatis的逆向工程生成的都是单表操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Mybatis逆向工程开发文档&lt;br&gt;&lt;a href=&quot;http://www.mybatis.org/generator/configreference/xmlconfig.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.mybatis.org/generator/configreference/xmlconfig.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用逆向工程生成代码有好几种方式，这里就介绍一种最简单的，Java程序生成（解释在配置中)&lt;br&gt;&amp;ensp;&amp;ensp;2.1 准备逆向工程配置文件genreatorConfig.xml,名字无所谓,只要在java程序中作为file传入就好:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE generatorConfiguration&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  PUBLIC &amp;quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;generatorConfiguration&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;!--数据库驱动,最好不要有中文字符,不然会找不到--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;classPathEntry location=&amp;quot;F:/cache/mysql-connector-java-5.1.28-bin.jar&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;context id=&amp;quot;DB2Tables&amp;quot;    targetRuntime=&amp;quot;MyBatis3&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;commentGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;suppressDate&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;suppressAllComments&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/commentGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--数据库链接地址账号密码--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;jdbcConnection driverClass=&amp;quot;com.mysql.jdbc.Driver&amp;quot; connectionURL=&amp;quot;jdbc:mysql://localhost/test&amp;quot; userId=&amp;quot;root&amp;quot; password=&amp;quot;&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/jdbcConnection&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;javaTypeResolver&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;forceBigDecimals&amp;quot; value=&amp;quot;false&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/javaTypeResolver&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--生成Model类存放位置--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;javaModelGenerator targetPackage=&amp;quot;com.leige.domain&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;trimStrings&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/javaModelGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--生成映射文件存放位置--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;sqlMapGenerator targetPackage=&amp;quot;com.leige.domain&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/sqlMapGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--生成DaoMapper类存放位置--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;javaClientGenerator type=&amp;quot;XMLMAPPER&amp;quot; targetPackage=&amp;quot;com.leige.dao&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/javaClientGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--生成对应表及类名,需要记住的一点是逆向工程无法生成关联关系,只能生成单表操作--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;table tableName=&amp;quot;student&amp;quot; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            domainObjectName=&amp;quot;Student&amp;quot; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;gt;&amp;lt;/table&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;lt;table tableName=&amp;quot;teacher&amp;quot; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            domainObjectName=&amp;quot;Teacher&amp;quot; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;gt;&amp;lt;/table&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/context&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/generatorConfiguration&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>缓存机制</title>
    <link href="http://yoursite.com/2018/04/21/Mybatis/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/04/21/Mybatis/缓存机制/</id>
    <published>2018-04-21T12:57:22.000Z</published>
    <updated>2018-04-22T09:29:11.536Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis提供查询缓存，用于减轻数据压力，提高数据库性能。<br>Mybatis提供一级缓存和二级缓存。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.png"><br><a id="more"></a><br>一级缓存是SqlSession级别的缓存。在操作数据库时需要构造SqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的SqlSession之间的缓存数据区域是互相不影响的。</p><p>二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"><br>第一次发起查询的时候，先在缓存中查询是否有相应数据，有就直接返回；如果没有则从数据库获取信息并存储在一级缓存中。  </p><p>如果SqlSession执行commit操作（执行插入、更新、删除）时，清空SqlSession中的一级缓存。这是为了让缓存中存储的是最新的信息，避免脏读。  </p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>Mybatis默认支持一级缓存。不需要配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  @Test</div><div class="line">    public void testCacha_1()&#123;</div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user = userMapper.findUserById(1);</div><div class="line">        System.out.println(user);</div><div class="line">//        user.setName(&quot;heh&quot;);</div><div class="line">//        userMapper.updateUserName(user);</div><div class="line">        User user1 = userMapper.findUserById(1);</div><div class="line">        System.out.println(user1);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p><img src="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98debug.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98debug.png"><br>去掉代码中的注释后，输出：<br><img src="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0debug.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0debug.png"></p><p>只用一级缓存时读取出来的值可能不是最新的。<br>例如：SqlSession1查询，SqlSession2修改，SqlSession1再查询，此时会导致SqlSession1第一次查找的结果不是最新的。此时就需要二级缓存了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacha_1_more</span><span class="params">()</span></span>&#123;</div><div class="line">        SqlSession sqlSession1 = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper1 = sqlSession1.getMapper(UserMapper.class);</div><div class="line">        SqlSession sqlSession2 = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper2 = sqlSession2.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user = userMapper1.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user);</div><div class="line"></div><div class="line">        User user1 = <span class="keyword">new</span> User();</div><div class="line">        user1.setName(<span class="string">"zan"</span>);</div><div class="line">        user1.setId(<span class="number">1</span>);</div><div class="line">        userMapper2.updateUserName(user1);</div><div class="line"></div><div class="line">        User user2 = userMapper1.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user2);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p><img src="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E4%B8%8D%E5%8F%8A%E6%97%B6.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E4%B8%8D%E5%8F%8A%E6%97%B6.png"></p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><h3 id="二级缓存原理"><a href="#二级缓存原理" class="headerlink" title="二级缓存原理"></a>二级缓存原理</h3><p><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86%E5%9B%BE.png"></p><p>开启Mybatis的二级缓存后。</p><p>SqlSession1去查询信息，查询到的信息将会存储到二级缓存中。<br>如果SqlSession3去执行相同mapper下SQL，执行commit提交；将会清空二级缓存。<br>SqlSession去查询信息，现在二级缓存中查找数据。如果存在就直接取出。</p><font color="red">二级缓存的范围更大，多个SqlSession可以共享Mapper的二级缓存区域。</font><h3 id="开启二级缓存"><a href="#开启二级缓存" class="headerlink" title="开启二级缓存"></a>开启二级缓存</h3><ul><li><p>在SqlMapConfig.xml中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure></li><li><p>在UserMapper.xml中开启二级缓存。UserMapper.xml下的sql磁性完成会存储到它的缓存区域。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;mapper namespace=&quot;dao.UserMapper&quot;&gt;</div><div class="line">    &lt;cache /&gt;</div><div class="line">   ...</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure></li><li><p>因为二级缓存存储介质多种多样，不一定在内存。对应的实体需要实现序列化接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public class User implements Serializable&#123;</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacha_2</span><span class="params">()</span></span>&#123;</div><div class="line">        SqlSession sqlSession1 = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper1 = sqlSession1.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user1 = userMapper1.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user1);</div><div class="line"></div><div class="line"><span class="comment">//        User user = new User();</span></div><div class="line"><span class="comment">//        user.setId(2);</span></div><div class="line"><span class="comment">//        user.setName("GG");</span></div><div class="line"><span class="comment">//        userMapper1.updateUserName(user);</span></div><div class="line"></div><div class="line">        sqlSession1.close();</div><div class="line"></div><div class="line"></div><div class="line">        SqlSession sqlSession2 = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper2 = sqlSession2.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user2 = userMapper2.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user2);</div><div class="line"></div><div class="line">        sqlSession2.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="useCache配置"><a href="#useCache配置" class="headerlink" title="useCache配置"></a>useCache配置</h3><p>在statement中设置&lt;font color = ‘red”&gt;useCache=”false”可以禁用当前select的二级缓存，即每次查询都会发出SQL去查询。默认情况是true。<br>如果每次查询都需要最新的数据sql时要禁用二级缓存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findOrderListResultMap&quot; resultMap=&quot;ordersUserMap&quot; useCache=&quot;false&quot;&gt;</div></pre></td></tr></table></figure></p><h3 id="刷新缓存"><a href="#刷新缓存" class="headerlink" title="刷新缓存"></a>刷新缓存</h3><p>刷新缓存就是清空缓存。在mapper的同一个namespace中，如果有其他insert、update、delete操作数据后需要刷新缓存，否则会出现脏读现象。</p><p>设置statement配置中的&lt;font color = ‘red”&gt;flushCache=”true”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;insert id=&quot;insertUser&quot; parameterType=&quot;pojo.User&quot; flushCache=&quot;true&quot;&gt;</div></pre></td></tr></table></figure></p><h3 id="应用场景和局限性"><a href="#应用场景和局限性" class="headerlink" title="应用场景和局限性"></a>应用场景和局限性</h3><ul><li><p>应用场景<br>对于访问多的查询请求且用户对查询结果实时性要求不高，此时可采用mybatis二级缓存技术降低数据库访问量，提高访问速度，业务场景比如：耗时较高的统计分析sql、电话账单查询sql等。<br>实现方法如下：通过设置刷新间隔时间，由mybatis每隔一段时间自动清空缓存，根据数据变化频率设置缓存刷新间隔flushInterval，比如设置为30分钟、60分钟、24小时等，根据需求而定。</p></li><li><p>局限性<br>mybatis二级缓存对细粒度的数据级别的缓存实现不好，比如如下需求：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次都能查询最新的商品信息，此时如果使用mybatis的二级缓存就无法实现当一个商品变化时只刷新该商品的缓存信息而不刷新其它商品的信息，因为mybaits的二级缓存区域以mapper为单位划分，当一个商品信息变化会将所有商品信息的缓存数据全部清空。解决此类问题需要在业务层根据需求对数据有针对性缓存。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mybatis提供查询缓存，用于减轻数据压力，提高数据库性能。&lt;br&gt;Mybatis提供一级缓存和二级缓存。&lt;br&gt;&lt;img src=&quot;http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.png&quot; alt=&quot;http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>延迟加载</title>
    <link href="http://yoursite.com/2018/04/21/Mybatis/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2018/04/21/Mybatis/延迟加载/</id>
    <published>2018-04-21T11:00:48.000Z</published>
    <updated>2018-04-21T13:36:00.622Z</updated>
    
    <content type="html"><![CDATA[<p>resultMap可以实现高级映射（使用association、collection实现一对一以及一对多映射），association、collection具备延迟加载功能。</p><p>延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能。<br><a id="more"></a><br>开启延迟加载需要在SqlMapConfig.xml的setting中设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;settings&gt;</div><div class="line">    &lt;!-- 打开延迟加载 的开关 --&gt;</div><div class="line">    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</div><div class="line">    &lt;!-- 将积极加载改为消极加载即按需要加载 --&gt;</div><div class="line">    &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</div><div class="line">&lt;/settings&gt;</div></pre></td></tr></table></figure></p><p>书写需要的两个satatement </p><ul><li>查询用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findUserLazy&quot; resultMap=&quot;findUserAndCarLazyMap&quot;&gt;</div><div class="line">        SELECT *</div><div class="line">        FROM user</div><div class="line">        WHERE id = #&#123;id&#125;</div><div class="line">    &lt;/select&gt;</div></pre></td></tr></table></figure><ul><li><p>查询拥有的Car  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findCarByUserId&quot; parameterType=&quot;int&quot; resultType=&quot;pojo.Car&quot;&gt;</div><div class="line">        SELECT *</div><div class="line">        FROM car</div><div class="line">        WHERE user_id = #&#123;value&#125;</div><div class="line">    &lt;/select&gt;</div></pre></td></tr></table></figure></li><li><p>书写resultMap  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap id=&quot;findUserAndCarLazyMap&quot; type=&quot;pojo.User&quot;&gt;</div><div class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt;</div><div class="line">        &lt;result property=&quot;name&quot; column=&quot;name&quot;&gt;&lt;/result&gt;</div><div class="line">        &lt;result property=&quot;password&quot; column=&quot;password&quot;&gt;&lt;/result&gt;</div><div class="line">        &lt;!--</div><div class="line">            多了select和column</div><div class="line">            select:会去寻找相应的方法，如果不在本mapper中则需要在前面添加其namespace（我这里是放在本mapper中的）</div><div class="line">            column:根据哪一列去进行查询。</div><div class="line">        --&gt;</div><div class="line">        &lt;association property=&quot;car&quot;</div><div class="line">                     select=&quot;findCarByUserId&quot; </div><div class="line">                     column=&quot;id&quot;</div><div class="line">                     javaType=&quot;pojo.Car&quot;&gt;</div><div class="line"></div><div class="line">        &lt;/association&gt;</div><div class="line">    &lt;/resultMap&gt;</div></pre></td></tr></table></figure></li><li><p>在相应的Mapper接口中书写方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public User findUserLazy(int id);</div></pre></td></tr></table></figure></li><li><p>测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void testFindUserLazyLoding()&#123;</div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user = userMapper.findUserLazy(2);</div><div class="line">        System.out.println(user);</div><div class="line"></div><div class="line">        //System.out.println(user.getCar().toString());</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li></ul><p>PS:这里不知道是我用的IDEA的问题还是怎么的，在输出的时候竟然也执行了第二条sql语句。。。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDdebug.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDdebug.png"></p><center>延迟加载debug</center><br><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis%E4%B8%8D%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDdebug.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis%E4%B8%8D%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDdebug.png"><br><center>不延迟加载debug</center><hr><p>更新：后来发现出现上面第一图的情况是由于在System.out.println(user);会执行第二条SQL。。  需要配置一下设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;setting     name=&quot;lazyLoadTriggerMethods&quot; value=&quot; &quot; /&gt;</div></pre></td></tr></table></figure></p><p>lazyLoadTriggerMethods默认情况下仅仅支持自动将equals,clone,hashCode,toString这几个方法定义为延迟加载的加载触发方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;resultMap可以实现高级映射（使用association、collection实现一对一以及一对多映射），association、collection具备延迟加载功能。&lt;/p&gt;
&lt;p&gt;延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能。&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>动态sql</title>
    <link href="http://yoursite.com/2018/04/21/Mybatis/%E5%8A%A8%E6%80%81sql/"/>
    <id>http://yoursite.com/2018/04/21/Mybatis/动态sql/</id>
    <published>2018-04-21T03:04:41.000Z</published>
    <updated>2018-04-21T03:39:10.740Z</updated>
    
    <content type="html"><![CDATA[<p>mybatis核心。对sql语句进行灵活操作，通过表达式进行判断，对SQL进行灵活拼接、组装。<br><a id="more"></a></p><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><ul><li>mapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserList"</span> <span class="attr">parameterType</span>=<span class="string">"pojp.UserQueryVo"</span></span></div><div class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">"pojo.UserCustom"</span>&gt;</span></div><div class="line">    SELECT * FROM user</div><div class="line">    <span class="comment">&lt;!--  where 可以自动去掉条件中的第一个and --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom!=null"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.sex!=null and userCustom.sex != '' "</span>&gt;</span></div><div class="line">               AND user.sex=#&#123;userCustom.sex&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.username!=null and userCustom.username != '' "</span>&gt;</span></div><div class="line">               AND user.username LIKE '%$&#123;userCustom.username&#125;%'</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p>注意：如果传入的userCustom为null<br>那么查询语句会变成<font color="red">SELECT * FROM user</font></p><h3 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h3><p>将上面实现的动态sql判断代码块抽取出来，组成一个sql片段。其他的statement中就可以应用sql片段。</p><ul><li><p>定义SQL片段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 定义sql片段</span></div><div class="line"><span class="comment">id：sql片段的唯 一标识</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">经验：是基于单表来定义sql片段，这样话这个sql片段可重用性才高</span></div><div class="line"><span class="comment">在sql片段中不要包括 where</span></div><div class="line"><span class="comment"> --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"query_user_where"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom!=null"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.sex!=null and userCustom.sex!=''"</span>&gt;</span></div><div class="line">            AND user.sex = #&#123;userCustom.sex&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.username!=null and userCustom.username!=''"</span>&gt;</span></div><div class="line">            AND user.username LIKE '%$&#123;userCustom.username&#125;%'</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>引用SQL片段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserList"</span> <span class="attr">parameterType</span>=<span class="string">"pojo.UserQueryVo"</span></span></div><div class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">"pojo.UserCustom"</span>&gt;</span></div><div class="line">    SELECT * FROM user</div><div class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 引用sql片段 的id，如果refid指定的id不在本mapper文件中，需要前边加namespace --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"query_user_where"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 在这里还要引用其它的sql片段  --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h3 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h3><p>向SQL传递数组或List，mybatis使用foreach解析<br>多id条件查询常有以下两种sql写法：  </p><ul><li><font color="red">SELECT * FROM USER WHERE id=1 OR id=10 OR id=16</font>  </li><li><font color="red">SELECT * FROM USER WHERE id IN(1,10,16)</font></li></ul><p>在输入参数类型中添加<font color="red">List<integer> ids</integer></font>传入多个id<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserQueryVo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//传入多个id</span></div><div class="line">    <span class="keyword">private</span> List&lt;Integer&gt; ids;</div><div class="line"></div><div class="line">    getter、setter方法</div><div class="line">    。。。</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>修改mapper.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids!=null"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用 foreach遍历传入ids</span></div><div class="line"><span class="comment">    collection：指定输入 对象中集合属性</span></div><div class="line"><span class="comment">    item：每个遍历生成对象中</span></div><div class="line"><span class="comment">    open：开始遍历时拼接的串</span></div><div class="line"><span class="comment">    close：结束遍历时拼接的串</span></div><div class="line"><span class="comment">    separator：遍历的两个对象中需要拼接的串</span></div><div class="line"><span class="comment">     --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用实现下边的sql拼接：</span></div><div class="line"><span class="comment">     AND (id=1 OR id=10 OR id=16)</span></div><div class="line"><span class="comment">     --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"user_id"</span> <span class="attr">open</span>=<span class="string">"AND ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 每个遍历需要拼接的串 --&gt;</span></div><div class="line">        id=#&#123;user_id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 实现  “ and id IN(1,10,16)”拼接 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;foreach collection="ids" item="user_id" open="and id IN(" close=")" separator=","&gt;</span></div><div class="line"><span class="comment">        每个遍历需要拼接的串</span></div><div class="line"><span class="comment">        #&#123;user_id&#125;</span></div><div class="line"><span class="comment">    &lt;/foreach&gt; --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mybatis核心。对sql语句进行灵活操作，通过表达式进行判断，对SQL进行灵活拼接、组装。&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>phpStudy升级MySQL</title>
    <link href="http://yoursite.com/2018/04/20/%E9%81%87%E5%88%B0%E8%BF%87%E7%9A%84%E5%9D%91/phpStudy%E5%8D%87%E7%BA%A7MySQL/"/>
    <id>http://yoursite.com/2018/04/20/遇到过的坑/phpStudy升级MySQL/</id>
    <published>2018-04-20T08:35:38.000Z</published>
    <updated>2018-04-20T15:33:54.640Z</updated>
    
    <content type="html"><![CDATA[<p>今天在导入别人给我的sql文件的时候，怎么也导不进去。后来才知道我用的phpStudy的SQL版本太低了。于是需要升级一下。</p><p>首先从官网下载MySql安装包<a href="https://dev.mysql.com/downloads/file/?id=467269" title="https://dev.mysql.com/downloads/file/?id=467269" target="_blank" rel="external">https://dev.mysql.com/downloads/file/?id=467269</a></p><p>步骤：<br>1.最好先备份一份原来phpStudy的MYSQL文件夹<br>2.把下载的 MySQL 压缩文件解压至 phpStudy 下的 MySQL目录，复制 my-default.ini ，重命名为 my.ini。<br>3.打开 my.ini，找到 #basedir 处编辑：  </p><pre><code>basedir = I:\phpStudy\MySQL  datadir = I:\phpStudy\MySQL\data  </code></pre>注：有任何错误都是因为以上路径配置错误导致的<a id="more"></a>4.把 MySQL 安装路径添加至系统环境变量  PATH=…….;I:\phpStudy\MySQL\bin5.在 cmd 下进入 MySQL 的 bin 目录（我的是 I:\phpStudy\MySQL\bin），执行：  初始化数据库：  <pre><code>mysqld --initialize</code></pre>  <p>安装服务：  </p><pre><code>mysqld -install</code></pre> <p>启动服务：  </p><pre><code>net start MySQL</code></pre><p>6.打开 my.ini，找到 [mysqld]，在下面添加：<br>skip-grant-tables(此参数用于忘记mysql密码)<br>此时使用 root 账号，密码处按回车即可登录。</p><p>7.修改密码：  </p><pre><code>mysql>update mysql.user set authentication_string=password('新密码') where user='root' and Host ='localhost';</code></pre>  8.刷新权限：  <pre><code>FLUSH PRIVILEGES;</code></pre>  9.注释掉 my.ini 中刚才添加的skip-grant-tables重新登录。10.更新用户信息：  <pre><code>mysql> ALTER USER USER() IDENTIFIED BY '新密码';</code></pre>11.查看 mySQL 版本：  <pre><code>mysql> select version();  +-----------+  | version() |  +-----------+  | 5.7.17 |  +-----------+  </code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在导入别人给我的sql文件的时候，怎么也导不进去。后来才知道我用的phpStudy的SQL版本太低了。于是需要升级一下。&lt;/p&gt;
&lt;p&gt;首先从官网下载MySql安装包&lt;a href=&quot;https://dev.mysql.com/downloads/file/?id=467269&quot; title=&quot;https://dev.mysql.com/downloads/file/?id=467269&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://dev.mysql.com/downloads/file/?id=467269&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;步骤：&lt;br&gt;1.最好先备份一份原来phpStudy的MYSQL文件夹&lt;br&gt;2.把下载的 MySQL 压缩文件解压至 phpStudy 下的 MySQL目录，复制 my-default.ini ，重命名为 my.ini。&lt;br&gt;3.打开 my.ini，找到 #basedir 处编辑：  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basedir = I:\phpStudy\MySQL  
datadir = I:\phpStudy\MySQL\data  
&lt;/code&gt;&lt;/pre&gt;
注：有任何错误都是因为以上路径配置错误导致的
    
    </summary>
    
      <category term="软件" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="坑" scheme="http://yoursite.com/tags/%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>输入映射和输出映射</title>
    <link href="http://yoursite.com/2018/04/20/Mybatis/%E8%BE%93%E5%85%A5%E6%98%A0%E5%B0%84%E5%92%8C%E8%BE%93%E5%87%BA%E6%98%A0%E5%B0%84/"/>
    <id>http://yoursite.com/2018/04/20/Mybatis/输入映射和输出映射/</id>
    <published>2018-04-20T05:10:35.000Z</published>
    <updated>2018-04-21T04:02:36.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="输入映射"><a href="#输入映射" class="headerlink" title="输入映射"></a>输入映射</h2><p>Mybatis映射文件通过<font color="red">parameterType</font>指定输入参数的类型，类型可以是  </p><ul><li>简单类型</li><li>hashmap</li><li>pojo的包装类型</li></ul><p>在xml映射文件中sql语句会根据OGNL自动获取传入类型中的属性值。<br>如果传入类型中没有相应的属性值，就会报找不到对应属性的错。  </p><p>即使传入类型的具体对象中的相应属性为null，也并不会报错。因为Mybatis使用的是动态sql，如果没有设置某个值，条件就不会拼接在sql中去。<br><a id="more"></a></p><h2 id="输出映射"><a href="#输出映射" class="headerlink" title="输出映射"></a>输出映射</h2><p>输入映射主要有两种方式： </p><ul><li><font color="red">resultType</font></li><li><font color="red">resultMap</font></li></ul><h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><ul><li>使用<font color="red">resultType</font>进行输出映射时，只有查询出来的列名和pojo中的属性名一致，才能映射成功。<ul><li>列名与pojo的属性名<b>只要有一个不一致</b>就不会创建pojo对象，此时会报错。</li><li>列名与pojo的属性名<b>只要有一个一致</b>就会创建一个pojo对象并返回。</li></ul></li></ul><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p>如果查询出来的列名和pojo的属性名不一致，可以通过定义一个resultMap对列名和属性名之间进行映射。<br>1.定义resultMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap type=&quot;user&quot; id=&quot;userResultMap&quot;&gt;</div><div class="line">        &lt;!-- id表示查询结果集中唯一标识 </div><div class="line">        column：查询出来的列名</div><div class="line">        property：type指定的pojo类型中的属性名</div><div class="line">        最终resultMap对column和property作一个映射关系 （对应关系）</div><div class="line">        --&gt;</div><div class="line">        &lt;id column=&quot;id_&quot; property=&quot;id&quot;/&gt;</div><div class="line">        &lt;!-- </div><div class="line">        result：对普通名映射定义</div><div class="line">        column：查询出来的列名</div><div class="line">        property：type指定的pojo类型中的属性名</div><div class="line">        最终resultMap对column和property作一个映射关系 （对应关系）</div><div class="line">         --&gt;</div><div class="line">        &lt;result column=&quot;username_&quot; property=&quot;username&quot;/&gt;</div><div class="line">        &lt;!--</div><div class="line">        一对一映射</div><div class="line">        association：用于映射关联查询单个对象的信息</div><div class="line">        property：要将关联查询的用户信息映射到Orders中哪个属性</div><div class="line">        javaType：映射到user的哪个属性</div><div class="line">       --&gt;</div><div class="line">       &lt;!--</div><div class="line">       一对多映射</div><div class="line">       collection：对关联查询到多条记录映射到集合对象中</div><div class="line">       property：将关联查询到多条记录映射到com.iot.mybatis.po.Orders哪个属性</div><div class="line">       ofType：指定映射到list集合属性中pojo的类型</div><div class="line">       --&gt;</div><div class="line">     &lt;/resultMap&gt;</div></pre></td></tr></table></figure><p>2.使用resultMap作为statement的输出映射类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 使用resultMap进行输出映射</div><div class="line">        resultMap：指定定义的resultMap的id，如果这个resultMap在其它的mapper文件，前边需要加namespace</div><div class="line">        --&gt;</div><div class="line">    &lt;select id=&quot;findUserByIdResultMap&quot; parameterType=&quot;int&quot; resultMap=&quot;userResultMap&quot;&gt;</div><div class="line">        SELECT id id_,username username_ FROM USER WHERE id=#&#123;value&#125;</div><div class="line">    &lt;/select&gt;</div></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>使用resultMap多表查询时，可能会导致重复字段赋值错误。<br>解决方法：在查询时定义别名。resultMap中根据别名列来映射</p><hr><p>resultType和resultMap区别：</p><ul><li>resultType：使用resultType实现较为简单，如果pojo中没有包括查询出来的列名，需要增加列名对应的属性，即可完成映射。如果没有查询结果的特殊要求建议使用resultType。</li><li>resultMap：需要单独定义resultMap，实现有点麻烦，如果对查询结果有特殊的要求，使用resultMap可以完成将关联查询映射pojo的属性中。</li><li>resultMap可以实现延迟加载，resultType无法实现延迟加载。</li></ul><hr><p>association：</p><ul><li>作用：将关联查询信息映射到一个pojo对象中。  </li><li>场合：为了方便查询关联信息可以使用association将关联订单信息映射为用户对象的pojo属性中，比如：查询订单及关联用户信息。</li></ul><p>collection：  </p><ul><li>作用：将关联查询信息映射到一个list集合中。</li><li>场合：为了方便查询遍历关联信息可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块及模块下的菜单，可使用collection将模块映射到模块list中，将菜单列表映射到模块对象的菜单list属性中，这样的作的目的也是方便对查询结果集进行遍历查询。如果使用resultType无法将查询结果映射到list集合中。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;输入映射&quot;&gt;&lt;a href=&quot;#输入映射&quot; class=&quot;headerlink&quot; title=&quot;输入映射&quot;&gt;&lt;/a&gt;输入映射&lt;/h2&gt;&lt;p&gt;Mybatis映射文件通过&lt;font color=&quot;red&quot;&gt;parameterType&lt;/font&gt;指定输入参数的类型，类型可以是  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单类型&lt;/li&gt;
&lt;li&gt;hashmap&lt;/li&gt;
&lt;li&gt;pojo的包装类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在xml映射文件中sql语句会根据OGNL自动获取传入类型中的属性值。&lt;br&gt;如果传入类型中没有相应的属性值，就会报找不到对应属性的错。  &lt;/p&gt;
&lt;p&gt;即使传入类型的具体对象中的相应属性为null，也并不会报错。因为Mybatis使用的是动态sql，如果没有设置某个值，条件就不会拼接在sql中去。&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>SqlMapConfig</title>
    <link href="http://yoursite.com/2018/04/20/Mybatis/SqlMapConfig/"/>
    <id>http://yoursite.com/2018/04/20/Mybatis/SqlMapConfig/</id>
    <published>2018-04-20T03:29:14.000Z</published>
    <updated>2018-04-20T05:09:00.417Z</updated>
    
    <content type="html"><![CDATA[<p>SqlMapConfig.xml中配置的内容和顺序： </p><ul><li>properties(属性)</li><li>settings(全局配置参数)</li><li><b>typeAliases(类型别名)</b></li><li><em>objectFactory(对象工厂)</em></li><li><em>plugins(插件)</em></li><li>environments(环境集合属性对象)  <ul><li>environment(环境属性对象)<ul><li>transactionManager(事务管理)</li><li>dataSource(数据源)</li></ul></li></ul></li><li><b>mappers(映射器）</b></li></ul><a id="more"></a><h3 id="properties-属性"><a href="#properties-属性" class="headerlink" title="properties(属性)"></a>properties(属性)</h3><p>将数据库连接参数单独配置在db.properties中，可以避免xml硬编码，方便以后更改以及其他文件使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbc.driver=com.mysql.jdbc.Driver</div><div class="line">jdbc.url=jdbc:mysql:////mybatis?characterEncoding=utf-8</div><div class="line">jdbc.username=root</div><div class="line">jdbc.password=123</div></pre></td></tr></table></figure></p><p>在sqlMapConfig.xml中加载属性文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--properties中还可以配置一些属性名和属性值  --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;property name="jdbc.driver" value=""/&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure></p><p><font color="red">Mybatis加载资源属性顺序：(后面加载的会覆盖前面）</font>  </p><ol><li>在<b>properties</b>元素体内定义的属性</li><li><b>properties</b>元素中resource或url加载的属性</li><li><b>parameterType</b>传递的属性</li></ol><h3 id="settings-全局参数配置"><a href="#settings-全局参数配置" class="headerlink" title="settings(全局参数配置)"></a>settings(全局参数配置)</h3><p>Mybatis框架运行时的一些参数。比如：二级缓存、延迟加载等<br>官方文档：<a href="http://www.mybatis.org/mybatis-3/configuration.html#settings" title="http://www.mybatis.org/mybatis-3/configuration.html#settings" target="_blank" rel="external">mybatis-settings</a></p><h3 id="typeAliases-类型别名"><a href="#typeAliases-类型别名" class="headerlink" title="typeAliases(类型别名)"></a>typeAliases(类型别名)</h3><p><font color="red">parameterType</font> 指定输入参数的类型  </p><p><font color="red">resultType</font> 指定输出参数的映射类型<br>每次都要输入全名路径太过于麻烦,类型别名简化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 别名定义 --&gt;</div><div class="line">&lt;typeAliases&gt;</div><div class="line"></div><div class="line">    &lt;!-- 针对单个别名定义</div><div class="line">    type：类型的路径</div><div class="line">    alias：别名</div><div class="line">     --&gt;</div><div class="line">    &lt;!-- &lt;typeAlias type=&quot;Pojo.User&quot; alias=&quot;user&quot;/&gt; --&gt;</div><div class="line">    &lt;!-- 批量别名定义</div><div class="line">    指定包名，mybatis自动扫描包中的po类，自动定义别名，别名就是类名（首字母大写或小写都可以）</div><div class="line">    --&gt;</div><div class="line">    &lt;package name=&quot;Pojo&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/typeAliases&gt;</div></pre></td></tr></table></figure></p><p>具体参考官网文档：<a href="http://www.mybatis.org/mybatis-3/configuration.html#typeAliases" title="http://www.mybatis.org/mybatis-3/configuration.html#typeAliases" target="_blank" rel="external">typeAliases</a></p><p>Mybatis默认支持的别名 </p><center>（8大基本类型及其包装类+Data+大数类型） </center><table><thead><tr><th>别名</th><th>映射的类型   </th></tr></thead><tbody><tr><td>_byte</td><td>byte  </td></tr><tr><td>_long</td><td>long  </td></tr><tr><td>_short</td><td>short  </td></tr><tr><td>_int</td><td>int  </td></tr><tr><td>_integer</td><td>int  </td></tr><tr><td>_double</td><td>double  </td></tr><tr><td>_float</td><td>float  </td></tr><tr><td>_boolean</td><td>boolean  </td></tr><tr><td>string</td><td>String  </td></tr><tr><td>byte</td><td>Byte  </td></tr><tr><td>long</td><td>Long  </td></tr><tr><td>short</td><td>Short  </td></tr><tr><td>int</td><td>Integer  </td></tr><tr><td>integer</td><td>Integer  </td></tr><tr><td>double</td><td>Double  </td></tr><tr><td>float</td><td>Float  </td></tr><tr><td>boolean</td><td>Boolean  </td></tr><tr><td>date</td><td>Date  </td></tr><tr><td>decimal</td><td>BigDecimal  </td></tr><tr><td>bigdecimal</td><td>BigDecimal  </td></tr></tbody></table><h3 id="typeHandlers-类型处理器"><a href="#typeHandlers-类型处理器" class="headerlink" title="typeHandlers(类型处理器)"></a>typeHandlers(类型处理器)</h3><p>mybatis中通过typeHandlers完成jdbc类型和java类型的转换。<br>参考：<a href="http://www.mybatis.org/mybatis-3/configuration.html#typeHandlers" title="http://www.mybatis.org/mybatis-3/configuration.html#typeHandlers" target="_blank" rel="external">typeHandlers</a></p><h3 id="mappers-映射配置"><a href="#mappers-映射配置" class="headerlink" title="mappers(映射配置)"></a>mappers(映射配置)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!--通过resource方法一次加载一个映射文件 --&gt;</div><div class="line">&lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt;</div><div class="line"></div><div class="line">&lt;!--通过mapper接口加载单个mapper--&gt;</div><div class="line">&lt;mapper class=&quot;mapper.UserMapper&quot;/&gt;</div><div class="line"></div><div class="line">&lt;!-- 批量加载mapper(推荐使用)</div><div class="line">        指定mapper接口的包名，mybatis自动扫描包下边所有mapper接口进行加载</div><div class="line">        遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录 中</div><div class="line">        上边规范的前提是：使用的是mapper代理方法</div><div class="line">         --&gt;</div><div class="line">&lt;package name=&quot;mapper&quot;/&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SqlMapConfig.xml中配置的内容和顺序： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;properties(属性)&lt;/li&gt;
&lt;li&gt;settings(全局配置参数)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;typeAliases(类型别名)&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;objectFactory(对象工厂)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;plugins(插件)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;environments(环境集合属性对象)  &lt;ul&gt;
&lt;li&gt;environment(环境属性对象)&lt;ul&gt;
&lt;li&gt;transactionManager(事务管理)&lt;/li&gt;
&lt;li&gt;dataSource(数据源)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;mappers(映射器）&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis--原始dao和mapper代理方法</title>
    <link href="http://yoursite.com/2018/04/20/Mybatis/Mybatis-%E5%8E%9F%E5%A7%8Bdao%E5%92%8Cmapper%E4%BB%A3%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/20/Mybatis/Mybatis-原始dao和mapper代理方法/</id>
    <published>2018-04-20T01:16:36.000Z</published>
    <updated>2018-04-20T01:46:07.759Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>SqlSessionFactoryBuilder<br>通过<font color="red">SqlSessionFactoryBuilder</font>创建会话工厂<font color="red">SqlSessionFactory</font>。将<font color="red">SqlSessionFactoryBuilder</font>当成一个工具类使用即可，不需要使用单例管理<font color="red">SqlSessionFactoryBuilder</font>。在创建<font color="red">SqlSessionFactory</font>时候，只需要new一次<font color="red">SqlSessionFactoryBuilder</font>即可。</p></li><li><p>SqlSessionFactory<br>通过<font color="red">SqlSessionFactory</font>创建<font color="red">SqlSession</font>；由于<font color="red">SqlSessionFactory</font>是线程安全的，应该在应用执行期间都存在，所以在应用运行期间不要重复创建多次，建议使用单例模式。</p></li><li><p>SqlSession<br><font color="red">SqlSession</font>是应用程序和持久层之间执行交互操作的一个单线程对象。<font color="red">SqlSession</font>中提供了许多操作数据库的方法。<br><font color="red">SqlSession</font>是线程不安全的。<br>使用完<font color="red">SqlSession</font>要确保在finally块中关闭它。</p><a id="more"></a><h2 id="原始dao接口开发"><a href="#原始dao接口开发" class="headerlink" title="原始dao接口开发"></a>原始dao接口开发</h2><p>程序员需要写dao接口和dao实现类  </p><h3 id="dao接口"><a href="#dao接口" class="headerlink" title="dao接口"></a>dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="dao接口实现类"><a href="#dao接口实现类" class="headerlink" title="dao接口实现类"></a>dao接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//使用构造方法注入SqlSessionFactory</span></div><div class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        User user = sqlSession.selectOne(<span class="string">"test.findUserById"</span>,id);</div><div class="line">        sqlSession.close();</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        List&lt;User&gt; list = sqlSession.selectList(<span class="string">"test.findUserByName"</span>,name);</div><div class="line">        sqlSession.close();</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_2</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="comment">//mybatis配置文件</span></div><div class="line">        String resource = <span class="string">"sqlMapConfig.xml"</span>;</div><div class="line">        <span class="comment">//得到配置文件流</span></div><div class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</div><div class="line">        <span class="comment">//创建会话工厂</span></div><div class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDao</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="comment">//创建UserDao的对象</span></div><div class="line">        UserDao userDao = <span class="keyword">new</span> UserDaoImpl(sqlSessionFactory);</div><div class="line">        User user = userDao.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user);</div><div class="line">        List&lt;User&gt; list = userDao.findUserByName(<span class="string">"ho"</span>);</div><div class="line">        System.out.println(list);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="总结原始dao开发问题"><a href="#总结原始dao开发问题" class="headerlink" title="总结原始dao开发问题"></a>总结原始dao开发问题</h3><p>1.dao接口实现类方法中存在大量的模板方法。<br>2.调用SqlSession方法时传入参数硬编码。<br>3.由于SqlSession方法使用泛型，即使变量类型传入错误，在编译阶段也不会报错，不利于程序员开发。</p><hr><h2 id="mapper代理方法"><a href="#mapper代理方法" class="headerlink" title="mapper代理方法"></a>mapper代理方法</h2><p>程序员只需要mapper接口(相当于dao接口)<br>程序员还需要编写mapper.xml映射文件<br>程序员编写mapper接口需要遵循一些开发规范，Mybatis可以自动生成mapper接口实现类代理对象。</p><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><ul><li><p>在mapper.xml中namespace等于mapper接口地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment"> namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离</span></div><div class="line"><span class="comment"> 注意：使用mapper代理方法开发，namespace有特殊重要的作用,namespace等于mapper接口地址</span></div><div class="line"><span class="comment"> --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"mapper.UserMapper"</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>mapper.java接口中的方法名和mapper.xml中statement的id一致  </p></li><li>mapper.java接口中的方法输入参数类型和mapper.xml中statement的parameterType指定的类型一致。  </li><li>mapper.java接口中的方法返回值类型和mapper.xml中statement的resultType指定的类型一致。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;SqlSessionFactoryBuilder&lt;br&gt;通过&lt;font color=&quot;red&quot;&gt;SqlSessionFactoryBuilder&lt;/font&gt;创建会话工厂&lt;font color=&quot;red&quot;&gt;SqlSessionFactory&lt;/font&gt;。将&lt;font color=&quot;red&quot;&gt;SqlSessionFactoryBuilder&lt;/font&gt;当成一个工具类使用即可，不需要使用单例管理&lt;font color=&quot;red&quot;&gt;SqlSessionFactoryBuilder&lt;/font&gt;。在创建&lt;font color=&quot;red&quot;&gt;SqlSessionFactory&lt;/font&gt;时候，只需要new一次&lt;font color=&quot;red&quot;&gt;SqlSessionFactoryBuilder&lt;/font&gt;即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SqlSessionFactory&lt;br&gt;通过&lt;font color=&quot;red&quot;&gt;SqlSessionFactory&lt;/font&gt;创建&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;；由于&lt;font color=&quot;red&quot;&gt;SqlSessionFactory&lt;/font&gt;是线程安全的，应该在应用执行期间都存在，所以在应用运行期间不要重复创建多次，建议使用单例模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SqlSession&lt;br&gt;&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;是应用程序和持久层之间执行交互操作的一个单线程对象。&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;中提供了许多操作数据库的方法。&lt;br&gt;&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;是线程不安全的。&lt;br&gt;使用完&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;要确保在finally块中关闭它。&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis入门程序2</title>
    <link href="http://yoursite.com/2018/04/19/Mybatis/Mybatis%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F2/"/>
    <id>http://yoursite.com/2018/04/19/Mybatis/Mybatis入门程序2/</id>
    <published>2018-04-19T14:56:00.000Z</published>
    <updated>2018-04-20T01:03:06.068Z</updated>
    
    <content type="html"><![CDATA[<p>在User.xml文件中增加增删改三个功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;!--</div><div class="line">       parameterType 为实体对象</div><div class="line">       #&#123;&#125; 会使用OGNL来获得同名的值</div><div class="line">       insert update delete 默认返回的都是影响的条数</div><div class="line">   --&gt;</div><div class="line">   &lt;insert id=&quot;insertUser&quot; parameterType=&quot;Pojo.User&quot;&gt;</div><div class="line">       &lt;!--</div><div class="line">           如果要求返回刚插入的id值则需要增加&lt;selectKey&gt;</div><div class="line"></div><div class="line">           SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键</div><div class="line">           keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性</div><div class="line">           order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序</div><div class="line">           resultType：指定SELECT LAST_INSERT_ID()的结果类型</div><div class="line"></div><div class="line">           //也可以使用以下这种方法</div><div class="line">           useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;</div><div class="line"></div><div class="line">           以上两种方法可以自动将id赋值给传入的那个实体相应的属性中去</div><div class="line">       --&gt;</div><div class="line">       &lt;selectKey keyProperty=&quot;id&quot; order=&quot;AFTER&quot; resultType=&quot;java.lang.Integer&quot;&gt;</div><div class="line">           SELECT LAST_INSERT_ID()</div><div class="line">       &lt;/selectKey&gt;</div><div class="line">       INSERT INTO user(name,password)</div><div class="line">       VALUES (#&#123;name&#125;,#&#123;password&#125;)</div><div class="line"></div><div class="line">   &lt;/insert&gt;</div><div class="line"></div><div class="line">   &lt;!--更新用户信息，id必须存在--&gt;</div><div class="line">   &lt;update id=&quot;updateUser&quot; parameterType=&quot;Pojo.User&quot;&gt;</div><div class="line">       UPDATE user</div><div class="line">       SET password = #&#123;password&#125;</div><div class="line">       WHERE id = #&#123;id&#125;</div><div class="line">   &lt;/update&gt;</div><div class="line"></div><div class="line">   &lt;!--根据id删除用户--&gt;</div><div class="line">   &lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;</div><div class="line">       DELETE FROM</div><div class="line">       user</div><div class="line">       WHERE id = #&#123;id&#125;</div><div class="line">   &lt;/delete&gt;</div></pre></td></tr></table></figure></p><a id="more"></a><p>在测试类中添加相应的三个测试方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//增加测试</div><div class="line">      User user = new User();</div><div class="line">      user.setName(&quot;JJ&quot;);</div><div class="line">      user.setPassword(&quot;JJ&quot;);</div><div class="line">      sqlSession.insert(&quot;test.insertUser&quot;,user);</div><div class="line">      System.out.println(user.getId());</div><div class="line"></div><div class="line">//更新测试</div><div class="line">      User user = new User();</div><div class="line">      user.setId(4);</div><div class="line">      user.setName(&quot;JJ&quot;);</div><div class="line">      user.setPassword(&quot;KK&quot;);</div><div class="line">      sqlSession.update(&quot;test.updateUser&quot;,user);</div><div class="line"></div><div class="line">      //删除测试</div><div class="line">sqlSession.delete(&quot;test.deleteUser&quot;,4);</div></pre></td></tr></table></figure></p><h3 id="mybatis和hibernate本质区别和应用场景"><a href="#mybatis和hibernate本质区别和应用场景" class="headerlink" title="mybatis和hibernate本质区别和应用场景"></a>mybatis和hibernate本质区别和应用场景</h3><ul><li>hibernate  </li></ul><p>是一个标准ORM框架（对象关系映射）。入门门槛较高的，不需要程序写sql，sql语句自动生成了。对sql语句进行优化、修改比较困难的。<font color="red">hibernate对象/关系映射能力强，数据库无关性好。</font></p><p>应用场景：适用与需求变化不多的中小型项目，比如：后台管理系统，erp、orm、oa。。</p><ul><li>mybatis</li></ul><p>专注是sql本身，需要程序员自己编写sql语句，sql修改、优化比较方便。mybatis是一个不完全的ORM框架，虽然程序员自己写sql，mybatis也可以实现映射（输入映射、输出映射）。<font color="red">但是灵活的前提是Mybatis无法做到数据库无关性。</font></p><p>应用场景：适用与需求变化较多的项目，比如：互联网项目。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在User.xml文件中增加增删改三个功能&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!--&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       parameterType 为实体对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       #&amp;#123;&amp;#125; 会使用OGNL来获得同名的值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       insert update delete 默认返回的都是影响的条数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;insert id=&amp;quot;insertUser&amp;quot; parameterType=&amp;quot;Pojo.User&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;!--&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           如果要求返回刚插入的id值则需要增加&amp;lt;selectKey&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           resultType：指定SELECT LAST_INSERT_ID()的结果类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           //也可以使用以下这种方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           useGeneratedKeys=&amp;quot;true&amp;quot; keyProperty=&amp;quot;id&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           以上两种方法可以自动将id赋值给传入的那个实体相应的属性中去&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;selectKey keyProperty=&amp;quot;id&amp;quot; order=&amp;quot;AFTER&amp;quot; resultType=&amp;quot;java.lang.Integer&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           SELECT LAST_INSERT_ID()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;/selectKey&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       INSERT INTO user(name,password)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       VALUES (#&amp;#123;name&amp;#125;,#&amp;#123;password&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;/insert&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;!--更新用户信息，id必须存在--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;update id=&amp;quot;updateUser&amp;quot; parameterType=&amp;quot;Pojo.User&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       UPDATE user&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       SET password = #&amp;#123;password&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       WHERE id = #&amp;#123;id&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;/update&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;!--根据id删除用户--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;delete id=&amp;quot;deleteUser&amp;quot; parameterType=&amp;quot;int&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       DELETE FROM&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       user&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       WHERE id = #&amp;#123;id&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;/delete&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis入门程序</title>
    <link href="http://yoursite.com/2018/04/19/Mybatis/Mybatis%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/04/19/Mybatis/Mybatis入门程序/</id>
    <published>2018-04-19T03:15:00.000Z</published>
    <updated>2018-04-20T00:52:04.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h3><p>在IDEA中新建一个Java项目。并加入jar包，工程结构如图。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84.png" alt="">  </p><a id="more"></a><ul><li>在config文件夹中创建出所需要的配置文件</li><li>log4j.properties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Global logging configuration</div><div class="line">log4j.rootLogger=DEBUG, stdout</div><div class="line"># Console output...</div><div class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</div></pre></td></tr></table></figure><ul><li><p>SqlMapConfig.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE configuration</div><div class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</div><div class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;!-- 和spring整合后 environments配置将废除 --&gt;</div><div class="line">    &lt;environments default=&quot;development&quot;&gt;</div><div class="line">        &lt;environment id=&quot;development&quot;&gt;</div><div class="line">            &lt;!-- 使用jdbc事务管理 --&gt;</div><div class="line">            &lt;transactionManager type=&quot;JDBC&quot; /&gt;</div><div class="line">            &lt;!-- 数据库连接池 --&gt;</div><div class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</div><div class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</div><div class="line">                &lt;property name=&quot;url&quot;</div><div class="line">                          value=&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot; /&gt;</div><div class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</div><div class="line">                &lt;property name=&quot;password&quot; value=&quot;root&quot; /&gt;</div><div class="line">            &lt;/dataSource&gt;</div><div class="line">        &lt;/environment&gt;</div><div class="line">    &lt;/environments&gt;</div><div class="line">    &lt;!--加载你书写的xml文件--&gt;</div><div class="line">    &lt;mappers&gt;</div><div class="line">        &lt;mapper resource=&quot;sqlmapper/User.xml&quot;&gt;&lt;/mapper&gt;</div><div class="line">    &lt;/mappers&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></li><li><p>User.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE mapper</div><div class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</div><div class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</div><div class="line">&lt;!-- namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离</div><div class="line"> 注意：使用mapper代理方法开发，namespace有特殊重要的作用</div><div class="line"> --&gt;</div><div class="line">&lt;mapper namespace=&quot;test&quot;&gt;</div><div class="line">    &lt;!--</div><div class="line">         根据id查询单条数据</div><div class="line">         id方法名，与dao类的方法名相同</div><div class="line">         parameterType输入参数的类型</div><div class="line">         resultType指定返回类型</div><div class="line">         #&#123;&#125;接受参数占位符</div><div class="line">    --&gt;</div><div class="line">    &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;Pojo.User&quot;&gt;</div><div class="line">        SELECT *</div><div class="line">        FROM user</div><div class="line">        WHERE id = #&#123;id&#125;</div><div class="line">    &lt;/select&gt;</div><div class="line"></div><div class="line">    &lt;!--</div><div class="line">        根据用户名模糊查询多条数据</div><div class="line">        resultType返回的是单条数据的类型</div><div class="line">        $&#123;&#125;:表示拼接sql串，将接收到的参数不加任何修饰的拼接到sql中（可能会引起SQL注入）</div><div class="line">    --&gt;</div><div class="line">    &lt;select id=&quot;findUserByName&quot; parameterType=&quot;String&quot; resultType=&quot;Pojo.User&quot;&gt;</div><div class="line">        SELECT *</div><div class="line">        FROM  user</div><div class="line">        WHERE name LIKE &apos;%$&#123;value&#125;%&apos;</div><div class="line">    &lt;/select&gt;</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure></li><li><p>User实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Pojo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</div><div class="line">                <span class="string">"id="</span> + id +</div><div class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>编写测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Pojo.User;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.util.List;<span class="keyword">import</span> java.io.InputStream;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by huzhibin on 2018/4/19.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="comment">//mybatis配置文件</span></div><div class="line">        String resource = <span class="string">"sqlMapConfig.xml"</span>;</div><div class="line">        <span class="comment">//得到配置文件流</span></div><div class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</div><div class="line">        <span class="comment">//创建会话工厂</span></div><div class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUserByIdTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">//通过工厂得到Session</span></div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        <span class="comment">//操作数据库</span></div><div class="line">        User user = sqlSession.selectOne(<span class="string">"test.findUserById"</span>,<span class="number">1</span>);</div><div class="line">        System.out.println(user);</div><div class="line">        <span class="comment">//释放资源</span></div><div class="line">        sqlSession.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUserByNameTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">//通过工厂得到Session</span></div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        <span class="comment">//操作数据库</span></div><div class="line">        List&lt;User&gt; list = sqlSession.selectList(<span class="string">"test.findUserByName"</span>,<span class="string">"ho"</span>);</div><div class="line">        System.out.println(list);</div><div class="line">        <span class="comment">//释放资源</span></div><div class="line">        sqlSession.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意测试返回集合类型的时候使用的是selectList，如果使用selectOne会报错：查询有多个结果</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;工程结构&quot;&gt;&lt;a href=&quot;#工程结构&quot; class=&quot;headerlink&quot; title=&quot;工程结构&quot;&gt;&lt;/a&gt;工程结构&lt;/h3&gt;&lt;p&gt;在IDEA中新建一个Java项目。并加入jar包，工程结构如图。&lt;br&gt;&lt;img src=&quot;http://ocx5m3vc3.bkt.clouddn.com/mybatis%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis概述</title>
    <link href="http://yoursite.com/2018/04/17/Mybatis/Mybatis%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2018/04/17/Mybatis/Mybatis概述/</id>
    <published>2018-04-17T04:40:00.000Z</published>
    <updated>2018-04-17T06:50:52.813Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mybatis介绍"><a href="#Mybatis介绍" class="headerlink" title="Mybatis介绍"></a>Mybatis介绍</h3><p>mybatis是一个持久层的框架，是apache下的顶级项目。</p><p>mybatis托管到goolecode下，再后来托管到github下（<a href="https://github.com/mybatis/mybatis-3/releases" title="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="external">https://github.com/mybatis/mybatis-3/releases</a>)。</p><p>Mybatis让程序将主要精力放在sql上，通过Mybatis提供的映射方式，只有灵活生成（半自动化，大部分需要程序员编写sql）满足需要SQL语句。</p><p>Mybatis可以将向preparedStatement中的输入参数自动进行输入映射，将查询结果灵活映射成java对象。（输出映射）<br><a id="more"></a></p><h2 id="框架原理"><a href="#框架原理" class="headerlink" title="框架原理"></a>框架原理</h2><p>Mybatis框架<br><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E6%A1%86%E6%9E%B6%E5%9B%BE.png" alt=""></p><h3 id="Mybatis框架执行过程"><a href="#Mybatis框架执行过程" class="headerlink" title="Mybatis框架执行过程"></a>Mybatis框架执行过程</h3><p>1、配置Mybatis的配置文件，sqlMapConfig.xml（名称不固定）<br>2、通过配置文件，加载Mybatis运行环境，创建SQLSessionFactory会话工厂（SQLSessionFactory在实际使用时按单例方式）<br>3、通过SQLSessionFactory创建SQLSession。SqlSession是一个面向用户接口（提供操作数据库方法），实现对象是线程不安全的，建议SqlSession应用场合在方法体内。<br>4、调用SqlSession的方法去操作数据。如果需要提交事务，需要执行SqlSession的commit()方法。<br>5、释放资源，关闭SqlSession。</p><h3 id="Mybatis开发dao的方法"><a href="#Mybatis开发dao的方法" class="headerlink" title="Mybatis开发dao的方法"></a>Mybatis开发dao的方法</h3><p>1.原始dao的方法</p><ul><li>需要程序员编写dao接口和实现类</li><li>需要在dao实现类中注入一个SQLSessionFactory工厂</li></ul><p>2.mapper代理开发方法（建议使用）<br>只需要程序员编写mapper接口（就是dao接口）。<br>程序员在编写mapper.xml（映射文件）和mapper.java需要遵循一个开发规范：</p><ul><li>mapper.xml中namespace就是mapper.java的类全路径。  </li><li>mapper.xml中statement的id和mapper.java中方法名一致。  </li><li>mapper.xml中statement的parameterType指定输入参数的类型和mapper.java的方法输入参数类型一致。  </li><li>mapper.xml中statement的resultType指定输出结果的类型和mapper.java的方法返回值类型一致。</li></ul><p>SqlMapConfig.xml配置文件：可以配置properties属性、别名、mapper加载。</p><h3 id="输入映射和输出映射"><a href="#输入映射和输出映射" class="headerlink" title="输入映射和输出映射"></a>输入映射和输出映射</h3><p>输入映射：</p><ul><li>parameterType：指定输入参数类型可以简单类型、pojo、hashmap。</li><li>对于综合查询，建议parameterType使用包装的pojo，有利于系统 扩展。</li></ul><p>输出映射：  </p><ul><li>resultType：查询到的列名和resultType指定的pojo的属性名一致，才能映射成功。  </li><li>reusltMap：可以通过resultMap 完成一些高级映射。如果查询到的列名和映射的pojo的属性名不一致时，通过resultMap设置列名和属性名之间的对应关系（映射关系）。可以完成映射。   </li><li>高级映射：<br>&ensp;&ensp;&ensp;&ensp;将关联查询的列映射到一个pojo属性中。（一对一）<br>&ensp;&ensp;&ensp;&ensp;将关联查询的列映射到一个List中。（一对多）</li></ul><h3 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h3><ul><li>动态sql：（重点）<br>&ensp;&ensp;&ensp;&ensp; - if判断（掌握）<br>&ensp;&ensp;&ensp;&ensp; - where<br>&ensp;&ensp;&ensp;&ensp; - foreach<br>&ensp;&ensp;&ensp;&ensp; - sql片段（掌握）  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Mybatis介绍&quot;&gt;&lt;a href=&quot;#Mybatis介绍&quot; class=&quot;headerlink&quot; title=&quot;Mybatis介绍&quot;&gt;&lt;/a&gt;Mybatis介绍&lt;/h3&gt;&lt;p&gt;mybatis是一个持久层的框架，是apache下的顶级项目。&lt;/p&gt;
&lt;p&gt;mybatis托管到goolecode下，再后来托管到github下（&lt;a href=&quot;https://github.com/mybatis/mybatis-3/releases&quot; title=&quot;https://github.com/mybatis/mybatis-3/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mybatis/mybatis-3/releases&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;Mybatis让程序将主要精力放在sql上，通过Mybatis提供的映射方式，只有灵活生成（半自动化，大部分需要程序员编写sql）满足需要SQL语句。&lt;/p&gt;
&lt;p&gt;Mybatis可以将向preparedStatement中的输入参数自动进行输入映射，将查询结果灵活映射成java对象。（输出映射）&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>原生JDBC的问题总结</title>
    <link href="http://yoursite.com/2018/04/17/Mybatis/%E5%8E%9F%E7%94%9FJDBC%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/04/17/Mybatis/原生JDBC的问题总结/</id>
    <published>2018-04-16T16:00:00.000Z</published>
    <updated>2018-04-17T06:51:10.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JDBC编程步骤"><a href="#JDBC编程步骤" class="headerlink" title="JDBC编程步骤"></a>JDBC编程步骤</h3><p>1.加载数据库驱动<br>2.创建并获取数据库连接<br>3.创建jdbc statement对象<br>4.设置SQL语句<br>5.设置SQL语句中的参数（使用preparedStatement)<br>6.通过statement执行sql并获取结果<br>7.对sql执行结果进行解析处理<br>8.释放资源（resultSet、preparedStatement、connection)</p><h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><a id="more"></a><p>1.数据库连接，使用时就创建，不使用立即释放，对数据库进行频繁连接开启和关闭，造成数据库资源浪费，影响数据库性能。</p><p>设想：使用数据库连接池管理数据库连接。</p><p>2.将sql语句硬编码到java代码中，如果sql语句修改，需要重新编译java代码，不利于系统维护。</p><p>设想：将SQL语句配置在xml配置文件中，即时SQL变化，不需要对java代码进行重新编译。</p><p>3.向preparedStatement设置参数，对占位符位置和设置参数值，硬编码在java代码中，不利于系统维护。</p><p>设想：将sql语句及占位符号和参数全部配置在xml中。</p><p>4.从resutSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，不利于系统维护。</p><p>设想：将查询的结果集，自动映射成Java对象。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JDBC编程步骤&quot;&gt;&lt;a href=&quot;#JDBC编程步骤&quot; class=&quot;headerlink&quot; title=&quot;JDBC编程步骤&quot;&gt;&lt;/a&gt;JDBC编程步骤&lt;/h3&gt;&lt;p&gt;1.加载数据库驱动&lt;br&gt;2.创建并获取数据库连接&lt;br&gt;3.创建jdbc statement对象&lt;br&gt;4.设置SQL语句&lt;br&gt;5.设置SQL语句中的参数（使用preparedStatement)&lt;br&gt;6.通过statement执行sql并获取结果&lt;br&gt;7.对sql执行结果进行解析处理&lt;br&gt;8.释放资源（resultSet、preparedStatement、connection)&lt;/p&gt;
&lt;h3 id=&quot;问题总结&quot;&gt;&lt;a href=&quot;#问题总结&quot; class=&quot;headerlink&quot; title=&quot;问题总结&quot;&gt;&lt;/a&gt;问题总结&lt;/h3&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate关系映射</title>
    <link href="http://yoursite.com/2018/02/05/kuangjia/Hibernate/Hibernate_%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2018/02/05/kuangjia/Hibernate/Hibernate_对象的三种关系/</id>
    <published>2018-02-05T12:14:16.000Z</published>
    <updated>2018-04-26T01:40:23.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hibernate关系映射"><a href="#Hibernate关系映射" class="headerlink" title="Hibernate关系映射"></a>Hibernate关系映射</h2><h3 id="一对多关系映射"><a href="#一对多关系映射" class="headerlink" title="一对多关系映射"></a>一对多关系映射</h3><p>数据库：在多的一方添加外键来描述关联关系。<br>实体对象：在一的一方，增加一个集合用来存放多的一方。在多的一方添加一个一的一方的属性。<br>映射文件配置：<br>User.hbm.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!--</div><div class="line">           set代表用的什么集合</div><div class="line">           name代表多的一方的集合的属性名</div><div class="line">       --&gt;</div><div class="line">       &lt;set name=&quot;carSet&quot;&gt;</div><div class="line">           &lt;!--</div><div class="line">               key：多的一方的外键名称</div><div class="line">           --&gt;</div><div class="line">           &lt;key column=&quot;user_id&quot;&gt;&lt;/key&gt;</div><div class="line">           &lt;one-to-many class=&quot;pojo.Car&quot;&gt;&lt;/one-to-many&gt;</div><div class="line">       &lt;/set&gt;</div></pre></td></tr></table></figure></p><p>Car.hbm.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--</div><div class="line">            name：一的一方的属性名</div><div class="line">            class：一的一方的类全路径</div><div class="line">            colum：表中的外键外键名称</div><div class="line">        --&gt;</div><div class="line">        &lt;many-to-one name=&quot;user&quot; class=&quot;pojo.User&quot; column=&quot;user_id&quot;&gt;&lt;/many-to-one&gt;</div></pre></td></tr></table></figure></p><a id="more"></a><p>编写测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void test_HiernateYinshe()&#123;</div><div class="line">        Session session = HibernateUtils.openSession();</div><div class="line">        Transaction tx = session.beginTransaction();</div><div class="line"></div><div class="line">        User user = new User();</div><div class="line">        user.setName(&quot;cl&quot;);</div><div class="line">        user.setPassword(&quot;123456&quot;);</div><div class="line"></div><div class="line">        Car car1 = new Car();</div><div class="line">        car1.setCar_name(&quot;byd&quot;);</div><div class="line">        car1.setColor(&quot;red&quot;);</div><div class="line">        Car car2 = new Car();</div><div class="line">        car2.setCar_name(&quot;baoma&quot;);</div><div class="line">        car2.setColor(&quot;blue&quot;);</div><div class="line"></div><div class="line">        //建立关系</div><div class="line">        user.getCarSet().add(car1);</div><div class="line">        user.getCarSet().add(car2);</div><div class="line">        car1.setUser(user);</div><div class="line">        car2.setUser(user);</div><div class="line"></div><div class="line">        session.save(user);</div><div class="line">//        以下两句在测试只保存一方时注释</div><div class="line">        session.save(car1);</div><div class="line">        session.save(car2);</div><div class="line"></div><div class="line">        tx.commit();</div><div class="line">        session.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>通过观察控制台，会发现控制台输出了三条insert语句和两条update语句。<br>既然两个对象以及进行了双向关联，那我们只保存一方是否可以呢？<br>将上面的测试代码中保存Car的两条语句注释。会报一下错误：<br><img src="http://ocx5m3vc3.bkt.clouddn.com/%E7%9E%AC%E6%97%B6%E5%AF%B9%E8%B1%A1%E5%BC%82%E5%B8%B8.png" alt="http://ocx5m3vc3.bkt.clouddn.com/%E7%9E%AC%E6%97%B6%E5%AF%B9%E8%B1%A1%E5%BC%82%E5%B8%B8.png"><br>这样保存是不行的，无论是从哪一方保存都会报错：瞬时对象异常。一个持久化对象关联了一个瞬时态对象。<br>如果我们只想保存一个方向，那么我们可以使用Hibernate的级联操作。<br>首先要确定我们要保存的的主控方式哪一方，用户拥有车，所以用户是主控方。我们需要在用户的映射文件中进行以下配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;set name=&quot;carSet&quot; cascade=&quot;save-update&quot;&gt;</div><div class="line">           &lt;key column=&quot;user_id&quot; &gt;&lt;/key&gt;</div><div class="line">           &lt;one-to-many class=&quot;pojo.Car&quot;&gt;&lt;/one-to-many&gt;</div><div class="line">       &lt;/set&gt;</div></pre></td></tr></table></figure></p><p>当我们在一方配置了级联配置后，保存时会将其级联的对象也保存在数据库。此时运行测试代码，会发现还是三条insert和两条update语句。因为在Car中还会进行维护外键的操作。其实这是没必要的了。所以我们必须选择一方放弃维护关系。<br>我们选择User放弃维护，因为一个老师要记住所有学生是比较困难的，但是让学生记住老师确是很容易的。<br>我们再修改User.hbm.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!--</div><div class="line">           inverse默认值为false,代表不放弃维护。</div><div class="line">       --&gt;</div><div class="line">&lt;set name=&quot;carSet&quot; cascade=&quot;save-update&quot; inverse=&quot;true&quot;&gt;</div><div class="line">           &lt;key column=&quot;user_id&quot; &gt;&lt;/key&gt;</div><div class="line">           &lt;one-to-many class=&quot;pojo.Car&quot;&gt;&lt;/one-to-many&gt;</div><div class="line">       &lt;/set&gt;</div></pre></td></tr></table></figure></p><p>此时再执行测试代码。会发现只剩下了三条insert语句</p><ul><li>区分cascade和inverse<br>cascade强调的是操作一个对象时，是否操作其关联对象。<br>inverse强调的是外键的维护权</li></ul><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>数据库：通过一张中间表来描述其对应关系。<br>实体对象：在两个实体类中都创建一个集合来代表拥有的另一方。<br>User.hbm.xml配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;!--</div><div class="line">           name：关联的另一方的集合名称</div><div class="line">           table：中间表的名称</div><div class="line">           cascade：级联维护相关对象</div><div class="line">       --&gt;</div><div class="line">       &lt;set name=&quot;roleSet&quot; table=&quot;tb_user_role&quot; cascade=&quot;save-update&quot;&gt;</div><div class="line">           &lt;!--</div><div class="line">               colum：当前对象在中间表的外键名称</div><div class="line">           --&gt;</div><div class="line">           &lt;key column=&quot;user_id&quot;&gt;&lt;/key&gt;</div><div class="line">           &lt;!--</div><div class="line">               class：关联另一方的类的全路径。</div><div class="line">               colum：关联的另一方在中间表的外键</div><div class="line">           --&gt;</div><div class="line">           &lt;many-to-many class=&quot;pojo.Role&quot; column=&quot;role_id&quot;&gt;&lt;/many-to-many&gt;</div><div class="line">       &lt;/set&gt;</div></pre></td></tr></table></figure></p><p>Role.hbm.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!--</div><div class="line">           inverse：多对多的关系映射中必须要有一方放弃维护外键。</div><div class="line">       --&gt;</div><div class="line">       &lt;set name=&quot;userSet&quot; table=&quot;tb_user_role&quot; inverse=&quot;true&quot;&gt;</div><div class="line">           &lt;key column=&quot;role_id&quot;&gt;&lt;/key&gt;</div><div class="line">           &lt;many-to-many class=&quot;pojo.User&quot; column=&quot;user_id&quot;&gt;&lt;/many-to-many&gt;</div><div class="line">       &lt;/set&gt;</div></pre></td></tr></table></figure></p><p>我们很容易就发现多对多的两方的映射文件差不多。<br>加载映射配置后编写测试代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">   public void test_many2Many()&#123;</div><div class="line">       Session session = HibernateUtils.openSession();</div><div class="line">       Transaction tx = session.beginTransaction();</div><div class="line"></div><div class="line">       User user1 = new User(&quot;u1&quot;,&quot;u1&quot;);</div><div class="line">       User user2 = new User(&quot;u2&quot;,&quot;u2&quot;);</div><div class="line"></div><div class="line">       Role role1 = new Role(&quot;前台&quot;);</div><div class="line">       Role role2 = new Role(&quot;人事&quot;);</div><div class="line">       Role role3 = new Role(&quot;助理&quot;);</div><div class="line"></div><div class="line">       //建立关系，如果建立了双向关系，一定要有一方放弃外键维护。</div><div class="line">       user1.getRoleSet().add(role1);</div><div class="line">       user1.getRoleSet().add(role2);</div><div class="line">       user2.getRoleSet().add(role1);</div><div class="line">       user2.getRoleSet().add(role3);</div><div class="line"></div><div class="line">       role1.getUserSet().add(user1);</div><div class="line">       role1.getUserSet().add(user2);</div><div class="line">       role2.getUserSet().add(user1);</div><div class="line">       role3.getUserSet().add(user2);</div><div class="line"></div><div class="line">       session.save(user1);</div><div class="line">       session.save(user2);</div><div class="line"></div><div class="line">       tx.commit();</div><div class="line">       session.close();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><p>在多对多的关系映射中，进行了双向维护，此时必须有一方需要放弃维护。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hibernate关系映射&quot;&gt;&lt;a href=&quot;#Hibernate关系映射&quot; class=&quot;headerlink&quot; title=&quot;Hibernate关系映射&quot;&gt;&lt;/a&gt;Hibernate关系映射&lt;/h2&gt;&lt;h3 id=&quot;一对多关系映射&quot;&gt;&lt;a href=&quot;#一对多关系映射&quot; class=&quot;headerlink&quot; title=&quot;一对多关系映射&quot;&gt;&lt;/a&gt;一对多关系映射&lt;/h3&gt;&lt;p&gt;数据库：在多的一方添加外键来描述关联关系。&lt;br&gt;实体对象：在一的一方，增加一个集合用来存放多的一方。在多的一方添加一个一的一方的属性。&lt;br&gt;映射文件配置：&lt;br&gt;User.hbm.xml&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!--&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           set代表用的什么集合&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           name代表多的一方的集合的属性名&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;set name=&amp;quot;carSet&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;lt;!--&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               key：多的一方的外键名称&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;lt;key column=&amp;quot;user_id&amp;quot;&amp;gt;&amp;lt;/key&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;lt;one-to-many class=&amp;quot;pojo.Car&amp;quot;&amp;gt;&amp;lt;/one-to-many&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;/set&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Car.hbm.xml&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!--&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            name：一的一方的属性名&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            class：一的一方的类全路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            colum：表中的外键外键名称&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;many-to-one name=&amp;quot;user&amp;quot; class=&amp;quot;pojo.User&amp;quot; column=&amp;quot;user_id&amp;quot;&amp;gt;&amp;lt;/many-to-one&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate_一级缓存</title>
    <link href="http://yoursite.com/2018/02/04/kuangjia/Hibernate/Hibernate_%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    <id>http://yoursite.com/2018/02/04/kuangjia/Hibernate/Hibernate_一级缓存/</id>
    <published>2018-02-04T12:14:16.000Z</published>
    <updated>2018-04-23T14:42:03.443Z</updated>
    
    <content type="html"><![CDATA[<p>Hibernate的一级缓存就是Session缓存，Session缓存是一块内存空间，用来存放相互管理的java对象，在Hibernate查询对象的时候，首先会使用对象属性的OID值在Hibernate的一级缓存中进行查找，如果找到匹配OID值的对象，就直接将该对象从一级缓存中取出使用，不会再查询数据库；如果没有找到相同OID值对象，则会去数据库中查找相应数据。当从数据库中查询到所需数据时，该数据信息也会放置到一级缓存中。<font color="red">Hibernate的一级缓存的作用就是减少对数据库的访问次数。</font><br><a id="more"></a></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>当应用程序调用Session接口的save()、update()、savaOrUpdate()时，如果Session缓存中没有相应的对象，Hibernate就会自动的把数据库查询到的相应对象信息加入到一级缓存中去。</li><li>当调用Session接口的load()、get()方法以及Query接口的list()、iterator()方法时，会判断缓存中是否有该对象，有则返回；没有就去数据库中查询并添加到一级缓存中。</li><li>当调用Session的close()方法时。Session缓存会被清空。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void test_Cacha()&#123;</div><div class="line">        Session session = HibernateUtils.openSession();</div><div class="line">        Transaction transaction = session.beginTransaction();</div><div class="line"></div><div class="line">        User user = session.get(User.class,1);</div><div class="line">        System.out.println(user);</div><div class="line"></div><div class="line">        User user1 = session.get(User.class,1);</div><div class="line">        System.out.println(user1);</div><div class="line"></div><div class="line">        System.out.println(user == user1);</div><div class="line">        transaction.commit();</div><div class="line">        session.close();</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></li></ul><p><img src="http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E7%BC%93%E5%AD%98%E6%B5%8B%E8%AF%95.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E7%BC%93%E5%AD%98%E6%B5%8B%E8%AF%95.png"><br>测试发现，只执行一次查询操作，并且user和user1是同一个对象。这说明了第二次查询操作时直接从缓存中取的。</p><ul><li>一级缓存的内存结构（快照区）<br>Hibernate向一级缓存放入数据时，同时复制一份数据放入Hibernate快照中，当使用commit()方法提交事务时，同时会清理Session的一级缓存，<font color="red">这时会使用OID判断一级缓存中的对象和快照中的对象是否一致，如果两个对象中的数据发生变化，则执行update语句，将缓存的内容同步到数据库，并更新快照：如果一致，则不执行update语句。</font>Hibernate快照的作用就是确保一级缓存中的数据和数据库中的数据一致。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void test_Cacha_2()&#123;</div><div class="line">        Session session = HibernateUtils.openSession();</div><div class="line">        Transaction tx = session.beginTransaction();</div><div class="line"></div><div class="line">        User user = session.get(User.class,1);</div><div class="line"></div><div class="line">        //先改变姓名后改回去再提交</div><div class="line">        user.setName(&quot;haha&quot;);</div><div class="line">        //后一个测试时会将此处注释</div><div class="line">        user.setName(&quot;xixi&quot;);</div><div class="line"></div><div class="line">        tx.commit();</div><div class="line">        session.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li></ul><p>更改姓名后更改回去，Hibernate发现user对象和快照区的一样，不会执行update方法。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E5%BF%AB%E7%85%A7%E6%B5%8B%E8%AF%95.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E5%BF%AB%E7%85%A7%E6%B5%8B%E8%AF%95.png"><br>更改姓名，Hibernate发现user对象和快照区的不一样，执行update方法。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E5%BF%AB%E7%85%A7%E6%9B%B4%E6%96%B0%E6%B5%8B%E8%AF%95.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E5%BF%AB%E7%85%A7%E6%9B%B4%E6%96%B0%E6%B5%8B%E8%AF%95.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hibernate的一级缓存就是Session缓存，Session缓存是一块内存空间，用来存放相互管理的java对象，在Hibernate查询对象的时候，首先会使用对象属性的OID值在Hibernate的一级缓存中进行查找，如果找到匹配OID值的对象，就直接将该对象从一级缓存中取出使用，不会再查询数据库；如果没有找到相同OID值对象，则会去数据库中查找相应数据。当从数据库中查询到所需数据时，该数据信息也会放置到一级缓存中。&lt;font color=&quot;red&quot;&gt;Hibernate的一级缓存的作用就是减少对数据库的访问次数。&lt;/font&gt;&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate_持久化类</title>
    <link href="http://yoursite.com/2018/02/04/kuangjia/Hibernate/Hibernate_%E6%8C%81%E4%B9%85%E5%8C%96%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/02/04/kuangjia/Hibernate/Hibernate_持久化类/</id>
    <published>2018-02-04T12:14:16.000Z</published>
    <updated>2018-04-23T13:26:07.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hibernate持久化类"><a href="#Hibernate持久化类" class="headerlink" title="Hibernate持久化类"></a>Hibernate持久化类</h2><p>在Hibernate中持久化的英文名称时Persistent Object（简称PO），PO = POJO+hbm映射配置文件。  </p><h3 id="编写规则"><a href="#编写规则" class="headerlink" title="编写规则"></a>编写规则</h3><ol><li>必须提供一个无参数的public构造方法。</li><li>所有属性用private修饰，对外提供public的get/set方法。</li><li>在PO类必须提供一个标识属性，与数据库中的主键对应。我们管这属性叫OID。</li><li>PO类中的属性尽量使用基本类型的包装类。</li><li>PO类不能使用final修饰符。<a id="more"></a></li></ol><ul><li><p>为什么PO类必须提供一个标识属性OID，让它与数据库中的主键对应呢？<br>OID指的是数据库中表的主键对应的属性。Hibernate框架是通过OID来区分不同的PO对象，如果在内存中有两个相同的OID对象，那么Hibernate认为它们是一个对象。</p></li><li><p>为什么PO类中的属性要尽量使用基本类型的包装类？<br>使用基本数据类型是没有办法去描述不存在的概念的。如果使用包装类型，它就是一个对象，对于对象它的默认值是null。如果它为null就代表这不存在。</p></li><li><p>为什么PO类不能使用final修饰符？<br>因为Hibernate会使用代理模式在延迟关联的情况下提高性能。如果把实体类定义成final类之后，java不允许对final类进行扩展；所以Hibernate就无法再使用代理了。</p></li></ul><h2 id="持久化对象的三种状态"><a href="#持久化对象的三种状态" class="headerlink" title="持久化对象的三种状态"></a>持久化对象的三种状态</h2><ul><li>瞬时态：也叫做临时态或自由态，他一般指的我们new出来的对象，此时它<font color="red">不存在OID，与Hibernate Session无关联，在数据库中也无记录。</font></li><li>持久态：在Hibernate Session管理范围内，他具有持久化标识OID。它的特点是在事务未提交前一直是持久态，当它发生改变时，Hibernate会检测到。<font color="red">有OID且由Session管理，在数据库中可能有，也可能没有。</font></li><li>托管态：也叫游离态或离线态。它是指<font color="red">持久态对象失去了Session的关联。</font>对于托管态对象，发生改变时Hibernate不会检测。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class HibernateTest &#123;</div><div class="line"></div><div class="line">    // 测试持久化对象的三种状态</div><div class="line">    @Test</div><div class="line">    public void test2() &#123;</div><div class="line">        // 1.得到session</div><div class="line">        Session session = HibernateUtils.openSession();</div><div class="line">        session.beginTransaction();</div><div class="line"></div><div class="line">        Customer c = new Customer(); // 瞬时态(无OID，与session无关联)</div><div class="line">        c.setName(&quot;张三&quot;);</div><div class="line">        c.setSex(&quot;男&quot;);</div><div class="line"></div><div class="line">        session.save(c); // 建立c与session的关联关系，它就是持久态的了(有OID)</div><div class="line"></div><div class="line">        // 2.事务提交，并关闭session</div><div class="line">        session.getTransaction().commit();</div><div class="line">        session.close();</div><div class="line"></div><div class="line">        System.out.println(c.getId()); // 断开了与session的关联，它就是脱管态的了(有OID)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p><img src="http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E5%AF%B9%E8%B1%A1%E4%B8%89%E7%A7%8D%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E5%AF%B9%E8%B1%A1%E4%B8%89%E7%A7%8D%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hibernate持久化类&quot;&gt;&lt;a href=&quot;#Hibernate持久化类&quot; class=&quot;headerlink&quot; title=&quot;Hibernate持久化类&quot;&gt;&lt;/a&gt;Hibernate持久化类&lt;/h2&gt;&lt;p&gt;在Hibernate中持久化的英文名称时Persistent Object（简称PO），PO = POJO+hbm映射配置文件。  &lt;/p&gt;
&lt;h3 id=&quot;编写规则&quot;&gt;&lt;a href=&quot;#编写规则&quot; class=&quot;headerlink&quot; title=&quot;编写规则&quot;&gt;&lt;/a&gt;编写规则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;必须提供一个无参数的public构造方法。&lt;/li&gt;
&lt;li&gt;所有属性用private修饰，对外提供public的get/set方法。&lt;/li&gt;
&lt;li&gt;在PO类必须提供一个标识属性，与数据库中的主键对应。我们管这属性叫OID。&lt;/li&gt;
&lt;li&gt;PO类中的属性尽量使用基本类型的包装类。&lt;/li&gt;
&lt;li&gt;PO类不能使用final修饰符。
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate主键生成策略</title>
    <link href="http://yoursite.com/2018/02/04/kuangjia/Hibernate/Hibernate%E4%B8%BB%E9%94%AE%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2018/02/04/kuangjia/Hibernate/Hibernate主键生成策略/</id>
    <published>2018-02-04T02:20:07.000Z</published>
    <updated>2018-02-04T02:44:54.443Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>increment<br>用于long、short、int类型，由Hibernate自动以递增的方式生成唯一标识符，每次增量为1。只有当没有其他进程向同一张表中插入数据时才可以使用，不能在集群环境下使用。适用于代理主键。</p></li><li><p>identity<br>采用底层数据库本身提供的主键生成标识符，条件是数据库支持自动增长数据类型。在DB2、MySQL、MS SQL Server、Sybase和HypersonicSQL数据库中可以使用该生成器，该生成器要求在数据库中把主键定义成为自增长类型。适用于代理主键。</p></li><li><p>sequence<br>Hibernate根据底层数据库序列生成标识符。条件是数据库支持序列。适用于代理主键。</p></li><li><p>native<br>根据底层数据库对自动生成表示符的能力来选择identity、sequence、hilo三种生成器中的一种，适合跨数据库平台开发。适用于代理主键。</p></li><li><p>uuid<br>Hibernate采用128位的UUID算法来生成标识符。该算法能够在网络环境中生成唯一的字符串标识符，其UUID被编码为一个长度为32位的十六进制字符串。这种策略并不流行，因为字符串类型的主键比整数类型的主键占用更多的数据库空间。适用于代理主键。</p></li><li><p>assigned<br>由Java程序负责生成标识符，如果不指定ID元素的generator属性，则默认使用该主键生成策略。适用于自然主键。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;increment&lt;br&gt;用于long、short、int类型，由Hibernate自动以递增的方式生成唯一标识符，每次增量为1。只有当没有其他进程向同一张表中插入数据时才可以使用，不能在集群环境下使用。适用于代理主键。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate框架搭建</title>
    <link href="http://yoursite.com/2018/02/03/kuangjia/Hibernate/Hibernate_01/"/>
    <id>http://yoursite.com/2018/02/03/kuangjia/Hibernate/Hibernate_01/</id>
    <published>2018-02-03T12:14:16.000Z</published>
    <updated>2018-04-22T15:03:40.967Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Hibernate框架关键词：dao层框架、以面向对象的方式操作数据库、orm思想（对象关系映射，通过映射文件配置对象和数据库中表的关系）</li></ul><h2 id="Hibernate框架搭建步骤"><a href="#Hibernate框架搭建步骤" class="headerlink" title="Hibernate框架搭建步骤"></a>Hibernate框架搭建步骤</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p>required+驱动包<br><img src="http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E9%A9%B1%E5%8A%A8%E5%8C%85.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E9%A9%B1%E5%8A%A8%E5%8C%85.png"><br><a id="more"></a></p><h3 id="准备实体类和orm元数据"><a href="#准备实体类和orm元数据" class="headerlink" title="准备实体类和orm元数据"></a>准备实体类和orm元数据</h3><ul><li><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pojo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</div><div class="line">                <span class="string">"id="</span> + id +</div><div class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>User.hbm.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></div><div class="line"><span class="meta">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></div><div class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"pojo"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">        name：即实体类的全名</span></div><div class="line"><span class="comment">        table：映射到数据库里面的那个表的名称</span></div><div class="line"><span class="comment">     --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"User"</span> <span class="attr">table</span>=<span class="string">"tb_user"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- class下必须要有一个id的子元素 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- id是用于描述主键的 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- type是规定类型 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 主键生成策略 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">            使用property来描述属性与字段的对应关系</span></div><div class="line"><span class="comment">            如果length忽略不写，且你的表是自动创建这种方案，那么length的默认长度是255</span></div><div class="line"><span class="comment">        --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">length</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">length</span>=<span class="string">"50"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p>下表是Hibernate的类型对应表<br><img src="http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E7%B1%BB%E5%9E%8B%E6%98%A0%E5%B0%84.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E7%B1%BB%E5%9E%8B%E6%98%A0%E5%B0%84.png"></p><h3 id="创建主配置文件"><a href="#创建主配置文件" class="headerlink" title="创建主配置文件"></a>创建主配置文件</h3><ul><li>hibernate.cfg.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line"><span class="meta">        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></div><div class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 配置关于数据库连接的四个项：driverClass  url username password --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///hibernate<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 可以将向数据库发送的SQL语句显示出来 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 格式化SQL语句 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- hibernate的方言 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">               create:每次加载hibernate时都自动创建表</span></div><div class="line"><span class="comment">               create-drop:每次加载hibernate时自动创建表，结束时删除表。适合用于开发环境。</span></div><div class="line"><span class="comment">               update：最常用的属性。第一次加载hibernate时创建表结构；</span></div><div class="line"><span class="comment">                        以后每次加载都会更新表结构，但是不会删除以前的记录。。适用于运行环境。</span></div><div class="line"><span class="comment">               validate：每次加载都验证数据库表结构，并不会创建表</span></div><div class="line"><span class="comment">        --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>create<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置hibernate的映射文件所在的位置 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"pojo/User.hbm.xml"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h3 id="书写测试代码"><a href="#书写测试代码" class="headerlink" title="书写测试代码"></a>书写测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savaUserTest</span><span class="params">()</span></span>&#123;</div><div class="line">        User u = <span class="keyword">new</span> User();</div><div class="line">        u.setName(<span class="string">"xixi"</span>);</div><div class="line">        u.setPassword(<span class="string">"xixi"</span>);</div><div class="line"></div><div class="line">        Configuration config = <span class="keyword">new</span> Configuration().configure(); <span class="comment">// Hibernate框架加载hibernate.cfg.xml文件</span></div><div class="line">        SessionFactory sessionFactory = config.buildSessionFactory();</div><div class="line">        Session session = sessionFactory.openSession(); <span class="comment">// 相当于得到一个Connection</span></div><div class="line">        <span class="comment">// 开启事务</span></div><div class="line">        session.beginTransaction();</div><div class="line"></div><div class="line">        session.save(u);</div><div class="line"></div><div class="line">        <span class="comment">// 事务提交</span></div><div class="line">        session.getTransaction().commit();</div><div class="line">        session.close();</div><div class="line">        sessionFactory.close();</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>查看控制台会发现创表语句和插入语句。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E5%88%9B%E8%A1%A8debug.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E5%88%9B%E8%A1%A8debug.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Hibernate框架关键词：dao层框架、以面向对象的方式操作数据库、orm思想（对象关系映射，通过映射文件配置对象和数据库中表的关系）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Hibernate框架搭建步骤&quot;&gt;&lt;a href=&quot;#Hibernate框架搭建步骤&quot; class=&quot;headerlink&quot; title=&quot;Hibernate框架搭建步骤&quot;&gt;&lt;/a&gt;Hibernate框架搭建步骤&lt;/h2&gt;&lt;h3 id=&quot;导包&quot;&gt;&lt;a href=&quot;#导包&quot; class=&quot;headerlink&quot; title=&quot;导包&quot;&gt;&lt;/a&gt;导包&lt;/h3&gt;&lt;p&gt;required+驱动包&lt;br&gt;&lt;img src=&quot;http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E9%A9%B1%E5%8A%A8%E5%8C%85.png&quot; alt=&quot;http://ocx5m3vc3.bkt.clouddn.com/Hibernate%E9%A9%B1%E5%8A%A8%E5%8C%85.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
  </entry>
  
</feed>
