<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OMG_By</title>
  
  <subtitle>你走与不走，路就在那里</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-11T08:58:37.373Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>OMG_By</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL之备份</title>
    <link href="http://yoursite.com/2018/08/11/mysql/MySQL%E4%B9%8B%E5%A4%87%E4%BB%BD/"/>
    <id>http://yoursite.com/2018/08/11/mysql/MySQL之备份/</id>
    <published>2018-08-11T08:11:15.000Z</published>
    <updated>2018-08-11T08:58:37.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备份的类型"><a href="#备份的类型" class="headerlink" title="备份的类型"></a>备份的类型</h2><h3 id="根据是否需要数据库离线"><a href="#根据是否需要数据库离线" class="headerlink" title="根据是否需要数据库离线"></a>根据是否需要数据库离线</h3><p>1、取决于业务的需求，而不是备份工具。<br>2、MyISAM不支持热备，INNODB支持热备，但是需要专门的工具。  </p><ul><li>冷备：需要关闭mysql服务，读写请求均不支持    状态下进行。</li><li>温备：服务在线，但仅支持读请求，不允许写请求。</li><li>热备：备份的同时，业务不受影响。</li></ul><h3 id="根据备份的数据集合的范围"><a href="#根据备份的数据集合的范围" class="headerlink" title="根据备份的数据集合的范围"></a>根据备份的数据集合的范围</h3><ul><li>完全备份：备份全部字符集。</li><li>增量备份：上一次完全备份或增量备份以来改变的数据。</li><li>差异备份：上一次完全备份以来改变的数。</li></ul><h3 id="根据备份数据或文件"><a href="#根据备份数据或文件" class="headerlink" title="根据备份数据或文件"></a>根据备份数据或文件</h3><ul><li>物理备份：直接备份数据文件。</li><li>逻辑备份：备份表中的数据和代码。<a id="more"></a><h2 id="备份和恢复的实现"><a href="#备份和恢复的实现" class="headerlink" title="备份和恢复的实现"></a>备份和恢复的实现</h2></li></ul><ol><li>使用select into outfile实现数据的备份和还原。<br>1.1 把需要备份的数据备份出来<br>select * from test into outfile ‘/tmp/out.txt’;<br>1.2 导入<br>load data infile ‘/tmp/out.txt’ into table XXX;</li><li>利用mysqldump工具对数据进行备份和还原<br>mysqldump常用来做温备，所以需要对想备份的数据施加读锁。<br>2.1 施加读锁的方式：<br>2.1.1 直接在备份时添加选项<br>–lock-all-tables：对要备份的数据库的所有表施加读锁。<br>–lock-table：对单表施加读锁。<br>2.1.2 在服务端书写命令<br>mysql&gt;flush tables with read lock;施加锁，表示把内存上的表统统同步到磁盘上去后施加读锁。<br>mysql&gt;flush tables with read unlock;释放锁。<br>2.2 备份策略：完全备份+增量备份+二进制文件。</li></ol><ul><li>先给数据库做全量备份</li><li>回到mysql服务器更新数据</li><li>做增量备份</li><li>到处二进制文件</li><li>让mysql离线</li></ul><ol><li>利用lvm快照实现几乎热备的数据备份和恢复</li><li>基于Xtrabackup做备份恢复<br>优势：</li></ol><ul><li>快速可靠的进行完全备份</li><li>在备份过程中会影响事务</li><li>支持数据流、网络传输、压缩，所以它可以有效的节约磁盘资源和网络带宽。</li><li>可以自动备份校验数据的可用性。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;备份的类型&quot;&gt;&lt;a href=&quot;#备份的类型&quot; class=&quot;headerlink&quot; title=&quot;备份的类型&quot;&gt;&lt;/a&gt;备份的类型&lt;/h2&gt;&lt;h3 id=&quot;根据是否需要数据库离线&quot;&gt;&lt;a href=&quot;#根据是否需要数据库离线&quot; class=&quot;headerlink&quot; title=&quot;根据是否需要数据库离线&quot;&gt;&lt;/a&gt;根据是否需要数据库离线&lt;/h3&gt;&lt;p&gt;1、取决于业务的需求，而不是备份工具。&lt;br&gt;2、MyISAM不支持热备，INNODB支持热备，但是需要专门的工具。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冷备：需要关闭mysql服务，读写请求均不支持    状态下进行。&lt;/li&gt;
&lt;li&gt;温备：服务在线，但仅支持读请求，不允许写请求。&lt;/li&gt;
&lt;li&gt;热备：备份的同时，业务不受影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;根据备份的数据集合的范围&quot;&gt;&lt;a href=&quot;#根据备份的数据集合的范围&quot; class=&quot;headerlink&quot; title=&quot;根据备份的数据集合的范围&quot;&gt;&lt;/a&gt;根据备份的数据集合的范围&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;完全备份：备份全部字符集。&lt;/li&gt;
&lt;li&gt;增量备份：上一次完全备份或增量备份以来改变的数据。&lt;/li&gt;
&lt;li&gt;差异备份：上一次完全备份以来改变的数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;根据备份数据或文件&quot;&gt;&lt;a href=&quot;#根据备份数据或文件&quot; class=&quot;headerlink&quot; title=&quot;根据备份数据或文件&quot;&gt;&lt;/a&gt;根据备份数据或文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;物理备份：直接备份数据文件。&lt;/li&gt;
&lt;li&gt;逻辑备份：备份表中的数据和代码。
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之权限管理</title>
    <link href="http://yoursite.com/2018/08/11/mysql/Mysql%E4%B9%8B%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/08/11/mysql/Mysql之权限管理/</id>
    <published>2018-08-11T07:11:15.000Z</published>
    <updated>2018-08-11T08:00:30.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、MySQL权限简介"><a href="#一、MySQL权限简介" class="headerlink" title="一、MySQL权限简介"></a>一、MySQL权限简介</h2><p>关于mysql的权限简单的理解就是mysql允许你做你权利以内的事情，不可以越界。</p><h3 id="mysql权限控制的实现"><a href="#mysql权限控制的实现" class="headerlink" title="mysql权限控制的实现"></a>mysql权限控制的实现</h3><p>第一阶段：服务器首先会检查你是否允许连接。因为创建用户的时候会加上主机限制，可以限制成本地、IP、网段、任何地方等。只允许你从配置的指定地方登陆。<br>第二阶段：Mysql会检查你发出的每个请求，看你是否有足够的权限实施它。</p><table><thead><tr><th style="text-align:center">权限</th><th style="text-align:center">权限级别</th><th style="text-align:center">权限说明</th></tr></thead><tbody><tr><td style="text-align:center">CREATE</td><td style="text-align:center">数据库、表或索引</td><td style="text-align:center">创建</td></tr><tr><td style="text-align:center">DROP</td><td style="text-align:center">数据库或表</td><td style="text-align:center">删除</td></tr><tr><td style="text-align:center">GRANT OPTION</td><td style="text-align:center">数据库、表或保存的程序</td><td style="text-align:center">赋予权限</td></tr><tr><td style="text-align:center">REFERENCES</td><td style="text-align:center">数据库或表</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">ALTER</td><td style="text-align:center">表</td><td style="text-align:center">修改表</td></tr><tr><td style="text-align:center">DELETE</td><td style="text-align:center">表</td><td style="text-align:center">删除数据</td></tr><tr><td style="text-align:center">INDEX</td><td style="text-align:center">表</td><td style="text-align:center">索引权限</td></tr></tbody></table><a id="more"></a><h2 id="二、MySQL权限实战"><a href="#二、MySQL权限实战" class="headerlink" title="二、MySQL权限实战"></a>二、MySQL权限实战</h2><ol><li><p>GRANT命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; grant all privileges on *.* to jack@&apos;localhost&apos; identified by &quot;jack&quot; with grant option;</div><div class="line">Query OK, 0 rows affected (0.01 sec)</div></pre></td></tr></table></figure></li><li><p>刷新权限：flush privileges;</p></li><li><p>查看权限：show grants;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">查看当前用户的权限：</div><div class="line">mysql&gt; show grants;</div><div class="line">+---------------------------------------------------------------------+</div><div class="line">| Grants for root@localhost                                           |</div><div class="line">+---------------------------------------------------------------------+</div><div class="line">| GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;localhost&apos; WITH GRANT OPTION |</div><div class="line">| GRANT PROXY ON &apos;&apos;@&apos;&apos; TO &apos;root&apos;@&apos;localhost&apos; WITH GRANT OPTION        |</div><div class="line">+---------------------------------------------------------------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line">查看某个用户的权限：</div><div class="line">mysql&gt; show grants for &apos;jack&apos;@&apos;%&apos;;</div><div class="line">+-----------------------------------------------------------------------------------------------------+</div><div class="line">| Grants for jack@%                                                                                   |</div><div class="line">+-----------------------------------------------------------------------------------------------------+</div><div class="line">| GRANT USAGE ON *.* TO &apos;jack&apos;@&apos;%&apos; IDENTIFIED BY PASSWORD &apos;*9BCDC990E611B8D852EFAF1E3919AB6AC8C8A9F0&apos; |</div><div class="line">+-----------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></li><li><p>回收权限：revoke</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; revoke delete on *.* from &apos;jack&apos;@&apos;localhost&apos;;</div><div class="line">Query OK, 0 rows affected (0.01 sec)</div></pre></td></tr></table></figure></li><li><p>删除用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; drop user &apos;jack&apos;@&apos;localhost&apos;;</div><div class="line">Query OK, 0 rows affected (0.01 sec)</div></pre></td></tr></table></figure></li><li><p>对用户重命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; rename user &apos;jack&apos;@&apos;%&apos; to &apos;jim&apos;@&apos;%&apos;;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure></li><li><p>修改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">1、用set password命令</div><div class="line">mysql&gt; SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;123456&apos;);</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">  2、用mysqladmin</div><div class="line">  [root@rhel5 ~]# mysqladmin -uroot -p123456 password 1234abcd</div><div class="line">  备注：</div><div class="line">  格式：mysqladmin -u用户名 -p旧密码 password 新密码</div><div class="line">  3、用update直接编辑user表</div><div class="line">  mysql&gt; use mysql</div><div class="line">Reading table information for completion of table and column names</div><div class="line">You can turn off this feature to get a quicker startup with -A</div><div class="line"></div><div class="line">Database changed</div><div class="line">mysql&gt; update user set PASSWORD = PASSWORD(&apos;1234abcd&apos;) where user = &apos;root&apos;;</div><div class="line">Query OK, 1 row affected (0.01 sec)</div><div class="line">Rows matched: 1  Changed: 1  Warnings: 0</div><div class="line"></div><div class="line">mysql&gt; flush privileges;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">  4、在丢失root密码的时候：</div><div class="line">  [root@rhel5 ~]# mysqld_safe --skip-grant-tables &amp;</div><div class="line">[1] 15953</div><div class="line">[root@rhel5 ~]# 130911 09:35:33 mysqld_safe Logging to &apos;/mysql/mysql5.5/data/rhel5.4.err&apos;.</div><div class="line">130911 09:35:33 mysqld_safe Starting mysqld daemon with databases from /mysql/mysql5.5/data</div></pre></td></tr></table></figure></li></ol><h2 id="三、MySQL权限经验原则"><a href="#三、MySQL权限经验原则" class="headerlink" title="三、MySQL权限经验原则"></a>三、MySQL权限经验原则</h2><ul><li>只授予能满足需要的最小权限。</li><li>创建用户时限制用户的登录主机，一般是限制成指定IP或内网IP段。</li><li>初始化数据库时删除没有密码的用户。</li><li>为每个用户设置满足密码复杂度的密码。</li><li>定期清理不需要的用户，回收权限或者删除用户。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、MySQL权限简介&quot;&gt;&lt;a href=&quot;#一、MySQL权限简介&quot; class=&quot;headerlink&quot; title=&quot;一、MySQL权限简介&quot;&gt;&lt;/a&gt;一、MySQL权限简介&lt;/h2&gt;&lt;p&gt;关于mysql的权限简单的理解就是mysql允许你做你权利以内的事情，不可以越界。&lt;/p&gt;
&lt;h3 id=&quot;mysql权限控制的实现&quot;&gt;&lt;a href=&quot;#mysql权限控制的实现&quot; class=&quot;headerlink&quot; title=&quot;mysql权限控制的实现&quot;&gt;&lt;/a&gt;mysql权限控制的实现&lt;/h3&gt;&lt;p&gt;第一阶段：服务器首先会检查你是否允许连接。因为创建用户的时候会加上主机限制，可以限制成本地、IP、网段、任何地方等。只允许你从配置的指定地方登陆。&lt;br&gt;第二阶段：Mysql会检查你发出的每个请求，看你是否有足够的权限实施它。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;权限&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;权限级别&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;权限说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CREATE&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;数据库、表或索引&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;创建&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DROP&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;数据库或表&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;GRANT OPTION&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;数据库、表或保存的程序&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;赋予权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;REFERENCES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;数据库或表&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ALTER&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;表&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;修改表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DELETE&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;表&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;删除数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;INDEX&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;表&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;索引权限&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>information_schema</title>
    <link href="http://yoursite.com/2018/08/11/mysql/information_schema/"/>
    <id>http://yoursite.com/2018/08/11/mysql/information_schema/</id>
    <published>2018-08-11T04:11:15.000Z</published>
    <updated>2018-08-11T07:30:59.064Z</updated>
    
    <content type="html"><![CDATA[<p>information_schema数据库是mysql系统自带的数据库，它提供了数据库元数据的访问方式。可以说information_schema就是MySQL实例的一个百科全书，记录了数据库当中大部分我们需要了解的信息，比如字符集、权限相关、数据库实体对象信息、外键等。<br><a id="more"></a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span> show tables;</div><div class="line">+---------------------------------------+</div><div class="line">| Tables_in_information_schema          |</div><div class="line">+---------------------------------------+</div><div class="line">| CHARACTER_SETS                        |</div><div class="line">| COLLATIONS                            |</div><div class="line">| COLLATION_CHARACTER_SET_APPLICABILITY |</div><div class="line">| COLUMNS                               |</div><div class="line">| COLUMN_PRIVILEGES                     |</div><div class="line">| ENGINES                               |</div><div class="line">| EVENTS                                |</div><div class="line">| FILES                                 |</div><div class="line">| GLOBAL_STATUS                         |</div><div class="line">| GLOBAL_VARIABLES                      |</div><div class="line">| KEY_COLUMN_USAGE                      |</div><div class="line">| OPTIMIZER_TRACE                       |</div><div class="line">| PARAMETERS                            |</div><div class="line">| PARTITIONS                            |</div><div class="line">| PLUGINS                               |</div><div class="line">| PROCESSLIST                           |</div><div class="line">| PROFILING                             |</div><div class="line">| REFERENTIAL_CONSTRAINTS               |</div><div class="line">| ROUTINES                              |</div><div class="line">| SCHEMATA                              |</div><div class="line">| SCHEMA_PRIVILEGES                     |</div><div class="line">| SESSION_STATUS                        |</div><div class="line">| SESSION_VARIABLES                     |</div><div class="line">| STATISTICS                            |</div><div class="line">| TABLES                                |</div><div class="line">| TABLESPACES                           |</div><div class="line">| TABLE_CONSTRAINTS                     |</div><div class="line">| TABLE_PRIVILEGES                      |</div><div class="line">| TRIGGERS                              |</div><div class="line">| USER_PRIVILEGES                       |</div><div class="line">| VIEWS                                 |</div><div class="line">| INNODB_LOCKS                          |</div><div class="line">| INNODB_TRX                            |</div><div class="line">| INNODB_SYS_DATAFILES                  |</div><div class="line">| INNODB_LOCK_WAITS                     |</div><div class="line">| INNODB_SYS_TABLESTATS                 |</div><div class="line">| INNODB_CMP                            |</div><div class="line">| INNODB_METRICS                        |</div><div class="line">| INNODB_CMP_RESET                      |</div><div class="line">| INNODB_CMP_PER_INDEX                  |</div><div class="line">| INNODB_CMPMEM_RESET                   |</div><div class="line">| INNODB_FT_DELETED                     |</div><div class="line">| INNODB_BUFFER_PAGE_LRU                |</div><div class="line">| INNODB_SYS_FOREIGN                    |</div><div class="line">| INNODB_SYS_COLUMNS                    |</div><div class="line">| INNODB_SYS_INDEXES                    |</div><div class="line">| INNODB_FT_DEFAULT_STOPWORD            |</div><div class="line">| INNODB_SYS_FIELDS                     |</div><div class="line">| INNODB_CMP_PER_INDEX_RESET            |</div><div class="line">| INNODB_BUFFER_PAGE                    |</div><div class="line">| INNODB_CMPMEM                         |</div><div class="line">| INNODB_FT_INDEX_TABLE                 |</div><div class="line">| INNODB_FT_BEING_DELETED               |</div><div class="line">| INNODB_SYS_TABLESPACES                |</div><div class="line">| INNODB_FT_INDEX_CACHE                 |</div><div class="line">| INNODB_SYS_FOREIGN_COLS               |</div><div class="line">| INNODB_SYS_TABLES                     |</div><div class="line">| INNODB_BUFFER_POOL_STATS              |</div><div class="line">| INNODB_FT_CONFIG                      |</div><div class="line">+---------------------------------------+</div><div class="line">59 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p><p>使用desc information_schema.XX查看具体表中的表字段等信息。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span> desc information_schema.tables;</div><div class="line">+-----------------+---------------------+------+-----+---------+-------+</div><div class="line">| Field           | Type                | Null | Key | Default | Extra |</div><div class="line">+-----------------+---------------------+------+-----+---------+-------+</div><div class="line">| TABLE_CATALOG   | varchar(512)        | NO   |     |         |       |</div><div class="line">| TABLE_SCHEMA    | varchar(64)         | NO   |     |         |       |</div><div class="line">| TABLE_NAME      | varchar(64)         | NO   |     |         |       |</div><div class="line">| TABLE_TYPE      | varchar(64)         | NO   |     |         |       |</div><div class="line">| ENGINE          | varchar(64)         | YES  |     | NULL    |       |</div><div class="line">| VERSION         | bigint(21) unsigned | YES  |     | NULL    |       |</div><div class="line">| ROW_FORMAT      | varchar(10)         | YES  |     | NULL    |       |</div><div class="line">| TABLE_ROWS      | bigint(21) unsigned | YES  |     | NULL    |       |</div><div class="line">| AVG_ROW_LENGTH  | bigint(21) unsigned | YES  |     | NULL    |       |</div><div class="line">| DATA_LENGTH     | bigint(21) unsigned | YES  |     | NULL    |       |</div><div class="line">| MAX_DATA_LENGTH | bigint(21) unsigned | YES  |     | NULL    |       |</div><div class="line">| INDEX_LENGTH    | bigint(21) unsigned | YES  |     | NULL    |       |</div><div class="line">| DATA_FREE       | bigint(21) unsigned | YES  |     | NULL    |       |</div><div class="line">| AUTO_INCREMENT  | bigint(21) unsigned | YES  |     | NULL    |       |</div><div class="line">| CREATE_TIME     | datetime            | YES  |     | NULL    |       |</div><div class="line">| UPDATE_TIME     | datetime            | YES  |     | NULL    |       |</div><div class="line">| CHECK_TIME      | datetime            | YES  |     | NULL    |       |</div><div class="line">| TABLE_COLLATION | varchar(32)         | YES  |     | NULL    |       |</div><div class="line">| CHECKSUM        | bigint(21) unsigned | YES  |     | NULL    |       |</div><div class="line">| CREATE_OPTIONS  | varchar(255)        | YES  |     | NULL    |       |</div><div class="line">| TABLE_COMMENT   | varchar(2048)       | NO   |     |         |       |</div><div class="line">+-----------------+---------------------+------+-----+---------+-------+</div><div class="line">21 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p><p>操作跟一般的数据库操作差不多，只要知道表是干什么的，其中的列名是什么，就可以用SQL语句进行查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from information_schema.SCHEMATA;</div><div class="line">+--------------+--------------------+----------------------------+------------------------+----------+</div><div class="line">| CATALOG_NAME | SCHEMA_NAME        | DEFAULT_CHARACTER_SET_NAME | DEFAULT_COLLATION_NAME | SQL_PATH |</div><div class="line">+--------------+--------------------+----------------------------+------------------------+----------+</div><div class="line">| def          | information_schema | utf8                       | utf8_general_ci        | NULL     |</div><div class="line">| def          | mysql              | utf8                       | utf8_general_ci        | NULL     |</div><div class="line">| def          | mytest             | utf8                       | utf8_general_ci        | NULL     |</div><div class="line">| def          | performance_schema | utf8                       | utf8_general_ci        | NULL     |</div><div class="line">| def          | test               | latin1                     | latin1_swedish_ci      | NULL     |</div><div class="line">+--------------+--------------------+----------------------------+------------------------+----------+</div><div class="line">5 rows in set (0.00 sec)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;information_schema数据库是mysql系统自带的数据库，它提供了数据库元数据的访问方式。可以说information_schema就是MySQL实例的一个百科全书，记录了数据库当中大部分我们需要了解的信息，比如字符集、权限相关、数据库实体对象信息、外键等。&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql事务</title>
    <link href="http://yoursite.com/2018/08/11/mysql/mysql%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/08/11/mysql/mysql事务/</id>
    <published>2018-08-10T16:11:15.000Z</published>
    <updated>2018-08-11T07:10:49.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、事务的基本要素（ACID）"><a href="#一、事务的基本要素（ACID）" class="headerlink" title="一、事务的基本要素（ACID）"></a>一、事务的基本要素（ACID）</h2><ul><li>原子性（Atomicity):事务开始后所有的操作，要么全部做完，要么全部不做，不可能在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。</li><li>一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏。</li><li>隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同事务之间彼此没有任何干扰。</li><li>持久性（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。<a id="more"></a><h2 id="二、事务的并发问题"><a href="#二、事务的并发问题" class="headerlink" title="二、事务的并发问题"></a>二、事务的并发问题</h2></li><li>脏读：事务A读取了事务B未提交的数据。</li><li>不可重复读：事务A多次读取同一数据，事务B在事务A多次读取过程中，对数据进行了更新，导致事务A读取同一事务时结果不一致。</li><li>幻读：事务A在更新过程中，事务B对同数据库进行了操作并提交，事务A提交不成功。</li></ul><h2 id="三、Mysql事务隔离级别"><a href="#三、Mysql事务隔离级别" class="headerlink" title="三、Mysql事务隔离级别"></a>三、Mysql事务隔离级别</h2><h3 id="读未提交"><a href="#读未提交" class="headerlink" title="读未提交"></a>读未提交</h3><center>事务1对A进行操作还没提交，事务2就对A进行了读取，之后事务1对A进行再次操作或回滚，导致事务A读取的数据不对。（脏读）</center><br><img src="http://ocx5m3vc3.bkt.clouddn.com/%E8%AF%BB%E6%9C%AA%E6%8F%90%E4%BA%A4.png" alt=""><br><br>### 读已提交 ###<br><center>事务2多次读取同一数据，事务1在事务2读取过程中对数据进行了修改，导致事务1读取的数据不一致。（解决了脏读，不可重复读）</center><br><img src="http://ocx5m3vc3.bkt.clouddn.com/%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A42.png" alt=""><br>读已提交是大多数数据库的默认隔离级别。<br><br>### 可重复读 ###<br><center>事务与事务之间相互隔离，数据之间不相互影响。事务2对数据A进行修改，在提交之前，事务1对数据A进行了修改并提交，导致数据的改变，所以事务2提交事务失败。（解决了不可重复读，导致了幻读）</center><br><img src="http://ocx5m3vc3.bkt.clouddn.com/%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB.png" alt=""><br>可重复读是mysql的默认隔离级别。<br><br>### 串行化 ###<br><center>在事务进行操作时对表进行加锁操作，拒绝其他事务进行操作。保证了数据的安全性，但是效率大大降低。</center>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、事务的基本要素（ACID）&quot;&gt;&lt;a href=&quot;#一、事务的基本要素（ACID）&quot; class=&quot;headerlink&quot; title=&quot;一、事务的基本要素（ACID）&quot;&gt;&lt;/a&gt;一、事务的基本要素（ACID）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原子性（Atomicity):事务开始后所有的操作，要么全部做完，要么全部不做，不可能在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。&lt;/li&gt;
&lt;li&gt;一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏。&lt;/li&gt;
&lt;li&gt;隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同事务之间彼此没有任何干扰。&lt;/li&gt;
&lt;li&gt;持久性（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python获取本机IP</title>
    <link href="http://yoursite.com/2018/07/21/python/%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAIP/"/>
    <id>http://yoursite.com/2018/07/21/python/获取本机IP/</id>
    <published>2018-07-21T08:28:05.000Z</published>
    <updated>2018-07-21T15:27:47.365Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_host_ip</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">try</span>:</div><div class="line">      s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</div><div class="line">      s.connect((<span class="string">'8.8.8.8'</span>, <span class="number">80</span>))</div><div class="line">      ip = s.getsockname()[<span class="number">0</span>]</div><div class="line">  <span class="keyword">finally</span>:</div><div class="line">      s.close()</div><div class="line">  <span class="keyword">return</span> ip</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现-数据结构篇（5）-整数集合</title>
    <link href="http://yoursite.com/2018/06/11/Redis/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%EF%BC%885%EF%BC%89-%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2018/06/11/Redis/Redis设计与实现-数据结构篇（5）-整数集合/</id>
    <published>2018-06-11T11:41:38.000Z</published>
    <updated>2018-08-10T17:27:19.167Z</updated>
    
    <content type="html"><![CDATA[<p>整数集合是集合键的底层实现之一，当一个集合只傲寒整数值元素，并且这个集合的元素不多时，Redis就会使用整数集合作为集合键的底层实现。</p><h3 id="整数集合的实现"><a href="#整数集合的实现" class="headerlink" title="整数集合的实现"></a>整数集合的实现</h3><p>整数集合是Redis用于保存整数值的集合抽象数据结构，它可以保存类型为int16_t、int32_t或者int64_t的整数值，并且保证集合中不会出现重复元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">typedef stuct intset&#123;</div><div class="line">//编码方式</div><div class="line">uint32_t encodingl</div><div class="line">//集合包含的元素数量</div><div class="line">uint32_t length;</div><div class="line">//保存元素的数组</div><div class="line">int8_t contents[];</div><div class="line">&#125;intset;</div></pre></td></tr></table></figure></p><p>contents数组是整数集合的底层实现：整数集合的每个元素都是contents数据的一个数组项，每个项在数组中按值的大小从小到大有序的排列，并且数组中不包含重复项。</p><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>每当我们要将一个新元素添加到整数集合里面，并且新元素的类型比整数集合现有所有元素的类型都要长时，整数集合需要先进行升级，然后才能将新元素添加到整数集合里面去。</p><h4 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h4><ul><li>根据新元素类型，扩展整数集合底层数组的空间大小，并为新元素分配空间。</li><li>将底层数组中的元素都转换成与新元素相同的类型，并将元素放在对应的位置上，在放置过程中需要维持底层数组的有序性质不变。</li><li>将新元素加到底层数组中。<h4 id="升级的好处"><a href="#升级的好处" class="headerlink" title="升级的好处"></a>升级的好处</h4></li><li>提高灵活性</li><li>节约内存</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整数集合是集合键的底层实现之一，当一个集合只傲寒整数值元素，并且这个集合的元素不多时，Redis就会使用整数集合作为集合键的底层实现。&lt;/p&gt;
&lt;h3 id=&quot;整数集合的实现&quot;&gt;&lt;a href=&quot;#整数集合的实现&quot; class=&quot;headerlink&quot; title=&quot;整数集
      
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现-数据结构篇（4）--跳跃表</title>
    <link href="http://yoursite.com/2018/06/10/Redis/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%EF%BC%884%EF%BC%89-%E8%B7%B3%E8%B7%83%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/06/10/Redis/Redis设计与实现-数据结构篇（4）-跳跃链表/</id>
    <published>2018-06-10T11:41:38.000Z</published>
    <updated>2018-08-10T17:13:04.108Z</updated>
    
    <content type="html"><![CDATA[<p>跳跃表（skiplist）是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。</p><h2 id="跳跃表的实现"><a href="#跳跃表的实现" class="headerlink" title="跳跃表的实现"></a>跳跃表的实现</h2><p>Redis跳跃表由zskiplistNode和zskiplist两个结构定义。其中zskiplistNode结构用于表示跳跃表节点，而zskiplist结构则用于保存跳跃表节点的相关信息，比如节点的数量，以及指向表头节点和表尾节点的指针等等。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/skiplist.png" alt=""><br><a id="more"></a><br>位于图片最左边的是zskiplist结构，该结构包含以下属性：</p><ul><li>header：指向跳跃表的表头节点。</li><li>tail：指向跳跃表的表尾节点。</li><li>level：记录目前跳跃表内，层数最大的那个节点的层数（表头节点的层数不计算在内）。</li><li>length：记录跳跃表的长度，即是跳跃表目前包含节点的数量（表头节点不计算在内）。<br>位于图片右侧的是zskiplistNode结构，该结构包含以下属性：</li><li>层（level）：每次创建一个新的跳跃表节点的时候，程序都根据幂次定律随机生成一个介于1~32之间的值作为level数组的大小，这就是层的高度。</li><li>前进指针（forward):每层都有一个指向表尾方向的前进指针。</li><li>后退指针（backward）：用于从表尾向表头方向访问节点。</li><li>跨度（span）：用于记录两个节点之间的距离。</li><li>分值（score）</li><li>成员对象（obj）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">typedef struct zskiplistNode&#123;</div><div class="line">//后退指针</div><div class="line">struct zskiplistNode *backward;</div><div class="line">//分值</div><div class="line">double score;</div><div class="line">//成员对象</div><div class="line">robj *obj;</div><div class="line">//层</div><div class="line">struct zskiplistLevel&#123;</div><div class="line">//前进指针</div><div class="line">struct zskiplistNode *forward;</div><div class="line">//跨度</div><div class="line">unsigned int span;</div><div class="line">&#125;level[];</div><div class="line">&#125;zskiplistNode；</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跳跃表（skiplist）是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。&lt;/p&gt;
&lt;h2 id=&quot;跳跃表的实现&quot;&gt;&lt;a href=&quot;#跳跃表的实现&quot; class=&quot;headerlink&quot; title=&quot;跳跃表的实现&quot;&gt;&lt;/a&gt;跳跃表的实现&lt;/h2&gt;&lt;p&gt;Redis跳跃表由zskiplistNode和zskiplist两个结构定义。其中zskiplistNode结构用于表示跳跃表节点，而zskiplist结构则用于保存跳跃表节点的相关信息，比如节点的数量，以及指向表头节点和表尾节点的指针等等。&lt;br&gt;&lt;img src=&quot;http://ocx5m3vc3.bkt.clouddn.com/skiplist.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现-数据结构篇（3）--字典</title>
    <link href="http://yoursite.com/2018/06/10/Redis/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%EF%BC%883%EF%BC%89-%E5%AD%97%E5%85%B8/"/>
    <id>http://yoursite.com/2018/06/10/Redis/Redis设计与实现-数据结构篇（3）-字典/</id>
    <published>2018-06-10T10:58:15.000Z</published>
    <updated>2018-06-10T12:35:47.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典的实现"><a href="#字典的实现" class="headerlink" title="字典的实现"></a>字典的实现</h2><p>Redis的字典使用哈希表作为底层实现，一个哈希表里面可以有多个哈希表节点，而每个哈希表节点就保存了字典中的一个键值对。</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">typedef struct dictht&#123;</div><div class="line">//哈希表数组</div><div class="line">dictEntry **table;</div><div class="line">//哈希表大小</div><div class="line">unsigned long size;</div><div class="line">//哈希表大小掩码，用于计算索引值</div><div class="line">//总是等size-1</div><div class="line">unsigned long sizemask;</div><div class="line">//该哈希表已有节点的数量</div><div class="line">unsigned long used;</div><div class="line">&#125;dictht;</div></pre></td></tr></table></figure><p><img src="http://ocx5m3vc3.bkt.clouddn.com/dictht.png" alt=""><br><a id="more"></a><br>table是一个数组，数组中的每个元素都是一个指向dictEntry结构的指针，每个dictEntry结构保存这一个键值对。</p><h3 id="哈希表节点"><a href="#哈希表节点" class="headerlink" title="哈希表节点"></a>哈希表节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">typedef struct dictEntry&#123;</div><div class="line">//键</div><div class="line">void *key;</div><div class="line">//值</div><div class="line">union&#123;</div><div class="line">void *val;</div><div class="line">uint64_t u64;</div><div class="line">int64_ts64;</div><div class="line">&#125;v;</div><div class="line">//指向下个哈希表节点，形成链表</div><div class="line">struct dictEntry *next;</div><div class="line">&#125;dictEntry;</div></pre></td></tr></table></figure><p><img src="http://ocx5m3vc3.bkt.clouddn.com/dictEntry.png" alt=""></p><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">typedef struct dict&#123;</div><div class="line">//类型特定函数</div><div class="line">dictType *type;</div><div class="line">//私有数据</div><div class="line">void *privdata;</div><div class="line">//哈希表</div><div class="line">dictht ht[2];</div><div class="line">//rehash索引</div><div class="line">//当rehash不在进行时，值为-1</div><div class="line">int trehashidx;</div><div class="line">&#125;dict;</div></pre></td></tr></table></figure><p>ht是一个包含两个项的数组，数组中的每个项都是一个dictht哈希表，一般情况下，字典只使用ht[0]哈希表，ht[1]哈希表只会在ht[0]哈希表进行rehash时使用。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/dict.png" alt=""></p><h2 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h2><p>当要将一个新的键值对添加到字典里面时，程序需要先根据键值对的键计算出哈希值和索引值，然后根据索引值，将包含新键值对的哈希表节点放到哈希表数组的指定索引上面。</p><h2 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h2><p>随着操作的不断执行，哈希表保存的键值对会逐渐增多或者减少，为了让哈希表的负债因子维持在一个合理的范围内，程序需要对哈希表大小进行相应的扩展或者收缩。<br>步骤：<br>1）为字典的ht[1]哈希表分配空间，这个哈希表的空间大小取决于要执行的操作，以及ht[0]当前包含的键值对数量（也即是ht[0].used属性的值）：<br>2）将保存在ht[0]中的所有键值对rehash到ht[1]上面，rehash值的是重新计算键的哈希值和索引值，然后将键值对放置到ht[1]哈希表的指定位置上。<br>3）当ht[0]包含的所有键值对都迁移到了ht[1]之后（ht[0]变为空表），释放ht[0],将ht[1]设置为ht[0],并在ht[1]新创建一个空白哈希表，为下一次rehash做准备。  </p><h3 id="渐进式rehash"><a href="#渐进式rehash" class="headerlink" title="渐进式rehash"></a>渐进式rehash</h3><p>1）为ht[1]分配空间，让字典同时持有ht[0]和ht[1]两个哈希表。<br>2）在字典中维持一个索引计数器变量rehashidx，并将它的值设置为0，表示rehash工作正式开始。<br>3）在rehash期间，每次对字典执行添加、删除、查找或者更新操作时，程序除了执行指定操作外，还会顺带将ht[0]哈希表再rehashidx索引上的所有键值对rehash到ht[1]，将rehashidx值增加1。<br>4）随着字典操作的不断执行，最终在某个时间点上，ht[0]的所有键值对都会被rehash到ht[1]，这时将rehashidx设置为-1，表示rehash操作完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字典的实现&quot;&gt;&lt;a href=&quot;#字典的实现&quot; class=&quot;headerlink&quot; title=&quot;字典的实现&quot;&gt;&lt;/a&gt;字典的实现&lt;/h2&gt;&lt;p&gt;Redis的字典使用哈希表作为底层实现，一个哈希表里面可以有多个哈希表节点，而每个哈希表节点就保存了字典中的一个键值对。&lt;/p&gt;
&lt;h3 id=&quot;哈希表&quot;&gt;&lt;a href=&quot;#哈希表&quot; class=&quot;headerlink&quot; title=&quot;哈希表&quot;&gt;&lt;/a&gt;哈希表&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;typedef struct dictht&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//哈希表数组&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	dictEntry **table;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//哈希表大小&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	unsigned long size;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//哈希表大小掩码，用于计算索引值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//总是等size-1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	unsigned long sizemask;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//该哈希表已有节点的数量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	unsigned long used;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;dictht;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://ocx5m3vc3.bkt.clouddn.com/dictht.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现-数据结构篇（2）--链表</title>
    <link href="http://yoursite.com/2018/06/09/Redis/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%EF%BC%882%EF%BC%89-%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/06/09/Redis/Redis设计与实现-数据结构篇（2）-链表/</id>
    <published>2018-06-09T13:09:46.000Z</published>
    <updated>2018-06-10T12:35:44.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表和链表节点的实现"><a href="#链表和链表节点的实现" class="headerlink" title="链表和链表节点的实现"></a>链表和链表节点的实现</h2><p>每个链表节点都使用一个listNode结构来表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">typedef struct listNode&#123;</div><div class="line">//前置节点</div><div class="line">struct listNode *prev;</div><div class="line">//后置节点</div><div class="line">struct listNode *next;</div><div class="line">//节点的值</div><div class="line">void *value;</div><div class="line">&#125;listNode;</div></pre></td></tr></table></figure></p><p>虽然使用多个listNode结构就可以组成链表，但是使用list来持有链表的话，操作起来会更方便。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">typedef struct list&#123;</div><div class="line">//表头节点</div><div class="line">listNode *head;</div><div class="line">//表尾节点</div><div class="line">listNode *tail;</div><div class="line">//链表所包含的节点数量</div><div class="line">unsigned long len;</div><div class="line">//节点值复制函数</div><div class="line">void *(*dup)(void *ptr);</div><div class="line">//节点值释放函数</div><div class="line">void *(*free)(void *ptr);</div><div class="line">//节点值对比函数</div><div class="line">void *(match)(void *ptr,void *key);</div><div class="line">&#125;list;</div></pre></td></tr></table></figure></p><p><img src="http://ocx5m3vc3.bkt.clouddn.com/list.png" alt=""></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>双端：获取某个节点的前置和后置节点的复杂度都是O(1)</li><li>无环：两端都指向NULL</li><li>获取表头节点和表尾节点的复杂度为O(1)</li><li>O(1)获取链表长度</li><li>链表可以用来保存各种不同类型的值。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;链表和链表节点的实现&quot;&gt;&lt;a href=&quot;#链表和链表节点的实现&quot; class=&quot;headerlink&quot; title=&quot;链表和链表节点的实现&quot;&gt;&lt;/a&gt;链表和链表节点的实现&lt;/h2&gt;&lt;p&gt;每个链表节点都使用一个listNode结构来表示&lt;br&gt;&lt;figure cl
      
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>杂记</title>
    <link href="http://yoursite.com/2018/06/09/%E5%90%8D%E8%A8%80/"/>
    <id>http://yoursite.com/2018/06/09/名言/</id>
    <published>2018-06-09T12:07:29.000Z</published>
    <updated>2018-06-09T13:58:51.353Z</updated>
    
    <content type="html"><![CDATA[<ul><li>乌云遮蔽了整个天空，闪电便已在其中酝酿。</li><li>世界上只有两种秘密，骗自己的和以为能骗住别人的。</li><li>身不由己的抉择是痛苦的，你看似自己做了决定，但做决定的始终是命运</li><li>越是充满诱惑的东西，往往会越致命。你是否还会选择？</li><li>天空没有痕迹，风雨已在心中。</li><li>天地之间的无形之力，也在无形之中改变着天地。</li><li>在最深沉的夜里，连自己的影子都会离你而去。</li><li>向黑暗走去的人，或许会被黑暗吞噬，或许会化作明灯。</li><li>死亡能带走生命，却带不走生命的痕迹。</li><li>空谷足音，听到的却是自己的心。</li><li>行走在两个世界的边缘，得到更多。</li><li>不要随意翻动回忆，因为它是不可测的深渊。</li><li>花开在天边，而我需要走过一路的荆棘。</li><li>想要看清雾中的景物，不能仅仅相信自己的眼睛。    </li><li>若是献出生命就能赢得正义，我下一刻已身在炽热的烈焰中。</li><li>恶魔的爪牙伸向每个人的心，你是否还依然纯真？</li><li>经历过真正绝望的人，生已是一种施舍，死令他无所畏惧。</li><li>炽热火焰焚尽了执念，灰烬里只留下黑色的心。</li><li>被岁月冰封的一簇火苗，等待理想把它融化、燃烧。</li><li>若承受不了十指连心的痛楚，就别轻易去拼凑记忆的碎片。</li><li>锋芒毕露并不一定耀眼，忍辱负重才是求生之道。</li><li>世间本没有相思，奈何离分人世，将痴心种出了果实。</li><li>蝎子和人的最大区别在于，蝎子往往亮出自己的狠毒，而人则会将之隐藏。</li><li>蒙上双眼，看尽黑暗中的风景，心便不再惧怕。</li><li>枯井中的人仰观宇宙大千，坐拥天下者四顾高墙如井。</li><li>天空其实是无色的，但眼睛欺骗了你；灵魂其实是无欲的，但感情欺骗了你。</li><li>利益这杯美酒让人陶醉，但也同样剧毒无比。</li><li>时间沉淀为回忆，过去沉淀为传奇，你沉淀为我！</li><li>敢于弯腰的树枝，便不会被冰雪压折。</li><li>在落子的瞬间，棋手也是心魔控制的棋子。</li><li>执着与执念的区别，前者是为了守护珍视的人，后者则是逃避内心的怯懦。</li><li>灰烬并不是失败的代表，而是燃烧的证明。</li><li>世上最精致的面具，就是我们自己的脸皮。</li><li>沾过鲜血的剑可以回鞘，但手执利刃的心却无法轻易收回。</li><li>常在夜路独行的人，目光总能捕捉到不易察觉的危险。</li><li>许多东西本该腐朽，那就任它悲戚；许多事情本该舍弃，那就别怪它肆虐。</li><li>不要以世俗得眼光看低我的梦想，现实与虚幻终究是要斗一场。</li><li>在你需要做出选择的时候，你的内心就会经历一场战争。</li><li>即使是无尽的黑暗，舍弃一切踏入的价值，是探索无尽的重点。</li><li>这世上没有能真正忘记的事，只有你愿不愿意想起，和敢不敢想起。</li><li>机会不过是一场稍纵即逝的梦，犹豫只能令你错失改变。</li><li>生之路的尽头，好似铺满了荆棘和玫瑰，每一步都是苦海。</li><li>我们无法避免失败，只能避免因为失败而选择沉沦。</li><li>重点不在他怎么离开，而在其他人看着他背影的目光。</li><li>山高一寸，风景独好一寸，然危机也伏多一寸。</li><li>摘下面具的一场对话，比穿上铠甲奔赴战场更需要勇气。</li><li>规则的制定往往是用来掩盖游戏的本质，用来迷惑那些执着于胜负的人。</li><li>对手和敌人是不同的，敌人希望你更弱，对手希望你更强。</li><li>没有什么能够禁锢你的强大，除了你的内心。</li><li>云淡风轻，满月低垂，脚下万丈悬崖，天空触手可及。</li><li>真相虽隐藏在假象之后，但它总有一天会降临。</li><li>能者逞霸道之势，强者隐百转之谋。</li><li>如果你感到寸步难行，也许是耀眼的光明蒙蔽了你的眼睛。</li><li>直到曲终人散，才知晓真相已暗藏于每个符音间。</li><li>真正的危机，总在不经意时降临。</li><li>隐藏在假象后面的未必是真理，也许是另一个骗局。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;乌云遮蔽了整个天空，闪电便已在其中酝酿。&lt;/li&gt;
&lt;li&gt;世界上只有两种秘密，骗自己的和以为能骗住别人的。&lt;/li&gt;
&lt;li&gt;身不由己的抉择是痛苦的，你看似自己做了决定，但做决定的始终是命运&lt;/li&gt;
&lt;li&gt;越是充满诱惑的东西，往往会越致命。你是否还会选择？
      
    
    </summary>
    
    
      <category term="杂记" scheme="http://yoursite.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现-数据结构篇（1）--简单动态字符串SDS</title>
    <link href="http://yoursite.com/2018/06/09/Redis/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%EF%BC%881%EF%BC%89--%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2SDS/"/>
    <id>http://yoursite.com/2018/06/09/Redis/Redis设计与实现-数据结构篇（1）--简单动态字符串SDS/</id>
    <published>2018-06-09T11:34:13.000Z</published>
    <updated>2018-06-09T13:08:27.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis中的SDS结构"><a href="#Redis中的SDS结构" class="headerlink" title="Redis中的SDS结构"></a>Redis中的SDS结构</h2><p>Redis并没有直接使用C语言中的字符串，而是自己构建了SDS这样的一种简单动态字符串，并且将它作为Redis中字符串的默认表示。<br>在早期的版本中记录了其长度、剩余空间、以及字符数组；<br>最新版本3.2.4中，已经对SDS做了一定的改动：长度、分配内存大小（除去’\0’）、标志位（低三位表示类型，其余五位未使用）、以及字符数组。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/SDS.png" alt=""><br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">struct sdshdr&#123;</div><div class="line">//buf中已用空间长度</div><div class="line">int len;</div><div class="line">//buf中剩余可用空间长度</div><div class="line">int free;</div><div class="line">//数据空间</div><div class="line">char buf[];</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h2 id="SDS与C字符串区别"><a href="#SDS与C字符串区别" class="headerlink" title="SDS与C字符串区别"></a>SDS与C字符串区别</h2><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><p>&ensp;&ensp;SDS字符串保存了自身的长度，当需要获取长度的时候可以O(1)获得。（3.2中的剩余空间需要用alloc-len算出）</p><h3 id="杜绝缓存区溢出"><a href="#杜绝缓存区溢出" class="headerlink" title="杜绝缓存区溢出"></a>杜绝缓存区溢出</h3><p>&ensp;&ensp;SDS在进行字符串拼接的时候，会自行检查内存空间是否满足要求，如果不满足，将自动进行分配；而且在进行分配空间的时候，会实行预先分配的策略。</p><h3 id="减少修改字符串时带来的内存重分配次数"><a href="#减少修改字符串时带来的内存重分配次数" class="headerlink" title="减少修改字符串时带来的内存重分配次数"></a>减少修改字符串时带来的内存重分配次数</h3><p>&ensp;&ensp;C语言字符串在进行字符串的扩充和收缩的时候，都会面临着内存空间的重新分配问题。<br>&ensp;&ensp;Redis在内存空间分配的问题上进行了优化，只要分为两个过程。  </p><ol><li>内存预分配<br>如果修改之后SDS的长度小于1MB，那么程序将会分配和当前字符串len相同的空间给该字符串对象。<br>如果修改之后的SDS的长度大于等于1MB的话，程序将分配1MB剩余空间给该字符串对象。</li><li>惰性释放<br>当字符串进行缩短操作的时候，并不立即将空间释放出来，而是将这部分空间通过free进行标识。<br>当然，Redis中提供了专门的API，需要的时候，会真正的释放这部分空闲内存。</li></ol><h3 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h3><p>&ensp;&ensp;由于在Redis中，不是根据空字符而是通过len来判断字符串结束的。所以，即便是中间出现了空字符，对于SDS来说，读取该字符串还是可以的。</p><h3 id="兼容部分C语言函数"><a href="#兼容部分C语言函数" class="headerlink" title="兼容部分C语言函数"></a>兼容部分C语言函数</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Redis中的SDS结构&quot;&gt;&lt;a href=&quot;#Redis中的SDS结构&quot; class=&quot;headerlink&quot; title=&quot;Redis中的SDS结构&quot;&gt;&lt;/a&gt;Redis中的SDS结构&lt;/h2&gt;&lt;p&gt;Redis并没有直接使用C语言中的字符串，而是自己构建了SDS这样的一种简单动态字符串，并且将它作为Redis中字符串的默认表示。&lt;br&gt;在早期的版本中记录了其长度、剩余空间、以及字符数组；&lt;br&gt;最新版本3.2.4中，已经对SDS做了一定的改动：长度、分配内存大小（除去’\0’）、标志位（低三位表示类型，其余五位未使用）、以及字符数组。&lt;br&gt;&lt;img src=&quot;http://ocx5m3vc3.bkt.clouddn.com/SDS.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis逆向工程</title>
    <link href="http://yoursite.com/2018/04/23/Mybatis/Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/23/Mybatis/Mybatis逆向工程/</id>
    <published>2018-04-23T12:39:06.000Z</published>
    <updated>2018-04-22T09:37:22.571Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;逆向工程的字面意思就是反向生成工程。<br>使用逆向工程时，需要注意的是表之间的关系无法映射出来！也就是说Mybatis的逆向工程生成的都是单表操作。</p><ol><li><p>Mybatis逆向工程开发文档<br><a href="http://www.mybatis.org/generator/configreference/xmlconfig.html" target="_blank" rel="external">http://www.mybatis.org/generator/configreference/xmlconfig.html</a></p></li><li><p>使用逆向工程生成代码有好几种方式，这里就介绍一种最简单的，Java程序生成（解释在配置中)<br>&ensp;&ensp;2.1 准备逆向工程配置文件genreatorConfig.xml,名字无所谓,只要在java程序中作为file传入就好:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE generatorConfiguration</div><div class="line">  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</div><div class="line">  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</div><div class="line">&lt;generatorConfiguration&gt;</div><div class="line">    &lt;!--数据库驱动,最好不要有中文字符,不然会找不到--&gt;</div><div class="line">    &lt;classPathEntry location=&quot;F:/cache/mysql-connector-java-5.1.28-bin.jar&quot; /&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;context id=&quot;DB2Tables&quot;    targetRuntime=&quot;MyBatis3&quot;&gt;</div><div class="line"></div><div class="line">        &lt;commentGenerator&gt;</div><div class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;</div><div class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</div><div class="line">        &lt;/commentGenerator&gt;</div><div class="line">        &lt;!--数据库链接地址账号密码--&gt;</div><div class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost/test&quot; userId=&quot;root&quot; password=&quot;&quot;&gt;</div><div class="line">        &lt;/jdbcConnection&gt;</div><div class="line">        &lt;javaTypeResolver&gt;</div><div class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</div><div class="line">        &lt;/javaTypeResolver&gt;</div><div class="line">        &lt;!--生成Model类存放位置--&gt;</div><div class="line">        &lt;javaModelGenerator targetPackage=&quot;com.leige.domain&quot; targetProject=&quot;src&quot;&gt;</div><div class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</div><div class="line">        &lt;/javaModelGenerator&gt;</div><div class="line">        &lt;!--生成映射文件存放位置--&gt;</div><div class="line">        &lt;sqlMapGenerator targetPackage=&quot;com.leige.domain&quot; targetProject=&quot;src&quot;&gt;</div><div class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class="line">        &lt;/sqlMapGenerator&gt;</div><div class="line">        &lt;!--生成DaoMapper类存放位置--&gt;</div><div class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.leige.dao&quot; targetProject=&quot;src&quot;&gt;</div><div class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class="line">        &lt;/javaClientGenerator&gt;</div><div class="line">        &lt;!--生成对应表及类名,需要记住的一点是逆向工程无法生成关联关系,只能生成单表操作--&gt;</div><div class="line">        &lt;table tableName=&quot;student&quot; </div><div class="line">            domainObjectName=&quot;Student&quot; </div><div class="line">          &gt;&lt;/table&gt;</div><div class="line">           &lt;table tableName=&quot;teacher&quot; </div><div class="line">            domainObjectName=&quot;Teacher&quot; </div><div class="line">          &gt;&lt;/table&gt;</div><div class="line">    &lt;/context&gt;</div><div class="line">&lt;/generatorConfiguration&gt;</div></pre></td></tr></table></figure></li></ol><a id="more"></a><p>&ensp;&ensp;2.2<a href="http://pan.baidu.com/s/1jIvLufG" target="_blank" rel="external">下载jar包</a><br>&ensp;&ensp;2.3准备java程序,在开发文档首页,粘贴一下就好了,没必要记住:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.leige.test;</div><div class="line"></div><div class="line">import java.awt.geom.GeneralPath;</div><div class="line">import java.awt.im.InputContext;</div><div class="line">import java.io.File;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.apache.ibatis.io.Resources;</div><div class="line">import org.apache.log4j.chainsaw.Main;</div><div class="line">import org.apache.log4j.lf5.util.Resource;</div><div class="line">import org.mybatis.generator.api.MyBatisGenerator;</div><div class="line">import org.mybatis.generator.config.Configuration;</div><div class="line">import org.mybatis.generator.config.xml.ConfigurationParser;</div><div class="line">import org.mybatis.generator.internal.DefaultShellCallback;</div><div class="line"></div><div class="line">public class MybatisGen &#123;</div><div class="line">    public static void generator() throws Exception&#123;</div><div class="line">           List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();</div><div class="line">           boolean overwrite = true;</div><div class="line">           //项目根路径不要有中文,我的有中文,所以使用绝对路径</div><div class="line">           File configFile = new File(&quot;F:/cache/generatorConfig.xml&quot;);</div><div class="line">           ConfigurationParser cp = new ConfigurationParser(warnings);</div><div class="line">           Configuration config = cp.parseConfiguration(configFile);</div><div class="line">           DefaultShellCallback callback = new DefaultShellCallback(overwrite);</div><div class="line">           MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);</div><div class="line">           myBatisGenerator.generate(null);</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try &#123;</div><div class="line">            generator();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            // TODO Auto-generated catch block</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&ensp;&ensp;2.4运行java程序,就会发现生成的代码: </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;逆向工程的字面意思就是反向生成工程。&lt;br&gt;使用逆向工程时，需要注意的是表之间的关系无法映射出来！也就是说Mybatis的逆向工程生成的都是单表操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Mybatis逆向工程开发文档&lt;br&gt;&lt;a href=&quot;http://www.mybatis.org/generator/configreference/xmlconfig.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.mybatis.org/generator/configreference/xmlconfig.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用逆向工程生成代码有好几种方式，这里就介绍一种最简单的，Java程序生成（解释在配置中)&lt;br&gt;&amp;ensp;&amp;ensp;2.1 准备逆向工程配置文件genreatorConfig.xml,名字无所谓,只要在java程序中作为file传入就好:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE generatorConfiguration&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  PUBLIC &amp;quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;generatorConfiguration&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;!--数据库驱动,最好不要有中文字符,不然会找不到--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;classPathEntry location=&amp;quot;F:/cache/mysql-connector-java-5.1.28-bin.jar&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;context id=&amp;quot;DB2Tables&amp;quot;    targetRuntime=&amp;quot;MyBatis3&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;commentGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;suppressDate&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;suppressAllComments&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/commentGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--数据库链接地址账号密码--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;jdbcConnection driverClass=&amp;quot;com.mysql.jdbc.Driver&amp;quot; connectionURL=&amp;quot;jdbc:mysql://localhost/test&amp;quot; userId=&amp;quot;root&amp;quot; password=&amp;quot;&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/jdbcConnection&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;javaTypeResolver&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;forceBigDecimals&amp;quot; value=&amp;quot;false&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/javaTypeResolver&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--生成Model类存放位置--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;javaModelGenerator targetPackage=&amp;quot;com.leige.domain&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;trimStrings&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/javaModelGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--生成映射文件存放位置--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;sqlMapGenerator targetPackage=&amp;quot;com.leige.domain&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/sqlMapGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--生成DaoMapper类存放位置--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;javaClientGenerator type=&amp;quot;XMLMAPPER&amp;quot; targetPackage=&amp;quot;com.leige.dao&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/javaClientGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--生成对应表及类名,需要记住的一点是逆向工程无法生成关联关系,只能生成单表操作--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;table tableName=&amp;quot;student&amp;quot; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            domainObjectName=&amp;quot;Student&amp;quot; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;gt;&amp;lt;/table&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;lt;table tableName=&amp;quot;teacher&amp;quot; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            domainObjectName=&amp;quot;Teacher&amp;quot; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;gt;&amp;lt;/table&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/context&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/generatorConfiguration&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>缓存机制</title>
    <link href="http://yoursite.com/2018/04/21/Mybatis/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/04/21/Mybatis/缓存机制/</id>
    <published>2018-04-21T12:57:22.000Z</published>
    <updated>2018-04-22T09:29:11.536Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis提供查询缓存，用于减轻数据压力，提高数据库性能。<br>Mybatis提供一级缓存和二级缓存。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.png"><br><a id="more"></a><br>一级缓存是SqlSession级别的缓存。在操作数据库时需要构造SqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的SqlSession之间的缓存数据区域是互相不影响的。</p><p>二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"><br>第一次发起查询的时候，先在缓存中查询是否有相应数据，有就直接返回；如果没有则从数据库获取信息并存储在一级缓存中。  </p><p>如果SqlSession执行commit操作（执行插入、更新、删除）时，清空SqlSession中的一级缓存。这是为了让缓存中存储的是最新的信息，避免脏读。  </p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>Mybatis默认支持一级缓存。不需要配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  @Test</div><div class="line">    public void testCacha_1()&#123;</div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user = userMapper.findUserById(1);</div><div class="line">        System.out.println(user);</div><div class="line">//        user.setName(&quot;heh&quot;);</div><div class="line">//        userMapper.updateUserName(user);</div><div class="line">        User user1 = userMapper.findUserById(1);</div><div class="line">        System.out.println(user1);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p><img src="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98debug.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98debug.png"><br>去掉代码中的注释后，输出：<br><img src="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0debug.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0debug.png"></p><p>只用一级缓存时读取出来的值可能不是最新的。<br>例如：SqlSession1查询，SqlSession2修改，SqlSession1再查询，此时会导致SqlSession1第一次查找的结果不是最新的。此时就需要二级缓存了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacha_1_more</span><span class="params">()</span></span>&#123;</div><div class="line">        SqlSession sqlSession1 = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper1 = sqlSession1.getMapper(UserMapper.class);</div><div class="line">        SqlSession sqlSession2 = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper2 = sqlSession2.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user = userMapper1.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user);</div><div class="line"></div><div class="line">        User user1 = <span class="keyword">new</span> User();</div><div class="line">        user1.setName(<span class="string">"zan"</span>);</div><div class="line">        user1.setId(<span class="number">1</span>);</div><div class="line">        userMapper2.updateUserName(user1);</div><div class="line"></div><div class="line">        User user2 = userMapper1.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user2);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p><img src="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E4%B8%8D%E5%8F%8A%E6%97%B6.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E4%B8%8D%E5%8F%8A%E6%97%B6.png"></p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><h3 id="二级缓存原理"><a href="#二级缓存原理" class="headerlink" title="二级缓存原理"></a>二级缓存原理</h3><p><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86%E5%9B%BE.png"></p><p>开启Mybatis的二级缓存后。</p><p>SqlSession1去查询信息，查询到的信息将会存储到二级缓存中。<br>如果SqlSession3去执行相同mapper下SQL，执行commit提交；将会清空二级缓存。<br>SqlSession去查询信息，现在二级缓存中查找数据。如果存在就直接取出。</p><font color="red">二级缓存的范围更大，多个SqlSession可以共享Mapper的二级缓存区域。</font><h3 id="开启二级缓存"><a href="#开启二级缓存" class="headerlink" title="开启二级缓存"></a>开启二级缓存</h3><ul><li><p>在SqlMapConfig.xml中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure></li><li><p>在UserMapper.xml中开启二级缓存。UserMapper.xml下的sql磁性完成会存储到它的缓存区域。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;mapper namespace=&quot;dao.UserMapper&quot;&gt;</div><div class="line">    &lt;cache /&gt;</div><div class="line">   ...</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure></li><li><p>因为二级缓存存储介质多种多样，不一定在内存。对应的实体需要实现序列化接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public class User implements Serializable&#123;</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacha_2</span><span class="params">()</span></span>&#123;</div><div class="line">        SqlSession sqlSession1 = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper1 = sqlSession1.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user1 = userMapper1.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user1);</div><div class="line"></div><div class="line"><span class="comment">//        User user = new User();</span></div><div class="line"><span class="comment">//        user.setId(2);</span></div><div class="line"><span class="comment">//        user.setName("GG");</span></div><div class="line"><span class="comment">//        userMapper1.updateUserName(user);</span></div><div class="line"></div><div class="line">        sqlSession1.close();</div><div class="line"></div><div class="line"></div><div class="line">        SqlSession sqlSession2 = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper2 = sqlSession2.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user2 = userMapper2.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user2);</div><div class="line"></div><div class="line">        sqlSession2.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="useCache配置"><a href="#useCache配置" class="headerlink" title="useCache配置"></a>useCache配置</h3><p>在statement中设置&lt;font color = ‘red”&gt;useCache=”false”可以禁用当前select的二级缓存，即每次查询都会发出SQL去查询。默认情况是true。<br>如果每次查询都需要最新的数据sql时要禁用二级缓存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findOrderListResultMap&quot; resultMap=&quot;ordersUserMap&quot; useCache=&quot;false&quot;&gt;</div></pre></td></tr></table></figure></p><h3 id="刷新缓存"><a href="#刷新缓存" class="headerlink" title="刷新缓存"></a>刷新缓存</h3><p>刷新缓存就是清空缓存。在mapper的同一个namespace中，如果有其他insert、update、delete操作数据后需要刷新缓存，否则会出现脏读现象。</p><p>设置statement配置中的&lt;font color = ‘red”&gt;flushCache=”true”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;insert id=&quot;insertUser&quot; parameterType=&quot;pojo.User&quot; flushCache=&quot;true&quot;&gt;</div></pre></td></tr></table></figure></p><h3 id="应用场景和局限性"><a href="#应用场景和局限性" class="headerlink" title="应用场景和局限性"></a>应用场景和局限性</h3><ul><li><p>应用场景<br>对于访问多的查询请求且用户对查询结果实时性要求不高，此时可采用mybatis二级缓存技术降低数据库访问量，提高访问速度，业务场景比如：耗时较高的统计分析sql、电话账单查询sql等。<br>实现方法如下：通过设置刷新间隔时间，由mybatis每隔一段时间自动清空缓存，根据数据变化频率设置缓存刷新间隔flushInterval，比如设置为30分钟、60分钟、24小时等，根据需求而定。</p></li><li><p>局限性<br>mybatis二级缓存对细粒度的数据级别的缓存实现不好，比如如下需求：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次都能查询最新的商品信息，此时如果使用mybatis的二级缓存就无法实现当一个商品变化时只刷新该商品的缓存信息而不刷新其它商品的信息，因为mybaits的二级缓存区域以mapper为单位划分，当一个商品信息变化会将所有商品信息的缓存数据全部清空。解决此类问题需要在业务层根据需求对数据有针对性缓存。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mybatis提供查询缓存，用于减轻数据压力，提高数据库性能。&lt;br&gt;Mybatis提供一级缓存和二级缓存。&lt;br&gt;&lt;img src=&quot;http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.png&quot; alt=&quot;http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>延迟加载</title>
    <link href="http://yoursite.com/2018/04/21/Mybatis/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2018/04/21/Mybatis/延迟加载/</id>
    <published>2018-04-21T11:00:48.000Z</published>
    <updated>2018-04-21T13:36:00.622Z</updated>
    
    <content type="html"><![CDATA[<p>resultMap可以实现高级映射（使用association、collection实现一对一以及一对多映射），association、collection具备延迟加载功能。</p><p>延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能。<br><a id="more"></a><br>开启延迟加载需要在SqlMapConfig.xml的setting中设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;settings&gt;</div><div class="line">    &lt;!-- 打开延迟加载 的开关 --&gt;</div><div class="line">    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</div><div class="line">    &lt;!-- 将积极加载改为消极加载即按需要加载 --&gt;</div><div class="line">    &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</div><div class="line">&lt;/settings&gt;</div></pre></td></tr></table></figure></p><p>书写需要的两个satatement </p><ul><li>查询用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findUserLazy&quot; resultMap=&quot;findUserAndCarLazyMap&quot;&gt;</div><div class="line">        SELECT *</div><div class="line">        FROM user</div><div class="line">        WHERE id = #&#123;id&#125;</div><div class="line">    &lt;/select&gt;</div></pre></td></tr></table></figure><ul><li><p>查询拥有的Car  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findCarByUserId&quot; parameterType=&quot;int&quot; resultType=&quot;pojo.Car&quot;&gt;</div><div class="line">        SELECT *</div><div class="line">        FROM car</div><div class="line">        WHERE user_id = #&#123;value&#125;</div><div class="line">    &lt;/select&gt;</div></pre></td></tr></table></figure></li><li><p>书写resultMap  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap id=&quot;findUserAndCarLazyMap&quot; type=&quot;pojo.User&quot;&gt;</div><div class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt;</div><div class="line">        &lt;result property=&quot;name&quot; column=&quot;name&quot;&gt;&lt;/result&gt;</div><div class="line">        &lt;result property=&quot;password&quot; column=&quot;password&quot;&gt;&lt;/result&gt;</div><div class="line">        &lt;!--</div><div class="line">            多了select和column</div><div class="line">            select:会去寻找相应的方法，如果不在本mapper中则需要在前面添加其namespace（我这里是放在本mapper中的）</div><div class="line">            column:根据哪一列去进行查询。</div><div class="line">        --&gt;</div><div class="line">        &lt;association property=&quot;car&quot;</div><div class="line">                     select=&quot;findCarByUserId&quot; </div><div class="line">                     column=&quot;id&quot;</div><div class="line">                     javaType=&quot;pojo.Car&quot;&gt;</div><div class="line"></div><div class="line">        &lt;/association&gt;</div><div class="line">    &lt;/resultMap&gt;</div></pre></td></tr></table></figure></li><li><p>在相应的Mapper接口中书写方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public User findUserLazy(int id);</div></pre></td></tr></table></figure></li><li><p>测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void testFindUserLazyLoding()&#123;</div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user = userMapper.findUserLazy(2);</div><div class="line">        System.out.println(user);</div><div class="line"></div><div class="line">        //System.out.println(user.getCar().toString());</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li></ul><p>PS:这里不知道是我用的IDEA的问题还是怎么的，在输出的时候竟然也执行了第二条sql语句。。。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDdebug.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDdebug.png"></p><center>延迟加载debug</center><br><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis%E4%B8%8D%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDdebug.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis%E4%B8%8D%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDdebug.png"><br><center>不延迟加载debug</center><hr><p>更新：后来发现出现上面第一图的情况是由于在System.out.println(user);会执行第二条SQL。。  需要配置一下设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;setting     name=&quot;lazyLoadTriggerMethods&quot; value=&quot; &quot; /&gt;</div></pre></td></tr></table></figure></p><p>lazyLoadTriggerMethods默认情况下仅仅支持自动将equals,clone,hashCode,toString这几个方法定义为延迟加载的加载触发方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;resultMap可以实现高级映射（使用association、collection实现一对一以及一对多映射），association、collection具备延迟加载功能。&lt;/p&gt;
&lt;p&gt;延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能。&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>动态sql</title>
    <link href="http://yoursite.com/2018/04/21/Mybatis/%E5%8A%A8%E6%80%81sql/"/>
    <id>http://yoursite.com/2018/04/21/Mybatis/动态sql/</id>
    <published>2018-04-21T03:04:41.000Z</published>
    <updated>2018-04-21T03:39:10.740Z</updated>
    
    <content type="html"><![CDATA[<p>mybatis核心。对sql语句进行灵活操作，通过表达式进行判断，对SQL进行灵活拼接、组装。<br><a id="more"></a></p><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><ul><li>mapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserList"</span> <span class="attr">parameterType</span>=<span class="string">"pojp.UserQueryVo"</span></span></div><div class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">"pojo.UserCustom"</span>&gt;</span></div><div class="line">    SELECT * FROM user</div><div class="line">    <span class="comment">&lt;!--  where 可以自动去掉条件中的第一个and --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom!=null"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.sex!=null and userCustom.sex != '' "</span>&gt;</span></div><div class="line">               AND user.sex=#&#123;userCustom.sex&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.username!=null and userCustom.username != '' "</span>&gt;</span></div><div class="line">               AND user.username LIKE '%$&#123;userCustom.username&#125;%'</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p>注意：如果传入的userCustom为null<br>那么查询语句会变成<font color="red">SELECT * FROM user</font></p><h3 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h3><p>将上面实现的动态sql判断代码块抽取出来，组成一个sql片段。其他的statement中就可以应用sql片段。</p><ul><li><p>定义SQL片段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 定义sql片段</span></div><div class="line"><span class="comment">id：sql片段的唯 一标识</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">经验：是基于单表来定义sql片段，这样话这个sql片段可重用性才高</span></div><div class="line"><span class="comment">在sql片段中不要包括 where</span></div><div class="line"><span class="comment"> --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"query_user_where"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom!=null"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.sex!=null and userCustom.sex!=''"</span>&gt;</span></div><div class="line">            AND user.sex = #&#123;userCustom.sex&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.username!=null and userCustom.username!=''"</span>&gt;</span></div><div class="line">            AND user.username LIKE '%$&#123;userCustom.username&#125;%'</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>引用SQL片段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserList"</span> <span class="attr">parameterType</span>=<span class="string">"pojo.UserQueryVo"</span></span></div><div class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">"pojo.UserCustom"</span>&gt;</span></div><div class="line">    SELECT * FROM user</div><div class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 引用sql片段 的id，如果refid指定的id不在本mapper文件中，需要前边加namespace --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"query_user_where"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 在这里还要引用其它的sql片段  --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h3 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h3><p>向SQL传递数组或List，mybatis使用foreach解析<br>多id条件查询常有以下两种sql写法：  </p><ul><li><font color="red">SELECT * FROM USER WHERE id=1 OR id=10 OR id=16</font>  </li><li><font color="red">SELECT * FROM USER WHERE id IN(1,10,16)</font></li></ul><p>在输入参数类型中添加<font color="red">List<integer> ids</integer></font>传入多个id<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserQueryVo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//传入多个id</span></div><div class="line">    <span class="keyword">private</span> List&lt;Integer&gt; ids;</div><div class="line"></div><div class="line">    getter、setter方法</div><div class="line">    。。。</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>修改mapper.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids!=null"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用 foreach遍历传入ids</span></div><div class="line"><span class="comment">    collection：指定输入 对象中集合属性</span></div><div class="line"><span class="comment">    item：每个遍历生成对象中</span></div><div class="line"><span class="comment">    open：开始遍历时拼接的串</span></div><div class="line"><span class="comment">    close：结束遍历时拼接的串</span></div><div class="line"><span class="comment">    separator：遍历的两个对象中需要拼接的串</span></div><div class="line"><span class="comment">     --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用实现下边的sql拼接：</span></div><div class="line"><span class="comment">     AND (id=1 OR id=10 OR id=16)</span></div><div class="line"><span class="comment">     --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"user_id"</span> <span class="attr">open</span>=<span class="string">"AND ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 每个遍历需要拼接的串 --&gt;</span></div><div class="line">        id=#&#123;user_id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 实现  “ and id IN(1,10,16)”拼接 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;foreach collection="ids" item="user_id" open="and id IN(" close=")" separator=","&gt;</span></div><div class="line"><span class="comment">        每个遍历需要拼接的串</span></div><div class="line"><span class="comment">        #&#123;user_id&#125;</span></div><div class="line"><span class="comment">    &lt;/foreach&gt; --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mybatis核心。对sql语句进行灵活操作，通过表达式进行判断，对SQL进行灵活拼接、组装。&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>phpStudy升级MySQL</title>
    <link href="http://yoursite.com/2018/04/20/%E9%81%87%E5%88%B0%E8%BF%87%E7%9A%84%E5%9D%91/phpStudy%E5%8D%87%E7%BA%A7MySQL/"/>
    <id>http://yoursite.com/2018/04/20/遇到过的坑/phpStudy升级MySQL/</id>
    <published>2018-04-20T08:35:38.000Z</published>
    <updated>2018-04-20T15:33:54.640Z</updated>
    
    <content type="html"><![CDATA[<p>今天在导入别人给我的sql文件的时候，怎么也导不进去。后来才知道我用的phpStudy的SQL版本太低了。于是需要升级一下。</p><p>首先从官网下载MySql安装包<a href="https://dev.mysql.com/downloads/file/?id=467269" title="https://dev.mysql.com/downloads/file/?id=467269" target="_blank" rel="external">https://dev.mysql.com/downloads/file/?id=467269</a></p><p>步骤：<br>1.最好先备份一份原来phpStudy的MYSQL文件夹<br>2.把下载的 MySQL 压缩文件解压至 phpStudy 下的 MySQL目录，复制 my-default.ini ，重命名为 my.ini。<br>3.打开 my.ini，找到 #basedir 处编辑：  </p><pre><code>basedir = I:\phpStudy\MySQL  datadir = I:\phpStudy\MySQL\data  </code></pre>注：有任何错误都是因为以上路径配置错误导致的<a id="more"></a>4.把 MySQL 安装路径添加至系统环境变量  PATH=…….;I:\phpStudy\MySQL\bin5.在 cmd 下进入 MySQL 的 bin 目录（我的是 I:\phpStudy\MySQL\bin），执行：  初始化数据库：  <pre><code>mysqld --initialize</code></pre>  <p>安装服务：  </p><pre><code>mysqld -install</code></pre> <p>启动服务：  </p><pre><code>net start MySQL</code></pre><p>6.打开 my.ini，找到 [mysqld]，在下面添加：<br>skip-grant-tables(此参数用于忘记mysql密码)<br>此时使用 root 账号，密码处按回车即可登录。</p><p>7.修改密码：  </p><pre><code>mysql>update mysql.user set authentication_string=password('新密码') where user='root' and Host ='localhost';</code></pre>  8.刷新权限：  <pre><code>FLUSH PRIVILEGES;</code></pre>  9.注释掉 my.ini 中刚才添加的skip-grant-tables重新登录。10.更新用户信息：  <pre><code>mysql> ALTER USER USER() IDENTIFIED BY '新密码';</code></pre>11.查看 mySQL 版本：  <pre><code>mysql> select version();  +-----------+  | version() |  +-----------+  | 5.7.17 |  +-----------+  </code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在导入别人给我的sql文件的时候，怎么也导不进去。后来才知道我用的phpStudy的SQL版本太低了。于是需要升级一下。&lt;/p&gt;
&lt;p&gt;首先从官网下载MySql安装包&lt;a href=&quot;https://dev.mysql.com/downloads/file/?id=467269&quot; title=&quot;https://dev.mysql.com/downloads/file/?id=467269&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://dev.mysql.com/downloads/file/?id=467269&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;步骤：&lt;br&gt;1.最好先备份一份原来phpStudy的MYSQL文件夹&lt;br&gt;2.把下载的 MySQL 压缩文件解压至 phpStudy 下的 MySQL目录，复制 my-default.ini ，重命名为 my.ini。&lt;br&gt;3.打开 my.ini，找到 #basedir 处编辑：  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basedir = I:\phpStudy\MySQL  
datadir = I:\phpStudy\MySQL\data  
&lt;/code&gt;&lt;/pre&gt;
注：有任何错误都是因为以上路径配置错误导致的
    
    </summary>
    
      <category term="软件" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="坑" scheme="http://yoursite.com/tags/%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>输入映射和输出映射</title>
    <link href="http://yoursite.com/2018/04/20/Mybatis/%E8%BE%93%E5%85%A5%E6%98%A0%E5%B0%84%E5%92%8C%E8%BE%93%E5%87%BA%E6%98%A0%E5%B0%84/"/>
    <id>http://yoursite.com/2018/04/20/Mybatis/输入映射和输出映射/</id>
    <published>2018-04-20T05:10:35.000Z</published>
    <updated>2018-04-21T04:02:36.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="输入映射"><a href="#输入映射" class="headerlink" title="输入映射"></a>输入映射</h2><p>Mybatis映射文件通过<font color="red">parameterType</font>指定输入参数的类型，类型可以是  </p><ul><li>简单类型</li><li>hashmap</li><li>pojo的包装类型</li></ul><p>在xml映射文件中sql语句会根据OGNL自动获取传入类型中的属性值。<br>如果传入类型中没有相应的属性值，就会报找不到对应属性的错。  </p><p>即使传入类型的具体对象中的相应属性为null，也并不会报错。因为Mybatis使用的是动态sql，如果没有设置某个值，条件就不会拼接在sql中去。<br><a id="more"></a></p><h2 id="输出映射"><a href="#输出映射" class="headerlink" title="输出映射"></a>输出映射</h2><p>输入映射主要有两种方式： </p><ul><li><font color="red">resultType</font></li><li><font color="red">resultMap</font></li></ul><h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><ul><li>使用<font color="red">resultType</font>进行输出映射时，只有查询出来的列名和pojo中的属性名一致，才能映射成功。<ul><li>列名与pojo的属性名<b>只要有一个不一致</b>就不会创建pojo对象，此时会报错。</li><li>列名与pojo的属性名<b>只要有一个一致</b>就会创建一个pojo对象并返回。</li></ul></li></ul><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p>如果查询出来的列名和pojo的属性名不一致，可以通过定义一个resultMap对列名和属性名之间进行映射。<br>1.定义resultMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap type=&quot;user&quot; id=&quot;userResultMap&quot;&gt;</div><div class="line">        &lt;!-- id表示查询结果集中唯一标识 </div><div class="line">        column：查询出来的列名</div><div class="line">        property：type指定的pojo类型中的属性名</div><div class="line">        最终resultMap对column和property作一个映射关系 （对应关系）</div><div class="line">        --&gt;</div><div class="line">        &lt;id column=&quot;id_&quot; property=&quot;id&quot;/&gt;</div><div class="line">        &lt;!-- </div><div class="line">        result：对普通名映射定义</div><div class="line">        column：查询出来的列名</div><div class="line">        property：type指定的pojo类型中的属性名</div><div class="line">        最终resultMap对column和property作一个映射关系 （对应关系）</div><div class="line">         --&gt;</div><div class="line">        &lt;result column=&quot;username_&quot; property=&quot;username&quot;/&gt;</div><div class="line">        &lt;!--</div><div class="line">        一对一映射</div><div class="line">        association：用于映射关联查询单个对象的信息</div><div class="line">        property：要将关联查询的用户信息映射到Orders中哪个属性</div><div class="line">        javaType：映射到user的哪个属性</div><div class="line">       --&gt;</div><div class="line">       &lt;!--</div><div class="line">       一对多映射</div><div class="line">       collection：对关联查询到多条记录映射到集合对象中</div><div class="line">       property：将关联查询到多条记录映射到com.iot.mybatis.po.Orders哪个属性</div><div class="line">       ofType：指定映射到list集合属性中pojo的类型</div><div class="line">       --&gt;</div><div class="line">     &lt;/resultMap&gt;</div></pre></td></tr></table></figure><p>2.使用resultMap作为statement的输出映射类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 使用resultMap进行输出映射</div><div class="line">        resultMap：指定定义的resultMap的id，如果这个resultMap在其它的mapper文件，前边需要加namespace</div><div class="line">        --&gt;</div><div class="line">    &lt;select id=&quot;findUserByIdResultMap&quot; parameterType=&quot;int&quot; resultMap=&quot;userResultMap&quot;&gt;</div><div class="line">        SELECT id id_,username username_ FROM USER WHERE id=#&#123;value&#125;</div><div class="line">    &lt;/select&gt;</div></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>使用resultMap多表查询时，可能会导致重复字段赋值错误。<br>解决方法：在查询时定义别名。resultMap中根据别名列来映射</p><hr><p>resultType和resultMap区别：</p><ul><li>resultType：使用resultType实现较为简单，如果pojo中没有包括查询出来的列名，需要增加列名对应的属性，即可完成映射。如果没有查询结果的特殊要求建议使用resultType。</li><li>resultMap：需要单独定义resultMap，实现有点麻烦，如果对查询结果有特殊的要求，使用resultMap可以完成将关联查询映射pojo的属性中。</li><li>resultMap可以实现延迟加载，resultType无法实现延迟加载。</li></ul><hr><p>association：</p><ul><li>作用：将关联查询信息映射到一个pojo对象中。  </li><li>场合：为了方便查询关联信息可以使用association将关联订单信息映射为用户对象的pojo属性中，比如：查询订单及关联用户信息。</li></ul><p>collection：  </p><ul><li>作用：将关联查询信息映射到一个list集合中。</li><li>场合：为了方便查询遍历关联信息可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块及模块下的菜单，可使用collection将模块映射到模块list中，将菜单列表映射到模块对象的菜单list属性中，这样的作的目的也是方便对查询结果集进行遍历查询。如果使用resultType无法将查询结果映射到list集合中。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;输入映射&quot;&gt;&lt;a href=&quot;#输入映射&quot; class=&quot;headerlink&quot; title=&quot;输入映射&quot;&gt;&lt;/a&gt;输入映射&lt;/h2&gt;&lt;p&gt;Mybatis映射文件通过&lt;font color=&quot;red&quot;&gt;parameterType&lt;/font&gt;指定输入参数的类型，类型可以是  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单类型&lt;/li&gt;
&lt;li&gt;hashmap&lt;/li&gt;
&lt;li&gt;pojo的包装类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在xml映射文件中sql语句会根据OGNL自动获取传入类型中的属性值。&lt;br&gt;如果传入类型中没有相应的属性值，就会报找不到对应属性的错。  &lt;/p&gt;
&lt;p&gt;即使传入类型的具体对象中的相应属性为null，也并不会报错。因为Mybatis使用的是动态sql，如果没有设置某个值，条件就不会拼接在sql中去。&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>SqlMapConfig</title>
    <link href="http://yoursite.com/2018/04/20/Mybatis/SqlMapConfig/"/>
    <id>http://yoursite.com/2018/04/20/Mybatis/SqlMapConfig/</id>
    <published>2018-04-20T03:29:14.000Z</published>
    <updated>2018-04-20T05:09:00.417Z</updated>
    
    <content type="html"><![CDATA[<p>SqlMapConfig.xml中配置的内容和顺序： </p><ul><li>properties(属性)</li><li>settings(全局配置参数)</li><li><b>typeAliases(类型别名)</b></li><li><em>objectFactory(对象工厂)</em></li><li><em>plugins(插件)</em></li><li>environments(环境集合属性对象)  <ul><li>environment(环境属性对象)<ul><li>transactionManager(事务管理)</li><li>dataSource(数据源)</li></ul></li></ul></li><li><b>mappers(映射器）</b></li></ul><a id="more"></a><h3 id="properties-属性"><a href="#properties-属性" class="headerlink" title="properties(属性)"></a>properties(属性)</h3><p>将数据库连接参数单独配置在db.properties中，可以避免xml硬编码，方便以后更改以及其他文件使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbc.driver=com.mysql.jdbc.Driver</div><div class="line">jdbc.url=jdbc:mysql:////mybatis?characterEncoding=utf-8</div><div class="line">jdbc.username=root</div><div class="line">jdbc.password=123</div></pre></td></tr></table></figure></p><p>在sqlMapConfig.xml中加载属性文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--properties中还可以配置一些属性名和属性值  --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;property name="jdbc.driver" value=""/&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure></p><p><font color="red">Mybatis加载资源属性顺序：(后面加载的会覆盖前面）</font>  </p><ol><li>在<b>properties</b>元素体内定义的属性</li><li><b>properties</b>元素中resource或url加载的属性</li><li><b>parameterType</b>传递的属性</li></ol><h3 id="settings-全局参数配置"><a href="#settings-全局参数配置" class="headerlink" title="settings(全局参数配置)"></a>settings(全局参数配置)</h3><p>Mybatis框架运行时的一些参数。比如：二级缓存、延迟加载等<br>官方文档：<a href="http://www.mybatis.org/mybatis-3/configuration.html#settings" title="http://www.mybatis.org/mybatis-3/configuration.html#settings" target="_blank" rel="external">mybatis-settings</a></p><h3 id="typeAliases-类型别名"><a href="#typeAliases-类型别名" class="headerlink" title="typeAliases(类型别名)"></a>typeAliases(类型别名)</h3><p><font color="red">parameterType</font> 指定输入参数的类型  </p><p><font color="red">resultType</font> 指定输出参数的映射类型<br>每次都要输入全名路径太过于麻烦,类型别名简化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 别名定义 --&gt;</div><div class="line">&lt;typeAliases&gt;</div><div class="line"></div><div class="line">    &lt;!-- 针对单个别名定义</div><div class="line">    type：类型的路径</div><div class="line">    alias：别名</div><div class="line">     --&gt;</div><div class="line">    &lt;!-- &lt;typeAlias type=&quot;Pojo.User&quot; alias=&quot;user&quot;/&gt; --&gt;</div><div class="line">    &lt;!-- 批量别名定义</div><div class="line">    指定包名，mybatis自动扫描包中的po类，自动定义别名，别名就是类名（首字母大写或小写都可以）</div><div class="line">    --&gt;</div><div class="line">    &lt;package name=&quot;Pojo&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/typeAliases&gt;</div></pre></td></tr></table></figure></p><p>具体参考官网文档：<a href="http://www.mybatis.org/mybatis-3/configuration.html#typeAliases" title="http://www.mybatis.org/mybatis-3/configuration.html#typeAliases" target="_blank" rel="external">typeAliases</a></p><p>Mybatis默认支持的别名 </p><center>（8大基本类型及其包装类+Data+大数类型） </center><table><thead><tr><th>别名</th><th>映射的类型   </th></tr></thead><tbody><tr><td>_byte</td><td>byte  </td></tr><tr><td>_long</td><td>long  </td></tr><tr><td>_short</td><td>short  </td></tr><tr><td>_int</td><td>int  </td></tr><tr><td>_integer</td><td>int  </td></tr><tr><td>_double</td><td>double  </td></tr><tr><td>_float</td><td>float  </td></tr><tr><td>_boolean</td><td>boolean  </td></tr><tr><td>string</td><td>String  </td></tr><tr><td>byte</td><td>Byte  </td></tr><tr><td>long</td><td>Long  </td></tr><tr><td>short</td><td>Short  </td></tr><tr><td>int</td><td>Integer  </td></tr><tr><td>integer</td><td>Integer  </td></tr><tr><td>double</td><td>Double  </td></tr><tr><td>float</td><td>Float  </td></tr><tr><td>boolean</td><td>Boolean  </td></tr><tr><td>date</td><td>Date  </td></tr><tr><td>decimal</td><td>BigDecimal  </td></tr><tr><td>bigdecimal</td><td>BigDecimal  </td></tr></tbody></table><h3 id="typeHandlers-类型处理器"><a href="#typeHandlers-类型处理器" class="headerlink" title="typeHandlers(类型处理器)"></a>typeHandlers(类型处理器)</h3><p>mybatis中通过typeHandlers完成jdbc类型和java类型的转换。<br>参考：<a href="http://www.mybatis.org/mybatis-3/configuration.html#typeHandlers" title="http://www.mybatis.org/mybatis-3/configuration.html#typeHandlers" target="_blank" rel="external">typeHandlers</a></p><h3 id="mappers-映射配置"><a href="#mappers-映射配置" class="headerlink" title="mappers(映射配置)"></a>mappers(映射配置)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!--通过resource方法一次加载一个映射文件 --&gt;</div><div class="line">&lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt;</div><div class="line"></div><div class="line">&lt;!--通过mapper接口加载单个mapper--&gt;</div><div class="line">&lt;mapper class=&quot;mapper.UserMapper&quot;/&gt;</div><div class="line"></div><div class="line">&lt;!-- 批量加载mapper(推荐使用)</div><div class="line">        指定mapper接口的包名，mybatis自动扫描包下边所有mapper接口进行加载</div><div class="line">        遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录 中</div><div class="line">        上边规范的前提是：使用的是mapper代理方法</div><div class="line">         --&gt;</div><div class="line">&lt;package name=&quot;mapper&quot;/&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SqlMapConfig.xml中配置的内容和顺序： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;properties(属性)&lt;/li&gt;
&lt;li&gt;settings(全局配置参数)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;typeAliases(类型别名)&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;objectFactory(对象工厂)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;plugins(插件)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;environments(环境集合属性对象)  &lt;ul&gt;
&lt;li&gt;environment(环境属性对象)&lt;ul&gt;
&lt;li&gt;transactionManager(事务管理)&lt;/li&gt;
&lt;li&gt;dataSource(数据源)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;mappers(映射器）&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis--原始dao和mapper代理方法</title>
    <link href="http://yoursite.com/2018/04/20/Mybatis/Mybatis-%E5%8E%9F%E5%A7%8Bdao%E5%92%8Cmapper%E4%BB%A3%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/20/Mybatis/Mybatis-原始dao和mapper代理方法/</id>
    <published>2018-04-20T01:16:36.000Z</published>
    <updated>2018-04-20T01:46:07.759Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>SqlSessionFactoryBuilder<br>通过<font color="red">SqlSessionFactoryBuilder</font>创建会话工厂<font color="red">SqlSessionFactory</font>。将<font color="red">SqlSessionFactoryBuilder</font>当成一个工具类使用即可，不需要使用单例管理<font color="red">SqlSessionFactoryBuilder</font>。在创建<font color="red">SqlSessionFactory</font>时候，只需要new一次<font color="red">SqlSessionFactoryBuilder</font>即可。</p></li><li><p>SqlSessionFactory<br>通过<font color="red">SqlSessionFactory</font>创建<font color="red">SqlSession</font>；由于<font color="red">SqlSessionFactory</font>是线程安全的，应该在应用执行期间都存在，所以在应用运行期间不要重复创建多次，建议使用单例模式。</p></li><li><p>SqlSession<br><font color="red">SqlSession</font>是应用程序和持久层之间执行交互操作的一个单线程对象。<font color="red">SqlSession</font>中提供了许多操作数据库的方法。<br><font color="red">SqlSession</font>是线程不安全的。<br>使用完<font color="red">SqlSession</font>要确保在finally块中关闭它。</p><a id="more"></a><h2 id="原始dao接口开发"><a href="#原始dao接口开发" class="headerlink" title="原始dao接口开发"></a>原始dao接口开发</h2><p>程序员需要写dao接口和dao实现类  </p><h3 id="dao接口"><a href="#dao接口" class="headerlink" title="dao接口"></a>dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="dao接口实现类"><a href="#dao接口实现类" class="headerlink" title="dao接口实现类"></a>dao接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//使用构造方法注入SqlSessionFactory</span></div><div class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        User user = sqlSession.selectOne(<span class="string">"test.findUserById"</span>,id);</div><div class="line">        sqlSession.close();</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        List&lt;User&gt; list = sqlSession.selectList(<span class="string">"test.findUserByName"</span>,name);</div><div class="line">        sqlSession.close();</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_2</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="comment">//mybatis配置文件</span></div><div class="line">        String resource = <span class="string">"sqlMapConfig.xml"</span>;</div><div class="line">        <span class="comment">//得到配置文件流</span></div><div class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</div><div class="line">        <span class="comment">//创建会话工厂</span></div><div class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDao</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="comment">//创建UserDao的对象</span></div><div class="line">        UserDao userDao = <span class="keyword">new</span> UserDaoImpl(sqlSessionFactory);</div><div class="line">        User user = userDao.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user);</div><div class="line">        List&lt;User&gt; list = userDao.findUserByName(<span class="string">"ho"</span>);</div><div class="line">        System.out.println(list);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="总结原始dao开发问题"><a href="#总结原始dao开发问题" class="headerlink" title="总结原始dao开发问题"></a>总结原始dao开发问题</h3><p>1.dao接口实现类方法中存在大量的模板方法。<br>2.调用SqlSession方法时传入参数硬编码。<br>3.由于SqlSession方法使用泛型，即使变量类型传入错误，在编译阶段也不会报错，不利于程序员开发。</p><hr><h2 id="mapper代理方法"><a href="#mapper代理方法" class="headerlink" title="mapper代理方法"></a>mapper代理方法</h2><p>程序员只需要mapper接口(相当于dao接口)<br>程序员还需要编写mapper.xml映射文件<br>程序员编写mapper接口需要遵循一些开发规范，Mybatis可以自动生成mapper接口实现类代理对象。</p><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><ul><li><p>在mapper.xml中namespace等于mapper接口地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment"> namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离</span></div><div class="line"><span class="comment"> 注意：使用mapper代理方法开发，namespace有特殊重要的作用,namespace等于mapper接口地址</span></div><div class="line"><span class="comment"> --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"mapper.UserMapper"</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>mapper.java接口中的方法名和mapper.xml中statement的id一致  </p></li><li>mapper.java接口中的方法输入参数类型和mapper.xml中statement的parameterType指定的类型一致。  </li><li>mapper.java接口中的方法返回值类型和mapper.xml中statement的resultType指定的类型一致。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;SqlSessionFactoryBuilder&lt;br&gt;通过&lt;font color=&quot;red&quot;&gt;SqlSessionFactoryBuilder&lt;/font&gt;创建会话工厂&lt;font color=&quot;red&quot;&gt;SqlSessionFactory&lt;/font&gt;。将&lt;font color=&quot;red&quot;&gt;SqlSessionFactoryBuilder&lt;/font&gt;当成一个工具类使用即可，不需要使用单例管理&lt;font color=&quot;red&quot;&gt;SqlSessionFactoryBuilder&lt;/font&gt;。在创建&lt;font color=&quot;red&quot;&gt;SqlSessionFactory&lt;/font&gt;时候，只需要new一次&lt;font color=&quot;red&quot;&gt;SqlSessionFactoryBuilder&lt;/font&gt;即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SqlSessionFactory&lt;br&gt;通过&lt;font color=&quot;red&quot;&gt;SqlSessionFactory&lt;/font&gt;创建&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;；由于&lt;font color=&quot;red&quot;&gt;SqlSessionFactory&lt;/font&gt;是线程安全的，应该在应用执行期间都存在，所以在应用运行期间不要重复创建多次，建议使用单例模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SqlSession&lt;br&gt;&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;是应用程序和持久层之间执行交互操作的一个单线程对象。&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;中提供了许多操作数据库的方法。&lt;br&gt;&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;是线程不安全的。&lt;br&gt;使用完&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;要确保在finally块中关闭它。&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis入门程序2</title>
    <link href="http://yoursite.com/2018/04/19/Mybatis/Mybatis%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F2/"/>
    <id>http://yoursite.com/2018/04/19/Mybatis/Mybatis入门程序2/</id>
    <published>2018-04-19T14:56:00.000Z</published>
    <updated>2018-04-20T01:03:06.068Z</updated>
    
    <content type="html"><![CDATA[<p>在User.xml文件中增加增删改三个功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;!--</div><div class="line">       parameterType 为实体对象</div><div class="line">       #&#123;&#125; 会使用OGNL来获得同名的值</div><div class="line">       insert update delete 默认返回的都是影响的条数</div><div class="line">   --&gt;</div><div class="line">   &lt;insert id=&quot;insertUser&quot; parameterType=&quot;Pojo.User&quot;&gt;</div><div class="line">       &lt;!--</div><div class="line">           如果要求返回刚插入的id值则需要增加&lt;selectKey&gt;</div><div class="line"></div><div class="line">           SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键</div><div class="line">           keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性</div><div class="line">           order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序</div><div class="line">           resultType：指定SELECT LAST_INSERT_ID()的结果类型</div><div class="line"></div><div class="line">           //也可以使用以下这种方法</div><div class="line">           useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;</div><div class="line"></div><div class="line">           以上两种方法可以自动将id赋值给传入的那个实体相应的属性中去</div><div class="line">       --&gt;</div><div class="line">       &lt;selectKey keyProperty=&quot;id&quot; order=&quot;AFTER&quot; resultType=&quot;java.lang.Integer&quot;&gt;</div><div class="line">           SELECT LAST_INSERT_ID()</div><div class="line">       &lt;/selectKey&gt;</div><div class="line">       INSERT INTO user(name,password)</div><div class="line">       VALUES (#&#123;name&#125;,#&#123;password&#125;)</div><div class="line"></div><div class="line">   &lt;/insert&gt;</div><div class="line"></div><div class="line">   &lt;!--更新用户信息，id必须存在--&gt;</div><div class="line">   &lt;update id=&quot;updateUser&quot; parameterType=&quot;Pojo.User&quot;&gt;</div><div class="line">       UPDATE user</div><div class="line">       SET password = #&#123;password&#125;</div><div class="line">       WHERE id = #&#123;id&#125;</div><div class="line">   &lt;/update&gt;</div><div class="line"></div><div class="line">   &lt;!--根据id删除用户--&gt;</div><div class="line">   &lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;</div><div class="line">       DELETE FROM</div><div class="line">       user</div><div class="line">       WHERE id = #&#123;id&#125;</div><div class="line">   &lt;/delete&gt;</div></pre></td></tr></table></figure></p><a id="more"></a><p>在测试类中添加相应的三个测试方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//增加测试</div><div class="line">      User user = new User();</div><div class="line">      user.setName(&quot;JJ&quot;);</div><div class="line">      user.setPassword(&quot;JJ&quot;);</div><div class="line">      sqlSession.insert(&quot;test.insertUser&quot;,user);</div><div class="line">      System.out.println(user.getId());</div><div class="line"></div><div class="line">//更新测试</div><div class="line">      User user = new User();</div><div class="line">      user.setId(4);</div><div class="line">      user.setName(&quot;JJ&quot;);</div><div class="line">      user.setPassword(&quot;KK&quot;);</div><div class="line">      sqlSession.update(&quot;test.updateUser&quot;,user);</div><div class="line"></div><div class="line">      //删除测试</div><div class="line">sqlSession.delete(&quot;test.deleteUser&quot;,4);</div></pre></td></tr></table></figure></p><h3 id="mybatis和hibernate本质区别和应用场景"><a href="#mybatis和hibernate本质区别和应用场景" class="headerlink" title="mybatis和hibernate本质区别和应用场景"></a>mybatis和hibernate本质区别和应用场景</h3><ul><li>hibernate  </li></ul><p>是一个标准ORM框架（对象关系映射）。入门门槛较高的，不需要程序写sql，sql语句自动生成了。对sql语句进行优化、修改比较困难的。<font color="red">hibernate对象/关系映射能力强，数据库无关性好。</font></p><p>应用场景：适用与需求变化不多的中小型项目，比如：后台管理系统，erp、orm、oa。。</p><ul><li>mybatis</li></ul><p>专注是sql本身，需要程序员自己编写sql语句，sql修改、优化比较方便。mybatis是一个不完全的ORM框架，虽然程序员自己写sql，mybatis也可以实现映射（输入映射、输出映射）。<font color="red">但是灵活的前提是Mybatis无法做到数据库无关性。</font></p><p>应用场景：适用与需求变化较多的项目，比如：互联网项目。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在User.xml文件中增加增删改三个功能&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!--&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       parameterType 为实体对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       #&amp;#123;&amp;#125; 会使用OGNL来获得同名的值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       insert update delete 默认返回的都是影响的条数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;insert id=&amp;quot;insertUser&amp;quot; parameterType=&amp;quot;Pojo.User&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;!--&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           如果要求返回刚插入的id值则需要增加&amp;lt;selectKey&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           resultType：指定SELECT LAST_INSERT_ID()的结果类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           //也可以使用以下这种方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           useGeneratedKeys=&amp;quot;true&amp;quot; keyProperty=&amp;quot;id&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           以上两种方法可以自动将id赋值给传入的那个实体相应的属性中去&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;selectKey keyProperty=&amp;quot;id&amp;quot; order=&amp;quot;AFTER&amp;quot; resultType=&amp;quot;java.lang.Integer&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           SELECT LAST_INSERT_ID()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;/selectKey&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       INSERT INTO user(name,password)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       VALUES (#&amp;#123;name&amp;#125;,#&amp;#123;password&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;/insert&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;!--更新用户信息，id必须存在--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;update id=&amp;quot;updateUser&amp;quot; parameterType=&amp;quot;Pojo.User&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       UPDATE user&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       SET password = #&amp;#123;password&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       WHERE id = #&amp;#123;id&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;/update&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;!--根据id删除用户--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;delete id=&amp;quot;deleteUser&amp;quot; parameterType=&amp;quot;int&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       DELETE FROM&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       user&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       WHERE id = #&amp;#123;id&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;/delete&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
</feed>
