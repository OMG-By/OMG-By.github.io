<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OMG_By</title>
  
  <subtitle>你走与不走，路就在那里</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-30T13:00:59.133Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>OMG_By</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux常用命令（简）</title>
    <link href="http://yoursite.com/2117/10/24/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2117/10/24/Linux/Linux常用命令/</id>
    <published>2117-10-24T11:31:09.000Z</published>
    <updated>2017-10-30T13:00:59.133Z</updated>
    
    <content type="html"><![CDATA[<h3 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a><a href="https://omg-by.github.io/1900/01/01/Linux/cd/" title="cd详细介绍" target="_blank" rel="external">cd命令</a></h3><p>&ensp;&ensp;跟Windows中一样，进入相应的目录下。<br>&ensp;&ensp;命令格式： cd [目录]</p><h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a><a href="https://omg-by.github.io/1900/01/01/Linux/ls/" title="ls详细介绍" target="_blank" rel="external">ls命令</a></h3><p>&ensp;&ensp;查看当前目录下的目录、文件等及其相应权限。<br>&ensp;&ensp;命令格式： ls [选项] 目录</p><h3 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h3><p>&ensp;&ensp;查看当前工作目录的完整路径。<br>&ensp;&ensp;pwd [选项]</p><h3 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h3><p>&ensp;&ensp;创建一个指定的名称的目录，要求创建目录的用户具有权限且该目录名不存在。<br>&ensp;&ensp;mkdir [选项]目录<br><a id="more"></a></p><h3 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h3><p>&ensp;&ensp;删除一个目录中的一个或多个文件或目录。<br>&ensp;&ensp;rm [选项] 文件或目录</p><h3 id="rmdir命令"><a href="#rmdir命令" class="headerlink" title="rmdir命令"></a>rmdir命令</h3><p>&ensp;&ensp;删除空目录。<br>&ensp;&ensp;rmdir [选项] 目录</p><h3 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h3><p>&ensp;&ensp;移动文件或者将文件改名，经常用来备份文件或者目录。<br>&ensp;&ensp;mv [选项] 源文件或目录 目标文件或者目录</p><h3 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h3><p>&ensp;&ensp;复制文件，如果目标文件已经存在，会询问是否覆盖。<br>&ensp;&ensp;cp [选项] 源文件或目录  目的目录</p><h3 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h3><p>&ensp;&ensp;用来修改文件时间戳或者新建一个不存在的文件。<br>&ensp;&ensp;touch [选项] 文件</p><h3 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h3><p>&ensp;&ensp;显示文件内容 或者将几个文件连接起来显示 或者从标准输入读取内容并显示，常与重定向符号配合使用。<br>&ensp;&ensp;cat [选项] 文件</p><h3 id="nl命令"><a href="#nl命令" class="headerlink" title="nl命令"></a>nl命令</h3><p>&ensp;&ensp;用来计算文件中行号，可以将输出的文件内容自动的加上行号。<br>&ensp;&ensp;nl [选项] 文件</p><h3 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h3><p>&ensp;&ensp;功能类似cat，cat是整个文件的内容从上到下显示到屏幕上，more会以一页一页的显示方便使用者阅读，空格向后，b键向前。more从前向后读取文件，因此在启动时就加载整个文件。<br>&ensp;&ensp;more [选项] [每屏几行] [查找的子串] [第几行开始] [文件] </p><h3 id="less命令"><a href="#less命令" class="headerlink" title="less命令"></a>less命令</h3><p>&ensp;&ensp;跟more类似，但使用less可以任意浏览文件，而more仅能向前移动，却不能向后移动，而且less在查看前不会加载整个文件。<br>&ensp;&ensp;less [参数] 文件</p><h3 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h3><p>&ensp;&ensp;用来显示档案的开头至标准输出中，默认head命令打印其相应文件的开头10行。<br>&ensp;&ensp;head [参数] 文件</p><h3 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h3><p>&ensp;&ensp;用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。<br>&ensp;&ensp;tail[必要参数][选择参数] 文件</p><h3 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h3><p>&ensp;&ensp;which指令会在PATH变量指定的路径下，搜索某个系统命令的位置，并且返回第一个搜索结果。<br>&ensp;&ensp;which 可执行文件命令</p><h3 id="whereis命令"><a href="#whereis命令" class="headerlink" title="whereis命令"></a>whereis命令</h3><p>&ensp;&ensp;whereis命令是定位可执行文件、源代码文件、帮助文件、在文件系统中的位置。这些文件的属性应属于原始代码，二进制文件，或是帮助文件。whereis程序还具有搜索源代码、指定备用搜索路径和搜索不寻常项的能力。<br>&ensp;&ensp;whereis [-bmsu] [BMS 目录名 -f ] 文件名</p><h3 id="locate命令"><a href="#locate命令" class="headerlink" title="locate命令"></a>locate命令</h3><p>&ensp;&ensp;通过系统自动生成是数据库表来查询文件，支持匹配符。但是由于有些系统的数据库表不是实时更新的，所以查到的数据可能不是最新的。<br>&ensp;&ensp;locate[选择参数][样式]</p><h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><p>&ensp;&ensp;用于在文件树中查找文件，并作出相应的处理。<br>&ensp;&ensp;find pathname -options [-print -exec -ok …] </p><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><p>&ensp;&ensp;用来压缩和解压文件。tar本身不具有压缩功能，他是调用压缩功能实现的。<br>&ensp;&ensp;tar [必要参数][选择参数][文件]</p><p><br><br><br><br><center> <strong>长期不定时更新中。。。。。。。。。</strong></center></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;cd命令&quot;&gt;&lt;a href=&quot;#cd命令&quot; class=&quot;headerlink&quot; title=&quot;cd命令&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://omg-by.github.io/1900/01/01/Linux/cd/&quot; title=&quot;cd详细介绍&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cd命令&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&amp;ensp;&amp;ensp;跟Windows中一样，进入相应的目录下。&lt;br&gt;&amp;ensp;&amp;ensp;命令格式： cd [目录]&lt;/p&gt;
&lt;h3 id=&quot;ls命令&quot;&gt;&lt;a href=&quot;#ls命令&quot; class=&quot;headerlink&quot; title=&quot;ls命令&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://omg-by.github.io/1900/01/01/Linux/ls/&quot; title=&quot;ls详细介绍&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ls命令&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&amp;ensp;&amp;ensp;查看当前目录下的目录、文件等及其相应权限。&lt;br&gt;&amp;ensp;&amp;ensp;命令格式： ls [选项] 目录&lt;/p&gt;
&lt;h3 id=&quot;pwd命令&quot;&gt;&lt;a href=&quot;#pwd命令&quot; class=&quot;headerlink&quot; title=&quot;pwd命令&quot;&gt;&lt;/a&gt;pwd命令&lt;/h3&gt;&lt;p&gt;&amp;ensp;&amp;ensp;查看当前工作目录的完整路径。&lt;br&gt;&amp;ensp;&amp;ensp;pwd [选项]&lt;/p&gt;
&lt;h3 id=&quot;mkdir命令&quot;&gt;&lt;a href=&quot;#mkdir命令&quot; class=&quot;headerlink&quot; title=&quot;mkdir命令&quot;&gt;&lt;/a&gt;mkdir命令&lt;/h3&gt;&lt;p&gt;&amp;ensp;&amp;ensp;创建一个指定的名称的目录，要求创建目录的用户具有权限且该目录名不存在。&lt;br&gt;&amp;ensp;&amp;ensp;mkdir [选项]目录&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis逆向工程</title>
    <link href="http://yoursite.com/2018/04/23/Mybatis/Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/23/Mybatis/Mybatis逆向工程/</id>
    <published>2018-04-23T12:39:06.000Z</published>
    <updated>2018-04-22T09:37:22.571Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;逆向工程的字面意思就是反向生成工程。<br>使用逆向工程时，需要注意的是表之间的关系无法映射出来！也就是说Mybatis的逆向工程生成的都是单表操作。</p><ol><li><p>Mybatis逆向工程开发文档<br><a href="http://www.mybatis.org/generator/configreference/xmlconfig.html" target="_blank" rel="external">http://www.mybatis.org/generator/configreference/xmlconfig.html</a></p></li><li><p>使用逆向工程生成代码有好几种方式，这里就介绍一种最简单的，Java程序生成（解释在配置中)<br>&ensp;&ensp;2.1 准备逆向工程配置文件genreatorConfig.xml,名字无所谓,只要在java程序中作为file传入就好:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE generatorConfiguration</div><div class="line">  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</div><div class="line">  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</div><div class="line">&lt;generatorConfiguration&gt;</div><div class="line">    &lt;!--数据库驱动,最好不要有中文字符,不然会找不到--&gt;</div><div class="line">    &lt;classPathEntry location=&quot;F:/cache/mysql-connector-java-5.1.28-bin.jar&quot; /&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;context id=&quot;DB2Tables&quot;    targetRuntime=&quot;MyBatis3&quot;&gt;</div><div class="line"></div><div class="line">        &lt;commentGenerator&gt;</div><div class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;</div><div class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</div><div class="line">        &lt;/commentGenerator&gt;</div><div class="line">        &lt;!--数据库链接地址账号密码--&gt;</div><div class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost/test&quot; userId=&quot;root&quot; password=&quot;&quot;&gt;</div><div class="line">        &lt;/jdbcConnection&gt;</div><div class="line">        &lt;javaTypeResolver&gt;</div><div class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</div><div class="line">        &lt;/javaTypeResolver&gt;</div><div class="line">        &lt;!--生成Model类存放位置--&gt;</div><div class="line">        &lt;javaModelGenerator targetPackage=&quot;com.leige.domain&quot; targetProject=&quot;src&quot;&gt;</div><div class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</div><div class="line">        &lt;/javaModelGenerator&gt;</div><div class="line">        &lt;!--生成映射文件存放位置--&gt;</div><div class="line">        &lt;sqlMapGenerator targetPackage=&quot;com.leige.domain&quot; targetProject=&quot;src&quot;&gt;</div><div class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class="line">        &lt;/sqlMapGenerator&gt;</div><div class="line">        &lt;!--生成DaoMapper类存放位置--&gt;</div><div class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.leige.dao&quot; targetProject=&quot;src&quot;&gt;</div><div class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class="line">        &lt;/javaClientGenerator&gt;</div><div class="line">        &lt;!--生成对应表及类名,需要记住的一点是逆向工程无法生成关联关系,只能生成单表操作--&gt;</div><div class="line">        &lt;table tableName=&quot;student&quot; </div><div class="line">            domainObjectName=&quot;Student&quot; </div><div class="line">          &gt;&lt;/table&gt;</div><div class="line">           &lt;table tableName=&quot;teacher&quot; </div><div class="line">            domainObjectName=&quot;Teacher&quot; </div><div class="line">          &gt;&lt;/table&gt;</div><div class="line">    &lt;/context&gt;</div><div class="line">&lt;/generatorConfiguration&gt;</div></pre></td></tr></table></figure></li></ol><a id="more"></a><p>&ensp;&ensp;2.2<a href="http://pan.baidu.com/s/1jIvLufG" target="_blank" rel="external">下载jar包</a><br>&ensp;&ensp;2.3准备java程序,在开发文档首页,粘贴一下就好了,没必要记住:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.leige.test;</div><div class="line"></div><div class="line">import java.awt.geom.GeneralPath;</div><div class="line">import java.awt.im.InputContext;</div><div class="line">import java.io.File;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.apache.ibatis.io.Resources;</div><div class="line">import org.apache.log4j.chainsaw.Main;</div><div class="line">import org.apache.log4j.lf5.util.Resource;</div><div class="line">import org.mybatis.generator.api.MyBatisGenerator;</div><div class="line">import org.mybatis.generator.config.Configuration;</div><div class="line">import org.mybatis.generator.config.xml.ConfigurationParser;</div><div class="line">import org.mybatis.generator.internal.DefaultShellCallback;</div><div class="line"></div><div class="line">public class MybatisGen &#123;</div><div class="line">    public static void generator() throws Exception&#123;</div><div class="line">           List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();</div><div class="line">           boolean overwrite = true;</div><div class="line">           //项目根路径不要有中文,我的有中文,所以使用绝对路径</div><div class="line">           File configFile = new File(&quot;F:/cache/generatorConfig.xml&quot;);</div><div class="line">           ConfigurationParser cp = new ConfigurationParser(warnings);</div><div class="line">           Configuration config = cp.parseConfiguration(configFile);</div><div class="line">           DefaultShellCallback callback = new DefaultShellCallback(overwrite);</div><div class="line">           MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);</div><div class="line">           myBatisGenerator.generate(null);</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try &#123;</div><div class="line">            generator();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            // TODO Auto-generated catch block</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&ensp;&ensp;2.4运行java程序,就会发现生成的代码: </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;逆向工程的字面意思就是反向生成工程。&lt;br&gt;使用逆向工程时，需要注意的是表之间的关系无法映射出来！也就是说Mybatis的逆向工程生成的都是单表操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Mybatis逆向工程开发文档&lt;br&gt;&lt;a href=&quot;http://www.mybatis.org/generator/configreference/xmlconfig.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.mybatis.org/generator/configreference/xmlconfig.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用逆向工程生成代码有好几种方式，这里就介绍一种最简单的，Java程序生成（解释在配置中)&lt;br&gt;&amp;ensp;&amp;ensp;2.1 准备逆向工程配置文件genreatorConfig.xml,名字无所谓,只要在java程序中作为file传入就好:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE generatorConfiguration&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  PUBLIC &amp;quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;generatorConfiguration&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;!--数据库驱动,最好不要有中文字符,不然会找不到--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;classPathEntry location=&amp;quot;F:/cache/mysql-connector-java-5.1.28-bin.jar&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;context id=&amp;quot;DB2Tables&amp;quot;    targetRuntime=&amp;quot;MyBatis3&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;commentGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;suppressDate&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;suppressAllComments&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/commentGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--数据库链接地址账号密码--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;jdbcConnection driverClass=&amp;quot;com.mysql.jdbc.Driver&amp;quot; connectionURL=&amp;quot;jdbc:mysql://localhost/test&amp;quot; userId=&amp;quot;root&amp;quot; password=&amp;quot;&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/jdbcConnection&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;javaTypeResolver&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;forceBigDecimals&amp;quot; value=&amp;quot;false&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/javaTypeResolver&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--生成Model类存放位置--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;javaModelGenerator targetPackage=&amp;quot;com.leige.domain&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;trimStrings&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/javaModelGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--生成映射文件存放位置--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;sqlMapGenerator targetPackage=&amp;quot;com.leige.domain&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/sqlMapGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--生成DaoMapper类存放位置--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;javaClientGenerator type=&amp;quot;XMLMAPPER&amp;quot; targetPackage=&amp;quot;com.leige.dao&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/javaClientGenerator&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--生成对应表及类名,需要记住的一点是逆向工程无法生成关联关系,只能生成单表操作--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;table tableName=&amp;quot;student&amp;quot; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            domainObjectName=&amp;quot;Student&amp;quot; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;gt;&amp;lt;/table&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;lt;table tableName=&amp;quot;teacher&amp;quot; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            domainObjectName=&amp;quot;Teacher&amp;quot; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;gt;&amp;lt;/table&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/context&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/generatorConfiguration&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>缓存机制</title>
    <link href="http://yoursite.com/2018/04/21/Mybatis/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/04/21/Mybatis/缓存机制/</id>
    <published>2018-04-21T12:57:22.000Z</published>
    <updated>2018-04-22T09:29:11.536Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis提供查询缓存，用于减轻数据压力，提高数据库性能。<br>Mybatis提供一级缓存和二级缓存。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.png"><br><a id="more"></a><br>一级缓存是SqlSession级别的缓存。在操作数据库时需要构造SqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的SqlSession之间的缓存数据区域是互相不影响的。</p><p>二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"><br>第一次发起查询的时候，先在缓存中查询是否有相应数据，有就直接返回；如果没有则从数据库获取信息并存储在一级缓存中。  </p><p>如果SqlSession执行commit操作（执行插入、更新、删除）时，清空SqlSession中的一级缓存。这是为了让缓存中存储的是最新的信息，避免脏读。  </p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>Mybatis默认支持一级缓存。不需要配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  @Test</div><div class="line">    public void testCacha_1()&#123;</div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user = userMapper.findUserById(1);</div><div class="line">        System.out.println(user);</div><div class="line">//        user.setName(&quot;heh&quot;);</div><div class="line">//        userMapper.updateUserName(user);</div><div class="line">        User user1 = userMapper.findUserById(1);</div><div class="line">        System.out.println(user1);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p><img src="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98debug.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98debug.png"><br>去掉代码中的注释后，输出：<br><img src="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0debug.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0debug.png"></p><p>只用一级缓存时读取出来的值可能不是最新的。<br>例如：SqlSession1查询，SqlSession2修改，SqlSession1再查询，此时会导致SqlSession1第一次查找的结果不是最新的。此时就需要二级缓存了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacha_1_more</span><span class="params">()</span></span>&#123;</div><div class="line">        SqlSession sqlSession1 = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper1 = sqlSession1.getMapper(UserMapper.class);</div><div class="line">        SqlSession sqlSession2 = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper2 = sqlSession2.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user = userMapper1.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user);</div><div class="line"></div><div class="line">        User user1 = <span class="keyword">new</span> User();</div><div class="line">        user1.setName(<span class="string">"zan"</span>);</div><div class="line">        user1.setId(<span class="number">1</span>);</div><div class="line">        userMapper2.updateUserName(user1);</div><div class="line"></div><div class="line">        User user2 = userMapper1.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user2);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p><img src="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E4%B8%8D%E5%8F%8A%E6%97%B6.png" alt="http://ocx5m3vc3.bkt.clouddn.com/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E4%B8%8D%E5%8F%8A%E6%97%B6.png"></p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><h3 id="二级缓存原理"><a href="#二级缓存原理" class="headerlink" title="二级缓存原理"></a>二级缓存原理</h3><p><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86%E5%9B%BE.png"></p><p>开启Mybatis的二级缓存后。</p><p>SqlSession1去查询信息，查询到的信息将会存储到二级缓存中。<br>如果SqlSession3去执行相同mapper下SQL，执行commit提交；将会清空二级缓存。<br>SqlSession去查询信息，现在二级缓存中查找数据。如果存在就直接取出。</p><font color="red">二级缓存的范围更大，多个SqlSession可以共享Mapper的二级缓存区域。</font><h3 id="开启二级缓存"><a href="#开启二级缓存" class="headerlink" title="开启二级缓存"></a>开启二级缓存</h3><ul><li><p>在SqlMapConfig.xml中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure></li><li><p>在UserMapper.xml中开启二级缓存。UserMapper.xml下的sql磁性完成会存储到它的缓存区域。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;mapper namespace=&quot;dao.UserMapper&quot;&gt;</div><div class="line">    &lt;cache /&gt;</div><div class="line">   ...</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure></li><li><p>因为二级缓存存储介质多种多样，不一定在内存。对应的实体需要实现序列化接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public class User implements Serializable&#123;</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacha_2</span><span class="params">()</span></span>&#123;</div><div class="line">        SqlSession sqlSession1 = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper1 = sqlSession1.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user1 = userMapper1.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user1);</div><div class="line"></div><div class="line"><span class="comment">//        User user = new User();</span></div><div class="line"><span class="comment">//        user.setId(2);</span></div><div class="line"><span class="comment">//        user.setName("GG");</span></div><div class="line"><span class="comment">//        userMapper1.updateUserName(user);</span></div><div class="line"></div><div class="line">        sqlSession1.close();</div><div class="line"></div><div class="line"></div><div class="line">        SqlSession sqlSession2 = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper2 = sqlSession2.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user2 = userMapper2.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user2);</div><div class="line"></div><div class="line">        sqlSession2.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="useCache配置"><a href="#useCache配置" class="headerlink" title="useCache配置"></a>useCache配置</h3><p>在statement中设置&lt;font color = ‘red”&gt;useCache=”false”可以禁用当前select的二级缓存，即每次查询都会发出SQL去查询。默认情况是true。<br>如果每次查询都需要最新的数据sql时要禁用二级缓存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findOrderListResultMap&quot; resultMap=&quot;ordersUserMap&quot; useCache=&quot;false&quot;&gt;</div></pre></td></tr></table></figure></p><h3 id="刷新缓存"><a href="#刷新缓存" class="headerlink" title="刷新缓存"></a>刷新缓存</h3><p>刷新缓存就是清空缓存。在mapper的同一个namespace中，如果有其他insert、update、delete操作数据后需要刷新缓存，否则会出现脏读现象。</p><p>设置statement配置中的&lt;font color = ‘red”&gt;flushCache=”true”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;insert id=&quot;insertUser&quot; parameterType=&quot;pojo.User&quot; flushCache=&quot;true&quot;&gt;</div></pre></td></tr></table></figure></p><h3 id="应用场景和局限性"><a href="#应用场景和局限性" class="headerlink" title="应用场景和局限性"></a>应用场景和局限性</h3><ul><li><p>应用场景<br>对于访问多的查询请求且用户对查询结果实时性要求不高，此时可采用mybatis二级缓存技术降低数据库访问量，提高访问速度，业务场景比如：耗时较高的统计分析sql、电话账单查询sql等。<br>实现方法如下：通过设置刷新间隔时间，由mybatis每隔一段时间自动清空缓存，根据数据变化频率设置缓存刷新间隔flushInterval，比如设置为30分钟、60分钟、24小时等，根据需求而定。</p></li><li><p>局限性<br>mybatis二级缓存对细粒度的数据级别的缓存实现不好，比如如下需求：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次都能查询最新的商品信息，此时如果使用mybatis的二级缓存就无法实现当一个商品变化时只刷新该商品的缓存信息而不刷新其它商品的信息，因为mybaits的二级缓存区域以mapper为单位划分，当一个商品信息变化会将所有商品信息的缓存数据全部清空。解决此类问题需要在业务层根据需求对数据有针对性缓存。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mybatis提供查询缓存，用于减轻数据压力，提高数据库性能。&lt;br&gt;Mybatis提供一级缓存和二级缓存。&lt;br&gt;&lt;img src=&quot;http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.png&quot; alt=&quot;http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>延迟加载</title>
    <link href="http://yoursite.com/2018/04/21/Mybatis/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2018/04/21/Mybatis/延迟加载/</id>
    <published>2018-04-21T11:00:48.000Z</published>
    <updated>2018-04-21T13:36:00.622Z</updated>
    
    <content type="html"><![CDATA[<p>resultMap可以实现高级映射（使用association、collection实现一对一以及一对多映射），association、collection具备延迟加载功能。</p><p>延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能。<br><a id="more"></a><br>开启延迟加载需要在SqlMapConfig.xml的setting中设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;settings&gt;</div><div class="line">    &lt;!-- 打开延迟加载 的开关 --&gt;</div><div class="line">    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</div><div class="line">    &lt;!-- 将积极加载改为消极加载即按需要加载 --&gt;</div><div class="line">    &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</div><div class="line">&lt;/settings&gt;</div></pre></td></tr></table></figure></p><p>书写需要的两个satatement </p><ul><li>查询用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findUserLazy&quot; resultMap=&quot;findUserAndCarLazyMap&quot;&gt;</div><div class="line">        SELECT *</div><div class="line">        FROM user</div><div class="line">        WHERE id = #&#123;id&#125;</div><div class="line">    &lt;/select&gt;</div></pre></td></tr></table></figure><ul><li><p>查询拥有的Car  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findCarByUserId&quot; parameterType=&quot;int&quot; resultType=&quot;pojo.Car&quot;&gt;</div><div class="line">        SELECT *</div><div class="line">        FROM car</div><div class="line">        WHERE user_id = #&#123;value&#125;</div><div class="line">    &lt;/select&gt;</div></pre></td></tr></table></figure></li><li><p>书写resultMap  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap id=&quot;findUserAndCarLazyMap&quot; type=&quot;pojo.User&quot;&gt;</div><div class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt;</div><div class="line">        &lt;result property=&quot;name&quot; column=&quot;name&quot;&gt;&lt;/result&gt;</div><div class="line">        &lt;result property=&quot;password&quot; column=&quot;password&quot;&gt;&lt;/result&gt;</div><div class="line">        &lt;!--</div><div class="line">            多了select和column</div><div class="line">            select:会去寻找相应的方法，如果不在本mapper中则需要在前面添加其namespace（我这里是放在本mapper中的）</div><div class="line">            column:根据哪一列去进行查询。</div><div class="line">        --&gt;</div><div class="line">        &lt;association property=&quot;car&quot;</div><div class="line">                     select=&quot;findCarByUserId&quot; </div><div class="line">                     column=&quot;id&quot;</div><div class="line">                     javaType=&quot;pojo.Car&quot;&gt;</div><div class="line"></div><div class="line">        &lt;/association&gt;</div><div class="line">    &lt;/resultMap&gt;</div></pre></td></tr></table></figure></li><li><p>在相应的Mapper接口中书写方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public User findUserLazy(int id);</div></pre></td></tr></table></figure></li><li><p>测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void testFindUserLazyLoding()&#123;</div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</div><div class="line"></div><div class="line">        User user = userMapper.findUserLazy(2);</div><div class="line">        System.out.println(user);</div><div class="line"></div><div class="line">        //System.out.println(user.getCar().toString());</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li></ul><p>PS:这里不知道是我用的IDEA的问题还是怎么的，在输出的时候竟然也执行了第二条sql语句。。。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDdebug.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDdebug.png"></p><center>延迟加载debug</center><br><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis%E4%B8%8D%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDdebug.png" alt="http://ocx5m3vc3.bkt.clouddn.com/mybatis%E4%B8%8D%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDdebug.png"><br><center>不延迟加载debug</center><hr><p>更新：后来发现出现上面第一图的情况是由于在System.out.println(user);会执行第二条SQL。。  需要配置一下设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;setting     name=&quot;lazyLoadTriggerMethods&quot; value=&quot; &quot; /&gt;</div></pre></td></tr></table></figure></p><p>lazyLoadTriggerMethods默认情况下仅仅支持自动将equals,clone,hashCode,toString这几个方法定义为延迟加载的加载触发方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;resultMap可以实现高级映射（使用association、collection实现一对一以及一对多映射），association、collection具备延迟加载功能。&lt;/p&gt;
&lt;p&gt;延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能。&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>动态sql</title>
    <link href="http://yoursite.com/2018/04/21/Mybatis/%E5%8A%A8%E6%80%81sql/"/>
    <id>http://yoursite.com/2018/04/21/Mybatis/动态sql/</id>
    <published>2018-04-21T03:04:41.000Z</published>
    <updated>2018-04-21T03:39:10.740Z</updated>
    
    <content type="html"><![CDATA[<p>mybatis核心。对sql语句进行灵活操作，通过表达式进行判断，对SQL进行灵活拼接、组装。<br><a id="more"></a></p><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><ul><li>mapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserList"</span> <span class="attr">parameterType</span>=<span class="string">"pojp.UserQueryVo"</span></span></div><div class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">"pojo.UserCustom"</span>&gt;</span></div><div class="line">    SELECT * FROM user</div><div class="line">    <span class="comment">&lt;!--  where 可以自动去掉条件中的第一个and --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom!=null"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.sex!=null and userCustom.sex != '' "</span>&gt;</span></div><div class="line">               AND user.sex=#&#123;userCustom.sex&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.username!=null and userCustom.username != '' "</span>&gt;</span></div><div class="line">               AND user.username LIKE '%$&#123;userCustom.username&#125;%'</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p>注意：如果传入的userCustom为null<br>那么查询语句会变成<font color="red">SELECT * FROM user</font></p><h3 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h3><p>将上面实现的动态sql判断代码块抽取出来，组成一个sql片段。其他的statement中就可以应用sql片段。</p><ul><li><p>定义SQL片段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 定义sql片段</span></div><div class="line"><span class="comment">id：sql片段的唯 一标识</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">经验：是基于单表来定义sql片段，这样话这个sql片段可重用性才高</span></div><div class="line"><span class="comment">在sql片段中不要包括 where</span></div><div class="line"><span class="comment"> --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"query_user_where"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom!=null"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.sex!=null and userCustom.sex!=''"</span>&gt;</span></div><div class="line">            AND user.sex = #&#123;userCustom.sex&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustom.username!=null and userCustom.username!=''"</span>&gt;</span></div><div class="line">            AND user.username LIKE '%$&#123;userCustom.username&#125;%'</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>引用SQL片段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserList"</span> <span class="attr">parameterType</span>=<span class="string">"pojo.UserQueryVo"</span></span></div><div class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">"pojo.UserCustom"</span>&gt;</span></div><div class="line">    SELECT * FROM user</div><div class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 引用sql片段 的id，如果refid指定的id不在本mapper文件中，需要前边加namespace --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"query_user_where"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 在这里还要引用其它的sql片段  --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h3 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h3><p>向SQL传递数组或List，mybatis使用foreach解析<br>多id条件查询常有以下两种sql写法：  </p><ul><li><font color="red">SELECT * FROM USER WHERE id=1 OR id=10 OR id=16</font>  </li><li><font color="red">SELECT * FROM USER WHERE id IN(1,10,16)</font></li></ul><p>在输入参数类型中添加<font color="red">List<integer> ids</integer></font>传入多个id<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserQueryVo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//传入多个id</span></div><div class="line">    <span class="keyword">private</span> List&lt;Integer&gt; ids;</div><div class="line"></div><div class="line">    getter、setter方法</div><div class="line">    。。。</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>修改mapper.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids!=null"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用 foreach遍历传入ids</span></div><div class="line"><span class="comment">    collection：指定输入 对象中集合属性</span></div><div class="line"><span class="comment">    item：每个遍历生成对象中</span></div><div class="line"><span class="comment">    open：开始遍历时拼接的串</span></div><div class="line"><span class="comment">    close：结束遍历时拼接的串</span></div><div class="line"><span class="comment">    separator：遍历的两个对象中需要拼接的串</span></div><div class="line"><span class="comment">     --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用实现下边的sql拼接：</span></div><div class="line"><span class="comment">     AND (id=1 OR id=10 OR id=16)</span></div><div class="line"><span class="comment">     --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"user_id"</span> <span class="attr">open</span>=<span class="string">"AND ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 每个遍历需要拼接的串 --&gt;</span></div><div class="line">        id=#&#123;user_id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 实现  “ and id IN(1,10,16)”拼接 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;foreach collection="ids" item="user_id" open="and id IN(" close=")" separator=","&gt;</span></div><div class="line"><span class="comment">        每个遍历需要拼接的串</span></div><div class="line"><span class="comment">        #&#123;user_id&#125;</span></div><div class="line"><span class="comment">    &lt;/foreach&gt; --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mybatis核心。对sql语句进行灵活操作，通过表达式进行判断，对SQL进行灵活拼接、组装。&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>phpStudy升级MySQL</title>
    <link href="http://yoursite.com/2018/04/20/%E9%81%87%E5%88%B0%E8%BF%87%E7%9A%84%E5%9D%91/phpStudy%E5%8D%87%E7%BA%A7MySQL/"/>
    <id>http://yoursite.com/2018/04/20/遇到过的坑/phpStudy升级MySQL/</id>
    <published>2018-04-20T08:35:38.000Z</published>
    <updated>2018-04-20T15:33:54.640Z</updated>
    
    <content type="html"><![CDATA[<p>今天在导入别人给我的sql文件的时候，怎么也导不进去。后来才知道我用的phpStudy的SQL版本太低了。于是需要升级一下。</p><p>首先从官网下载MySql安装包<a href="https://dev.mysql.com/downloads/file/?id=467269" title="https://dev.mysql.com/downloads/file/?id=467269" target="_blank" rel="external">https://dev.mysql.com/downloads/file/?id=467269</a></p><p>步骤：<br>1.最好先备份一份原来phpStudy的MYSQL文件夹<br>2.把下载的 MySQL 压缩文件解压至 phpStudy 下的 MySQL目录，复制 my-default.ini ，重命名为 my.ini。<br>3.打开 my.ini，找到 #basedir 处编辑：  </p><pre><code>basedir = I:\phpStudy\MySQL  datadir = I:\phpStudy\MySQL\data  </code></pre>注：有任何错误都是因为以上路径配置错误导致的<a id="more"></a>4.把 MySQL 安装路径添加至系统环境变量  PATH=…….;I:\phpStudy\MySQL\bin5.在 cmd 下进入 MySQL 的 bin 目录（我的是 I:\phpStudy\MySQL\bin），执行：  初始化数据库：  <pre><code>mysqld --initialize</code></pre>  <p>安装服务：  </p><pre><code>mysqld -install</code></pre> <p>启动服务：  </p><pre><code>net start MySQL</code></pre><p>6.打开 my.ini，找到 [mysqld]，在下面添加：<br>skip-grant-tables(此参数用于忘记mysql密码)<br>此时使用 root 账号，密码处按回车即可登录。</p><p>7.修改密码：  </p><pre><code>mysql>update mysql.user set authentication_string=password('新密码') where user='root' and Host ='localhost';</code></pre>  8.刷新权限：  <pre><code>FLUSH PRIVILEGES;</code></pre>  9.注释掉 my.ini 中刚才添加的skip-grant-tables重新登录。10.更新用户信息：  <pre><code>mysql> ALTER USER USER() IDENTIFIED BY '新密码';</code></pre>11.查看 mySQL 版本：  <pre><code>mysql> select version();  +-----------+  | version() |  +-----------+  | 5.7.17 |  +-----------+  </code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在导入别人给我的sql文件的时候，怎么也导不进去。后来才知道我用的phpStudy的SQL版本太低了。于是需要升级一下。&lt;/p&gt;
&lt;p&gt;首先从官网下载MySql安装包&lt;a href=&quot;https://dev.mysql.com/downloads/file/?id=467269&quot; title=&quot;https://dev.mysql.com/downloads/file/?id=467269&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://dev.mysql.com/downloads/file/?id=467269&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;步骤：&lt;br&gt;1.最好先备份一份原来phpStudy的MYSQL文件夹&lt;br&gt;2.把下载的 MySQL 压缩文件解压至 phpStudy 下的 MySQL目录，复制 my-default.ini ，重命名为 my.ini。&lt;br&gt;3.打开 my.ini，找到 #basedir 处编辑：  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basedir = I:\phpStudy\MySQL  
datadir = I:\phpStudy\MySQL\data  
&lt;/code&gt;&lt;/pre&gt;
注：有任何错误都是因为以上路径配置错误导致的
    
    </summary>
    
      <category term="软件" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="坑" scheme="http://yoursite.com/tags/%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>输入映射和输出映射</title>
    <link href="http://yoursite.com/2018/04/20/Mybatis/%E8%BE%93%E5%85%A5%E6%98%A0%E5%B0%84%E5%92%8C%E8%BE%93%E5%87%BA%E6%98%A0%E5%B0%84/"/>
    <id>http://yoursite.com/2018/04/20/Mybatis/输入映射和输出映射/</id>
    <published>2018-04-20T05:10:35.000Z</published>
    <updated>2018-04-21T04:02:36.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="输入映射"><a href="#输入映射" class="headerlink" title="输入映射"></a>输入映射</h2><p>Mybatis映射文件通过<font color="red">parameterType</font>指定输入参数的类型，类型可以是  </p><ul><li>简单类型</li><li>hashmap</li><li>pojo的包装类型</li></ul><p>在xml映射文件中sql语句会根据OGNL自动获取传入类型中的属性值。<br>如果传入类型中没有相应的属性值，就会报找不到对应属性的错。  </p><p>即使传入类型的具体对象中的相应属性为null，也并不会报错。因为Mybatis使用的是动态sql，如果没有设置某个值，条件就不会拼接在sql中去。<br><a id="more"></a></p><h2 id="输出映射"><a href="#输出映射" class="headerlink" title="输出映射"></a>输出映射</h2><p>输入映射主要有两种方式： </p><ul><li><font color="red">resultType</font></li><li><font color="red">resultMap</font></li></ul><h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><ul><li>使用<font color="red">resultType</font>进行输出映射时，只有查询出来的列名和pojo中的属性名一致，才能映射成功。<ul><li>列名与pojo的属性名<b>只要有一个不一致</b>就不会创建pojo对象，此时会报错。</li><li>列名与pojo的属性名<b>只要有一个一致</b>就会创建一个pojo对象并返回。</li></ul></li></ul><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p>如果查询出来的列名和pojo的属性名不一致，可以通过定义一个resultMap对列名和属性名之间进行映射。<br>1.定义resultMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap type=&quot;user&quot; id=&quot;userResultMap&quot;&gt;</div><div class="line">        &lt;!-- id表示查询结果集中唯一标识 </div><div class="line">        column：查询出来的列名</div><div class="line">        property：type指定的pojo类型中的属性名</div><div class="line">        最终resultMap对column和property作一个映射关系 （对应关系）</div><div class="line">        --&gt;</div><div class="line">        &lt;id column=&quot;id_&quot; property=&quot;id&quot;/&gt;</div><div class="line">        &lt;!-- </div><div class="line">        result：对普通名映射定义</div><div class="line">        column：查询出来的列名</div><div class="line">        property：type指定的pojo类型中的属性名</div><div class="line">        最终resultMap对column和property作一个映射关系 （对应关系）</div><div class="line">         --&gt;</div><div class="line">        &lt;result column=&quot;username_&quot; property=&quot;username&quot;/&gt;</div><div class="line">        &lt;!--</div><div class="line">        一对一映射</div><div class="line">        association：用于映射关联查询单个对象的信息</div><div class="line">        property：要将关联查询的用户信息映射到Orders中哪个属性</div><div class="line">        javaType：映射到user的哪个属性</div><div class="line">       --&gt;</div><div class="line">       &lt;!--</div><div class="line">       一对多映射</div><div class="line">       collection：对关联查询到多条记录映射到集合对象中</div><div class="line">       property：将关联查询到多条记录映射到com.iot.mybatis.po.Orders哪个属性</div><div class="line">       ofType：指定映射到list集合属性中pojo的类型</div><div class="line">       --&gt;</div><div class="line">     &lt;/resultMap&gt;</div></pre></td></tr></table></figure><p>2.使用resultMap作为statement的输出映射类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 使用resultMap进行输出映射</div><div class="line">        resultMap：指定定义的resultMap的id，如果这个resultMap在其它的mapper文件，前边需要加namespace</div><div class="line">        --&gt;</div><div class="line">    &lt;select id=&quot;findUserByIdResultMap&quot; parameterType=&quot;int&quot; resultMap=&quot;userResultMap&quot;&gt;</div><div class="line">        SELECT id id_,username username_ FROM USER WHERE id=#&#123;value&#125;</div><div class="line">    &lt;/select&gt;</div></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>使用resultMap多表查询时，可能会导致重复字段赋值错误。<br>解决方法：在查询时定义别名。resultMap中根据别名列来映射</p><hr><p>resultType和resultMap区别：</p><ul><li>resultType：使用resultType实现较为简单，如果pojo中没有包括查询出来的列名，需要增加列名对应的属性，即可完成映射。如果没有查询结果的特殊要求建议使用resultType。</li><li>resultMap：需要单独定义resultMap，实现有点麻烦，如果对查询结果有特殊的要求，使用resultMap可以完成将关联查询映射pojo的属性中。</li><li>resultMap可以实现延迟加载，resultType无法实现延迟加载。</li></ul><hr><p>association：</p><ul><li>作用：将关联查询信息映射到一个pojo对象中。  </li><li>场合：为了方便查询关联信息可以使用association将关联订单信息映射为用户对象的pojo属性中，比如：查询订单及关联用户信息。</li></ul><p>collection：  </p><ul><li>作用：将关联查询信息映射到一个list集合中。</li><li>场合：为了方便查询遍历关联信息可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块及模块下的菜单，可使用collection将模块映射到模块list中，将菜单列表映射到模块对象的菜单list属性中，这样的作的目的也是方便对查询结果集进行遍历查询。如果使用resultType无法将查询结果映射到list集合中。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;输入映射&quot;&gt;&lt;a href=&quot;#输入映射&quot; class=&quot;headerlink&quot; title=&quot;输入映射&quot;&gt;&lt;/a&gt;输入映射&lt;/h2&gt;&lt;p&gt;Mybatis映射文件通过&lt;font color=&quot;red&quot;&gt;parameterType&lt;/font&gt;指定输入参数的类型，类型可以是  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单类型&lt;/li&gt;
&lt;li&gt;hashmap&lt;/li&gt;
&lt;li&gt;pojo的包装类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在xml映射文件中sql语句会根据OGNL自动获取传入类型中的属性值。&lt;br&gt;如果传入类型中没有相应的属性值，就会报找不到对应属性的错。  &lt;/p&gt;
&lt;p&gt;即使传入类型的具体对象中的相应属性为null，也并不会报错。因为Mybatis使用的是动态sql，如果没有设置某个值，条件就不会拼接在sql中去。&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>SqlMapConfig</title>
    <link href="http://yoursite.com/2018/04/20/Mybatis/SqlMapConfig/"/>
    <id>http://yoursite.com/2018/04/20/Mybatis/SqlMapConfig/</id>
    <published>2018-04-20T03:29:14.000Z</published>
    <updated>2018-04-20T05:09:00.417Z</updated>
    
    <content type="html"><![CDATA[<p>SqlMapConfig.xml中配置的内容和顺序： </p><ul><li>properties(属性)</li><li>settings(全局配置参数)</li><li><b>typeAliases(类型别名)</b></li><li><em>objectFactory(对象工厂)</em></li><li><em>plugins(插件)</em></li><li>environments(环境集合属性对象)  <ul><li>environment(环境属性对象)<ul><li>transactionManager(事务管理)</li><li>dataSource(数据源)</li></ul></li></ul></li><li><b>mappers(映射器）</b></li></ul><a id="more"></a><h3 id="properties-属性"><a href="#properties-属性" class="headerlink" title="properties(属性)"></a>properties(属性)</h3><p>将数据库连接参数单独配置在db.properties中，可以避免xml硬编码，方便以后更改以及其他文件使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbc.driver=com.mysql.jdbc.Driver</div><div class="line">jdbc.url=jdbc:mysql:////mybatis?characterEncoding=utf-8</div><div class="line">jdbc.username=root</div><div class="line">jdbc.password=123</div></pre></td></tr></table></figure></p><p>在sqlMapConfig.xml中加载属性文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--properties中还可以配置一些属性名和属性值  --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;property name="jdbc.driver" value=""/&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure></p><p><font color="red">Mybatis加载资源属性顺序：(后面加载的会覆盖前面）</font>  </p><ol><li>在<b>properties</b>元素体内定义的属性</li><li><b>properties</b>元素中resource或url加载的属性</li><li><b>parameterType</b>传递的属性</li></ol><h3 id="settings-全局参数配置"><a href="#settings-全局参数配置" class="headerlink" title="settings(全局参数配置)"></a>settings(全局参数配置)</h3><p>Mybatis框架运行时的一些参数。比如：二级缓存、延迟加载等<br>官方文档：<a href="http://www.mybatis.org/mybatis-3/configuration.html#settings" title="http://www.mybatis.org/mybatis-3/configuration.html#settings" target="_blank" rel="external">mybatis-settings</a></p><h3 id="typeAliases-类型别名"><a href="#typeAliases-类型别名" class="headerlink" title="typeAliases(类型别名)"></a>typeAliases(类型别名)</h3><p><font color="red">parameterType</font> 指定输入参数的类型  </p><p><font color="red">resultType</font> 指定输出参数的映射类型<br>每次都要输入全名路径太过于麻烦,类型别名简化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 别名定义 --&gt;</div><div class="line">&lt;typeAliases&gt;</div><div class="line"></div><div class="line">    &lt;!-- 针对单个别名定义</div><div class="line">    type：类型的路径</div><div class="line">    alias：别名</div><div class="line">     --&gt;</div><div class="line">    &lt;!-- &lt;typeAlias type=&quot;Pojo.User&quot; alias=&quot;user&quot;/&gt; --&gt;</div><div class="line">    &lt;!-- 批量别名定义</div><div class="line">    指定包名，mybatis自动扫描包中的po类，自动定义别名，别名就是类名（首字母大写或小写都可以）</div><div class="line">    --&gt;</div><div class="line">    &lt;package name=&quot;Pojo&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/typeAliases&gt;</div></pre></td></tr></table></figure></p><p>具体参考官网文档：<a href="http://www.mybatis.org/mybatis-3/configuration.html#typeAliases" title="http://www.mybatis.org/mybatis-3/configuration.html#typeAliases" target="_blank" rel="external">typeAliases</a></p><p>Mybatis默认支持的别名 </p><center>（8大基本类型及其包装类+Data+大数类型） </center><table><thead><tr><th>别名</th><th>映射的类型   </th></tr></thead><tbody><tr><td>_byte</td><td>byte  </td></tr><tr><td>_long</td><td>long  </td></tr><tr><td>_short</td><td>short  </td></tr><tr><td>_int</td><td>int  </td></tr><tr><td>_integer</td><td>int  </td></tr><tr><td>_double</td><td>double  </td></tr><tr><td>_float</td><td>float  </td></tr><tr><td>_boolean</td><td>boolean  </td></tr><tr><td>string</td><td>String  </td></tr><tr><td>byte</td><td>Byte  </td></tr><tr><td>long</td><td>Long  </td></tr><tr><td>short</td><td>Short  </td></tr><tr><td>int</td><td>Integer  </td></tr><tr><td>integer</td><td>Integer  </td></tr><tr><td>double</td><td>Double  </td></tr><tr><td>float</td><td>Float  </td></tr><tr><td>boolean</td><td>Boolean  </td></tr><tr><td>date</td><td>Date  </td></tr><tr><td>decimal</td><td>BigDecimal  </td></tr><tr><td>bigdecimal</td><td>BigDecimal  </td></tr></tbody></table><h3 id="typeHandlers-类型处理器"><a href="#typeHandlers-类型处理器" class="headerlink" title="typeHandlers(类型处理器)"></a>typeHandlers(类型处理器)</h3><p>mybatis中通过typeHandlers完成jdbc类型和java类型的转换。<br>参考：<a href="http://www.mybatis.org/mybatis-3/configuration.html#typeHandlers" title="http://www.mybatis.org/mybatis-3/configuration.html#typeHandlers" target="_blank" rel="external">typeHandlers</a></p><h3 id="mappers-映射配置"><a href="#mappers-映射配置" class="headerlink" title="mappers(映射配置)"></a>mappers(映射配置)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!--通过resource方法一次加载一个映射文件 --&gt;</div><div class="line">&lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt;</div><div class="line"></div><div class="line">&lt;!--通过mapper接口加载单个mapper--&gt;</div><div class="line">&lt;mapper class=&quot;mapper.UserMapper&quot;/&gt;</div><div class="line"></div><div class="line">&lt;!-- 批量加载mapper(推荐使用)</div><div class="line">        指定mapper接口的包名，mybatis自动扫描包下边所有mapper接口进行加载</div><div class="line">        遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录 中</div><div class="line">        上边规范的前提是：使用的是mapper代理方法</div><div class="line">         --&gt;</div><div class="line">&lt;package name=&quot;mapper&quot;/&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SqlMapConfig.xml中配置的内容和顺序： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;properties(属性)&lt;/li&gt;
&lt;li&gt;settings(全局配置参数)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;typeAliases(类型别名)&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;objectFactory(对象工厂)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;plugins(插件)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;environments(环境集合属性对象)  &lt;ul&gt;
&lt;li&gt;environment(环境属性对象)&lt;ul&gt;
&lt;li&gt;transactionManager(事务管理)&lt;/li&gt;
&lt;li&gt;dataSource(数据源)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;mappers(映射器）&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis--原始dao和mapper代理方法</title>
    <link href="http://yoursite.com/2018/04/20/Mybatis/Mybatis-%E5%8E%9F%E5%A7%8Bdao%E5%92%8Cmapper%E4%BB%A3%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/20/Mybatis/Mybatis-原始dao和mapper代理方法/</id>
    <published>2018-04-20T01:16:36.000Z</published>
    <updated>2018-04-20T01:46:07.759Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>SqlSessionFactoryBuilder<br>通过<font color="red">SqlSessionFactoryBuilder</font>创建会话工厂<font color="red">SqlSessionFactory</font>。将<font color="red">SqlSessionFactoryBuilder</font>当成一个工具类使用即可，不需要使用单例管理<font color="red">SqlSessionFactoryBuilder</font>。在创建<font color="red">SqlSessionFactory</font>时候，只需要new一次<font color="red">SqlSessionFactoryBuilder</font>即可。</p></li><li><p>SqlSessionFactory<br>通过<font color="red">SqlSessionFactory</font>创建<font color="red">SqlSession</font>；由于<font color="red">SqlSessionFactory</font>是线程安全的，应该在应用执行期间都存在，所以在应用运行期间不要重复创建多次，建议使用单例模式。</p></li><li><p>SqlSession<br><font color="red">SqlSession</font>是应用程序和持久层之间执行交互操作的一个单线程对象。<font color="red">SqlSession</font>中提供了许多操作数据库的方法。<br><font color="red">SqlSession</font>是线程不安全的。<br>使用完<font color="red">SqlSession</font>要确保在finally块中关闭它。</p><a id="more"></a><h2 id="原始dao接口开发"><a href="#原始dao接口开发" class="headerlink" title="原始dao接口开发"></a>原始dao接口开发</h2><p>程序员需要写dao接口和dao实现类  </p><h3 id="dao接口"><a href="#dao接口" class="headerlink" title="dao接口"></a>dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="dao接口实现类"><a href="#dao接口实现类" class="headerlink" title="dao接口实现类"></a>dao接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//使用构造方法注入SqlSessionFactory</span></div><div class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        User user = sqlSession.selectOne(<span class="string">"test.findUserById"</span>,id);</div><div class="line">        sqlSession.close();</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        List&lt;User&gt; list = sqlSession.selectList(<span class="string">"test.findUserByName"</span>,name);</div><div class="line">        sqlSession.close();</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_2</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="comment">//mybatis配置文件</span></div><div class="line">        String resource = <span class="string">"sqlMapConfig.xml"</span>;</div><div class="line">        <span class="comment">//得到配置文件流</span></div><div class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</div><div class="line">        <span class="comment">//创建会话工厂</span></div><div class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDao</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="comment">//创建UserDao的对象</span></div><div class="line">        UserDao userDao = <span class="keyword">new</span> UserDaoImpl(sqlSessionFactory);</div><div class="line">        User user = userDao.findUserById(<span class="number">1</span>);</div><div class="line">        System.out.println(user);</div><div class="line">        List&lt;User&gt; list = userDao.findUserByName(<span class="string">"ho"</span>);</div><div class="line">        System.out.println(list);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="总结原始dao开发问题"><a href="#总结原始dao开发问题" class="headerlink" title="总结原始dao开发问题"></a>总结原始dao开发问题</h3><p>1.dao接口实现类方法中存在大量的模板方法。<br>2.调用SqlSession方法时传入参数硬编码。<br>3.由于SqlSession方法使用泛型，即使变量类型传入错误，在编译阶段也不会报错，不利于程序员开发。</p><hr><h2 id="mapper代理方法"><a href="#mapper代理方法" class="headerlink" title="mapper代理方法"></a>mapper代理方法</h2><p>程序员只需要mapper接口(相当于dao接口)<br>程序员还需要编写mapper.xml映射文件<br>程序员编写mapper接口需要遵循一些开发规范，Mybatis可以自动生成mapper接口实现类代理对象。</p><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><ul><li><p>在mapper.xml中namespace等于mapper接口地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment"> namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离</span></div><div class="line"><span class="comment"> 注意：使用mapper代理方法开发，namespace有特殊重要的作用,namespace等于mapper接口地址</span></div><div class="line"><span class="comment"> --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"mapper.UserMapper"</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>mapper.java接口中的方法名和mapper.xml中statement的id一致  </p></li><li>mapper.java接口中的方法输入参数类型和mapper.xml中statement的parameterType指定的类型一致。  </li><li>mapper.java接口中的方法返回值类型和mapper.xml中statement的resultType指定的类型一致。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;SqlSessionFactoryBuilder&lt;br&gt;通过&lt;font color=&quot;red&quot;&gt;SqlSessionFactoryBuilder&lt;/font&gt;创建会话工厂&lt;font color=&quot;red&quot;&gt;SqlSessionFactory&lt;/font&gt;。将&lt;font color=&quot;red&quot;&gt;SqlSessionFactoryBuilder&lt;/font&gt;当成一个工具类使用即可，不需要使用单例管理&lt;font color=&quot;red&quot;&gt;SqlSessionFactoryBuilder&lt;/font&gt;。在创建&lt;font color=&quot;red&quot;&gt;SqlSessionFactory&lt;/font&gt;时候，只需要new一次&lt;font color=&quot;red&quot;&gt;SqlSessionFactoryBuilder&lt;/font&gt;即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SqlSessionFactory&lt;br&gt;通过&lt;font color=&quot;red&quot;&gt;SqlSessionFactory&lt;/font&gt;创建&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;；由于&lt;font color=&quot;red&quot;&gt;SqlSessionFactory&lt;/font&gt;是线程安全的，应该在应用执行期间都存在，所以在应用运行期间不要重复创建多次，建议使用单例模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SqlSession&lt;br&gt;&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;是应用程序和持久层之间执行交互操作的一个单线程对象。&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;中提供了许多操作数据库的方法。&lt;br&gt;&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;是线程不安全的。&lt;br&gt;使用完&lt;font color=&quot;red&quot;&gt;SqlSession&lt;/font&gt;要确保在finally块中关闭它。&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis入门程序2</title>
    <link href="http://yoursite.com/2018/04/19/Mybatis/Mybatis%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F2/"/>
    <id>http://yoursite.com/2018/04/19/Mybatis/Mybatis入门程序2/</id>
    <published>2018-04-19T14:56:00.000Z</published>
    <updated>2018-04-20T01:03:06.068Z</updated>
    
    <content type="html"><![CDATA[<p>在User.xml文件中增加增删改三个功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;!--</div><div class="line">       parameterType 为实体对象</div><div class="line">       #&#123;&#125; 会使用OGNL来获得同名的值</div><div class="line">       insert update delete 默认返回的都是影响的条数</div><div class="line">   --&gt;</div><div class="line">   &lt;insert id=&quot;insertUser&quot; parameterType=&quot;Pojo.User&quot;&gt;</div><div class="line">       &lt;!--</div><div class="line">           如果要求返回刚插入的id值则需要增加&lt;selectKey&gt;</div><div class="line"></div><div class="line">           SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键</div><div class="line">           keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性</div><div class="line">           order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序</div><div class="line">           resultType：指定SELECT LAST_INSERT_ID()的结果类型</div><div class="line"></div><div class="line">           //也可以使用以下这种方法</div><div class="line">           useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;</div><div class="line"></div><div class="line">           以上两种方法可以自动将id赋值给传入的那个实体相应的属性中去</div><div class="line">       --&gt;</div><div class="line">       &lt;selectKey keyProperty=&quot;id&quot; order=&quot;AFTER&quot; resultType=&quot;java.lang.Integer&quot;&gt;</div><div class="line">           SELECT LAST_INSERT_ID()</div><div class="line">       &lt;/selectKey&gt;</div><div class="line">       INSERT INTO user(name,password)</div><div class="line">       VALUES (#&#123;name&#125;,#&#123;password&#125;)</div><div class="line"></div><div class="line">   &lt;/insert&gt;</div><div class="line"></div><div class="line">   &lt;!--更新用户信息，id必须存在--&gt;</div><div class="line">   &lt;update id=&quot;updateUser&quot; parameterType=&quot;Pojo.User&quot;&gt;</div><div class="line">       UPDATE user</div><div class="line">       SET password = #&#123;password&#125;</div><div class="line">       WHERE id = #&#123;id&#125;</div><div class="line">   &lt;/update&gt;</div><div class="line"></div><div class="line">   &lt;!--根据id删除用户--&gt;</div><div class="line">   &lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;</div><div class="line">       DELETE FROM</div><div class="line">       user</div><div class="line">       WHERE id = #&#123;id&#125;</div><div class="line">   &lt;/delete&gt;</div></pre></td></tr></table></figure></p><a id="more"></a><p>在测试类中添加相应的三个测试方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//增加测试</div><div class="line">      User user = new User();</div><div class="line">      user.setName(&quot;JJ&quot;);</div><div class="line">      user.setPassword(&quot;JJ&quot;);</div><div class="line">      sqlSession.insert(&quot;test.insertUser&quot;,user);</div><div class="line">      System.out.println(user.getId());</div><div class="line"></div><div class="line">//更新测试</div><div class="line">      User user = new User();</div><div class="line">      user.setId(4);</div><div class="line">      user.setName(&quot;JJ&quot;);</div><div class="line">      user.setPassword(&quot;KK&quot;);</div><div class="line">      sqlSession.update(&quot;test.updateUser&quot;,user);</div><div class="line"></div><div class="line">      //删除测试</div><div class="line">sqlSession.delete(&quot;test.deleteUser&quot;,4);</div></pre></td></tr></table></figure></p><h3 id="mybatis和hibernate本质区别和应用场景"><a href="#mybatis和hibernate本质区别和应用场景" class="headerlink" title="mybatis和hibernate本质区别和应用场景"></a>mybatis和hibernate本质区别和应用场景</h3><ul><li>hibernate  </li></ul><p>是一个标准ORM框架（对象关系映射）。入门门槛较高的，不需要程序写sql，sql语句自动生成了。对sql语句进行优化、修改比较困难的。<font color="red">hibernate对象/关系映射能力强，数据库无关性好。</font></p><p>应用场景：适用与需求变化不多的中小型项目，比如：后台管理系统，erp、orm、oa。。</p><ul><li>mybatis</li></ul><p>专注是sql本身，需要程序员自己编写sql语句，sql修改、优化比较方便。mybatis是一个不完全的ORM框架，虽然程序员自己写sql，mybatis也可以实现映射（输入映射、输出映射）。<font color="red">但是灵活的前提是Mybatis无法做到数据库无关性。</font></p><p>应用场景：适用与需求变化较多的项目，比如：互联网项目。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在User.xml文件中增加增删改三个功能&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!--&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       parameterType 为实体对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       #&amp;#123;&amp;#125; 会使用OGNL来获得同名的值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       insert update delete 默认返回的都是影响的条数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;insert id=&amp;quot;insertUser&amp;quot; parameterType=&amp;quot;Pojo.User&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;!--&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           如果要求返回刚插入的id值则需要增加&amp;lt;selectKey&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           resultType：指定SELECT LAST_INSERT_ID()的结果类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           //也可以使用以下这种方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           useGeneratedKeys=&amp;quot;true&amp;quot; keyProperty=&amp;quot;id&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           以上两种方法可以自动将id赋值给传入的那个实体相应的属性中去&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;selectKey keyProperty=&amp;quot;id&amp;quot; order=&amp;quot;AFTER&amp;quot; resultType=&amp;quot;java.lang.Integer&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           SELECT LAST_INSERT_ID()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;/selectKey&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       INSERT INTO user(name,password)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       VALUES (#&amp;#123;name&amp;#125;,#&amp;#123;password&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;/insert&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;!--更新用户信息，id必须存在--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;update id=&amp;quot;updateUser&amp;quot; parameterType=&amp;quot;Pojo.User&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       UPDATE user&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       SET password = #&amp;#123;password&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       WHERE id = #&amp;#123;id&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;/update&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;!--根据id删除用户--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;delete id=&amp;quot;deleteUser&amp;quot; parameterType=&amp;quot;int&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       DELETE FROM&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       user&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       WHERE id = #&amp;#123;id&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;/delete&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis入门程序</title>
    <link href="http://yoursite.com/2018/04/19/Mybatis/Mybatis%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/04/19/Mybatis/Mybatis入门程序/</id>
    <published>2018-04-19T03:15:00.000Z</published>
    <updated>2018-04-20T00:52:04.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h3><p>在IDEA中新建一个Java项目。并加入jar包，工程结构如图。<br><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84.png" alt="">  </p><a id="more"></a><ul><li>在config文件夹中创建出所需要的配置文件</li><li>log4j.properties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Global logging configuration</div><div class="line">log4j.rootLogger=DEBUG, stdout</div><div class="line"># Console output...</div><div class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</div></pre></td></tr></table></figure><ul><li><p>SqlMapConfig.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE configuration</div><div class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</div><div class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;!-- 和spring整合后 environments配置将废除 --&gt;</div><div class="line">    &lt;environments default=&quot;development&quot;&gt;</div><div class="line">        &lt;environment id=&quot;development&quot;&gt;</div><div class="line">            &lt;!-- 使用jdbc事务管理 --&gt;</div><div class="line">            &lt;transactionManager type=&quot;JDBC&quot; /&gt;</div><div class="line">            &lt;!-- 数据库连接池 --&gt;</div><div class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</div><div class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</div><div class="line">                &lt;property name=&quot;url&quot;</div><div class="line">                          value=&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot; /&gt;</div><div class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</div><div class="line">                &lt;property name=&quot;password&quot; value=&quot;root&quot; /&gt;</div><div class="line">            &lt;/dataSource&gt;</div><div class="line">        &lt;/environment&gt;</div><div class="line">    &lt;/environments&gt;</div><div class="line">    &lt;!--加载你书写的xml文件--&gt;</div><div class="line">    &lt;mappers&gt;</div><div class="line">        &lt;mapper resource=&quot;sqlmapper/User.xml&quot;&gt;&lt;/mapper&gt;</div><div class="line">    &lt;/mappers&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></li><li><p>User.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE mapper</div><div class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</div><div class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</div><div class="line">&lt;!-- namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离</div><div class="line"> 注意：使用mapper代理方法开发，namespace有特殊重要的作用</div><div class="line"> --&gt;</div><div class="line">&lt;mapper namespace=&quot;test&quot;&gt;</div><div class="line">    &lt;!--</div><div class="line">         根据id查询单条数据</div><div class="line">         id方法名，与dao类的方法名相同</div><div class="line">         parameterType输入参数的类型</div><div class="line">         resultType指定返回类型</div><div class="line">         #&#123;&#125;接受参数占位符</div><div class="line">    --&gt;</div><div class="line">    &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;Pojo.User&quot;&gt;</div><div class="line">        SELECT *</div><div class="line">        FROM user</div><div class="line">        WHERE id = #&#123;id&#125;</div><div class="line">    &lt;/select&gt;</div><div class="line"></div><div class="line">    &lt;!--</div><div class="line">        根据用户名模糊查询多条数据</div><div class="line">        resultType返回的是单条数据的类型</div><div class="line">        $&#123;&#125;:表示拼接sql串，将接收到的参数不加任何修饰的拼接到sql中（可能会引起SQL注入）</div><div class="line">    --&gt;</div><div class="line">    &lt;select id=&quot;findUserByName&quot; parameterType=&quot;String&quot; resultType=&quot;Pojo.User&quot;&gt;</div><div class="line">        SELECT *</div><div class="line">        FROM  user</div><div class="line">        WHERE name LIKE &apos;%$&#123;value&#125;%&apos;</div><div class="line">    &lt;/select&gt;</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure></li><li><p>User实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Pojo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</div><div class="line">                <span class="string">"id="</span> + id +</div><div class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>编写测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Pojo.User;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.util.List;<span class="keyword">import</span> java.io.InputStream;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by huzhibin on 2018/4/19.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="comment">//mybatis配置文件</span></div><div class="line">        String resource = <span class="string">"sqlMapConfig.xml"</span>;</div><div class="line">        <span class="comment">//得到配置文件流</span></div><div class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</div><div class="line">        <span class="comment">//创建会话工厂</span></div><div class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUserByIdTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">//通过工厂得到Session</span></div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        <span class="comment">//操作数据库</span></div><div class="line">        User user = sqlSession.selectOne(<span class="string">"test.findUserById"</span>,<span class="number">1</span>);</div><div class="line">        System.out.println(user);</div><div class="line">        <span class="comment">//释放资源</span></div><div class="line">        sqlSession.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUserByNameTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">//通过工厂得到Session</span></div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        <span class="comment">//操作数据库</span></div><div class="line">        List&lt;User&gt; list = sqlSession.selectList(<span class="string">"test.findUserByName"</span>,<span class="string">"ho"</span>);</div><div class="line">        System.out.println(list);</div><div class="line">        <span class="comment">//释放资源</span></div><div class="line">        sqlSession.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意测试返回集合类型的时候使用的是selectList，如果使用selectOne会报错：查询有多个结果</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;工程结构&quot;&gt;&lt;a href=&quot;#工程结构&quot; class=&quot;headerlink&quot; title=&quot;工程结构&quot;&gt;&lt;/a&gt;工程结构&lt;/h3&gt;&lt;p&gt;在IDEA中新建一个Java项目。并加入jar包，工程结构如图。&lt;br&gt;&lt;img src=&quot;http://ocx5m3vc3.bkt.clouddn.com/mybatis%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis概述</title>
    <link href="http://yoursite.com/2018/04/17/Mybatis/Mybatis%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2018/04/17/Mybatis/Mybatis概述/</id>
    <published>2018-04-17T04:40:00.000Z</published>
    <updated>2018-04-17T06:50:52.813Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mybatis介绍"><a href="#Mybatis介绍" class="headerlink" title="Mybatis介绍"></a>Mybatis介绍</h3><p>mybatis是一个持久层的框架，是apache下的顶级项目。</p><p>mybatis托管到goolecode下，再后来托管到github下（<a href="https://github.com/mybatis/mybatis-3/releases" title="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="external">https://github.com/mybatis/mybatis-3/releases</a>)。</p><p>Mybatis让程序将主要精力放在sql上，通过Mybatis提供的映射方式，只有灵活生成（半自动化，大部分需要程序员编写sql）满足需要SQL语句。</p><p>Mybatis可以将向preparedStatement中的输入参数自动进行输入映射，将查询结果灵活映射成java对象。（输出映射）<br><a id="more"></a></p><h2 id="框架原理"><a href="#框架原理" class="headerlink" title="框架原理"></a>框架原理</h2><p>Mybatis框架<br><img src="http://ocx5m3vc3.bkt.clouddn.com/mybatis_%E6%A1%86%E6%9E%B6%E5%9B%BE.png" alt=""></p><h3 id="Mybatis框架执行过程"><a href="#Mybatis框架执行过程" class="headerlink" title="Mybatis框架执行过程"></a>Mybatis框架执行过程</h3><p>1、配置Mybatis的配置文件，sqlMapConfig.xml（名称不固定）<br>2、通过配置文件，加载Mybatis运行环境，创建SQLSessionFactory会话工厂（SQLSessionFactory在实际使用时按单例方式）<br>3、通过SQLSessionFactory创建SQLSession。SqlSession是一个面向用户接口（提供操作数据库方法），实现对象是线程不安全的，建议SqlSession应用场合在方法体内。<br>4、调用SqlSession的方法去操作数据。如果需要提交事务，需要执行SqlSession的commit()方法。<br>5、释放资源，关闭SqlSession。</p><h3 id="Mybatis开发dao的方法"><a href="#Mybatis开发dao的方法" class="headerlink" title="Mybatis开发dao的方法"></a>Mybatis开发dao的方法</h3><p>1.原始dao的方法</p><ul><li>需要程序员编写dao接口和实现类</li><li>需要在dao实现类中注入一个SQLSessionFactory工厂</li></ul><p>2.mapper代理开发方法（建议使用）<br>只需要程序员编写mapper接口（就是dao接口）。<br>程序员在编写mapper.xml（映射文件）和mapper.java需要遵循一个开发规范：</p><ul><li>mapper.xml中namespace就是mapper.java的类全路径。  </li><li>mapper.xml中statement的id和mapper.java中方法名一致。  </li><li>mapper.xml中statement的parameterType指定输入参数的类型和mapper.java的方法输入参数类型一致。  </li><li>mapper.xml中statement的resultType指定输出结果的类型和mapper.java的方法返回值类型一致。</li></ul><p>SqlMapConfig.xml配置文件：可以配置properties属性、别名、mapper加载。</p><h3 id="输入映射和输出映射"><a href="#输入映射和输出映射" class="headerlink" title="输入映射和输出映射"></a>输入映射和输出映射</h3><p>输入映射：</p><ul><li>parameterType：指定输入参数类型可以简单类型、pojo、hashmap。</li><li>对于综合查询，建议parameterType使用包装的pojo，有利于系统 扩展。</li></ul><p>输出映射：  </p><ul><li>resultType：查询到的列名和resultType指定的pojo的属性名一致，才能映射成功。  </li><li>reusltMap：可以通过resultMap 完成一些高级映射。如果查询到的列名和映射的pojo的属性名不一致时，通过resultMap设置列名和属性名之间的对应关系（映射关系）。可以完成映射。   </li><li>高级映射：<br>&ensp;&ensp;&ensp;&ensp;将关联查询的列映射到一个pojo属性中。（一对一）<br>&ensp;&ensp;&ensp;&ensp;将关联查询的列映射到一个List中。（一对多）</li></ul><h3 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h3><ul><li>动态sql：（重点）<br>&ensp;&ensp;&ensp;&ensp; - if判断（掌握）<br>&ensp;&ensp;&ensp;&ensp; - where<br>&ensp;&ensp;&ensp;&ensp; - foreach<br>&ensp;&ensp;&ensp;&ensp; - sql片段（掌握）  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Mybatis介绍&quot;&gt;&lt;a href=&quot;#Mybatis介绍&quot; class=&quot;headerlink&quot; title=&quot;Mybatis介绍&quot;&gt;&lt;/a&gt;Mybatis介绍&lt;/h3&gt;&lt;p&gt;mybatis是一个持久层的框架，是apache下的顶级项目。&lt;/p&gt;
&lt;p&gt;mybatis托管到goolecode下，再后来托管到github下（&lt;a href=&quot;https://github.com/mybatis/mybatis-3/releases&quot; title=&quot;https://github.com/mybatis/mybatis-3/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mybatis/mybatis-3/releases&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;Mybatis让程序将主要精力放在sql上，通过Mybatis提供的映射方式，只有灵活生成（半自动化，大部分需要程序员编写sql）满足需要SQL语句。&lt;/p&gt;
&lt;p&gt;Mybatis可以将向preparedStatement中的输入参数自动进行输入映射，将查询结果灵活映射成java对象。（输出映射）&lt;br&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>原生JDBC的问题总结</title>
    <link href="http://yoursite.com/2018/04/17/Mybatis/%E5%8E%9F%E7%94%9FJDBC%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/04/17/Mybatis/原生JDBC的问题总结/</id>
    <published>2018-04-16T16:00:00.000Z</published>
    <updated>2018-04-17T06:51:10.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JDBC编程步骤"><a href="#JDBC编程步骤" class="headerlink" title="JDBC编程步骤"></a>JDBC编程步骤</h3><p>1.加载数据库驱动<br>2.创建并获取数据库连接<br>3.创建jdbc statement对象<br>4.设置SQL语句<br>5.设置SQL语句中的参数（使用preparedStatement)<br>6.通过statement执行sql并获取结果<br>7.对sql执行结果进行解析处理<br>8.释放资源（resultSet、preparedStatement、connection)</p><h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><a id="more"></a><p>1.数据库连接，使用时就创建，不使用立即释放，对数据库进行频繁连接开启和关闭，造成数据库资源浪费，影响数据库性能。</p><p>设想：使用数据库连接池管理数据库连接。</p><p>2.将sql语句硬编码到java代码中，如果sql语句修改，需要重新编译java代码，不利于系统维护。</p><p>设想：将SQL语句配置在xml配置文件中，即时SQL变化，不需要对java代码进行重新编译。</p><p>3.向preparedStatement设置参数，对占位符位置和设置参数值，硬编码在java代码中，不利于系统维护。</p><p>设想：将sql语句及占位符号和参数全部配置在xml中。</p><p>4.从resutSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，不利于系统维护。</p><p>设想：将查询的结果集，自动映射成Java对象。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JDBC编程步骤&quot;&gt;&lt;a href=&quot;#JDBC编程步骤&quot; class=&quot;headerlink&quot; title=&quot;JDBC编程步骤&quot;&gt;&lt;/a&gt;JDBC编程步骤&lt;/h3&gt;&lt;p&gt;1.加载数据库驱动&lt;br&gt;2.创建并获取数据库连接&lt;br&gt;3.创建jdbc statement对象&lt;br&gt;4.设置SQL语句&lt;br&gt;5.设置SQL语句中的参数（使用preparedStatement)&lt;br&gt;6.通过statement执行sql并获取结果&lt;br&gt;7.对sql执行结果进行解析处理&lt;br&gt;8.释放资源（resultSet、preparedStatement、connection)&lt;/p&gt;
&lt;h3 id=&quot;问题总结&quot;&gt;&lt;a href=&quot;#问题总结&quot; class=&quot;headerlink&quot; title=&quot;问题总结&quot;&gt;&lt;/a&gt;问题总结&lt;/h3&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate主键生成策略</title>
    <link href="http://yoursite.com/2018/02/04/kuangjia/Hibernate/Hibernate%E4%B8%BB%E9%94%AE%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2018/02/04/kuangjia/Hibernate/Hibernate主键生成策略/</id>
    <published>2018-02-04T02:20:07.000Z</published>
    <updated>2018-02-04T02:44:54.443Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>increment<br>用于long、short、int类型，由Hibernate自动以递增的方式生成唯一标识符，每次增量为1。只有当没有其他进程向同一张表中插入数据时才可以使用，不能在集群环境下使用。适用于代理主键。</p></li><li><p>identity<br>采用底层数据库本身提供的主键生成标识符，条件是数据库支持自动增长数据类型。在DB2、MySQL、MS SQL Server、Sybase和HypersonicSQL数据库中可以使用该生成器，该生成器要求在数据库中把主键定义成为自增长类型。适用于代理主键。</p></li><li><p>sequence<br>Hibernate根据底层数据库序列生成标识符。条件是数据库支持序列。适用于代理主键。</p></li><li><p>native<br>根据底层数据库对自动生成表示符的能力来选择identity、sequence、hilo三种生成器中的一种，适合跨数据库平台开发。适用于代理主键。</p></li><li><p>uuid<br>Hibernate采用128位的UUID算法来生成标识符。该算法能够在网络环境中生成唯一的字符串标识符，其UUID被编码为一个长度为32位的十六进制字符串。这种策略并不流行，因为字符串类型的主键比整数类型的主键占用更多的数据库空间。适用于代理主键。</p></li><li><p>assigned<br>由Java程序负责生成标识符，如果不指定ID元素的generator属性，则默认使用该主键生成策略。适用于自然主键。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;increment&lt;br&gt;用于long、short、int类型，由Hibernate自动以递增的方式生成唯一标识符，每次增量为1。只有当没有其他进程向同一张表中插入数据时才可以使用，不能在集群环境下使用。适用于代理主键。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate</title>
    <link href="http://yoursite.com/2018/02/03/kuangjia/Hibernate/Hibernate_01/"/>
    <id>http://yoursite.com/2018/02/03/kuangjia/Hibernate/Hibernate_01/</id>
    <published>2018-02-03T12:14:16.000Z</published>
    <updated>2018-02-04T02:24:40.084Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Hibernate框架关键词：dao层框架、以面向对象的方式操作数据库、orm思想（对象关系映射，通过映射文件配置对象和数据库中表的关系）</li></ul><p>一、Hibernate框架搭建：<br>&ensp;&ensp;&ensp;&ensp;1.导包<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;required+驱动包<br>&ensp;&ensp;&ensp;&ensp;2.准备实体类以及orm元数据<br>&ensp;&ensp;&ensp;&ensp;3.创建主配置文件<br>&ensp;&ensp;&ensp;&ensp;4.书写测试代码</p><p>二、配置文件详解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">orm元数据(xxx.hbm.xml)</div><div class="line"></div><div class="line">&lt;hibernate-mapping package=&quot;&quot;&gt;</div><div class="line">&lt;class name table&gt;</div><div class="line">&lt;id name &gt;</div><div class="line">&lt;generator class=&quot;&quot;&gt;</div><div class="line">&lt;/id&gt;</div><div class="line">&lt;property name=&quot;&quot; /&gt;</div><div class="line">&lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div><div class="line"></div><div class="line">hibernate.cfg.xml</div><div class="line"></div><div class="line">必选配置</div><div class="line">4+1方言</div><div class="line">可选配置</div><div class="line">显示sql</div><div class="line">格式化sql</div><div class="line">自动生成表</div><div class="line">|-update</div></pre></td></tr></table></figure></p><p>三、api详解：<br>&ensp;&ensp;&ensp;&ensp;Configuration 读取配置<br>&ensp;&ensp;&ensp;&ensp;sessionFactory 创建session<br>&ensp;&ensp;&ensp;&ensp;Session  获得事务操作对象，以及数据增删改查<br>&ensp;&ensp;&ensp;&ensp; Transaction 控制事务        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Hibernate框架关键词：dao层框架、以面向对象的方式操作数据库、orm思想（对象关系映射，通过映射文件配置对象和数据库中表的关系）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一、Hibernate框架搭建：&lt;br&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;1.导
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>CentOS中搭建redis</title>
    <link href="http://yoursite.com/2017/11/14/Redis/CentOS%E4%B8%AD%E6%90%AD%E5%BB%BAredis%E9%9B%86%E7%BE%A4/"/>
    <id>http://yoursite.com/2017/11/14/Redis/CentOS中搭建redis集群/</id>
    <published>2017-11-14T05:10:24.000Z</published>
    <updated>2018-03-28T13:25:04.556Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">首先安装环境：</div><div class="line">yum install gcc-c++</div><div class="line"></div><div class="line">安装步骤：</div><div class="line">1. 将Redis源码包上传到服务器</div><div class="line"></div><div class="line">2. 解压缩</div><div class="line">tar zxf redis-3.0.0.tar.gz</div><div class="line"></div><div class="line">3. 进入redis-3.0.0目录下编译</div><div class="line">make</div><div class="line"></div><div class="line">4. 安装</div><div class="line">make install PREFIX=/root/redis</div><div class="line"></div><div class="line">5.复制配置文件</div><div class="line">cp redis.conf ~/redis-3.0.0/redis.conf </div><div class="line"></div><div class="line">6.修改配置文件</div><div class="line">vim redis.conf</div><div class="line">修改    daemonize yes</div><div class="line"></div><div class="line">7.启动</div><div class="line">./redis-server redis.conf</div><div class="line">这样redis在后端启动了</div><div class="line"></div><div class="line">8.查看</div><div class="line">ps aux|grep redis</div></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="集群版"><a href="#集群版" class="headerlink" title="集群版"></a>集群版</h3><p>Redis集群中至少应该有3个节点，每个节点有一个备用机。<br>所以Redis集群至少需要6台服务器。<br>我们采用伪分布式。用一台服务器搭建6个Redis实例。需要修改Redis的端口号7001-7006</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">1.复制一个单机版的bin目录到一个实例中</div><div class="line">cp -r redis/bin/ redis-cluster/redis01/</div><div class="line"></div><div class="line">2.删除快照</div><div class="line">rm -rf dump.rdb</div><div class="line"></div><div class="line">3.修改配置文件</div><div class="line">vim redis.conf</div><div class="line">修改端口:port 7001</div><div class="line">打开可以使用集群 cluster-enabled yes</div><div class="line"></div><div class="line">4.将这个实例复制几份</div><div class="line">cp -r redis01/ redis02</div><div class="line">cp -r redis01/ redis03</div><div class="line">cp -r redis01/ redis04</div><div class="line">cp -r redis01/ redis05</div><div class="line">cp -r redis01/ redis06</div><div class="line"></div><div class="line">5.分别修改其中配置文件中的端口</div><div class="line"></div><div class="line">6.启动（可以用批处理）</div><div class="line"></div><div class="line">--------------------------------</div><div class="line">搭建集群</div><div class="line"></div><div class="line">使用ruby脚本搭建集群。需要ruby的运行环境</div><div class="line">yum install ruby</div><div class="line">yum install rubygems</div><div class="line"></div><div class="line">将redis-3.0.0.gem上传到服务器</div><div class="line">gem install redis-3.0.0.gem</div><div class="line"></div><div class="line">进入redis-3.0.0/src目录下</div><div class="line">cp redis-trip.rb /redis-cluster/</div><div class="line"></div><div class="line">到redis-cluster目录下执行脚本</div><div class="line">./redis-trib.rb create --replicas 1 192.168.25.153:7001 192.168.25.153:7002 192.168.25.153:7003 192.168.25.153:7004 192.168.25.153:7005 192.168.25.153:7006</div></pre></td></tr></table></figure><p><a href="http://pan.baidu.com/s/1i4Vzydv" target="_blank" rel="external">redis-3.0.0.gem</a><br><a href="http://pan.baidu.com/s/1bp532sn" target="_blank" rel="external">redis-3.0.0.tar.gz</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;单机版&quot;&gt;&lt;a href=&quot;#单机版&quot; class=&quot;headerlink&quot; title=&quot;单机版&quot;&gt;&lt;/a&gt;单机版&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;首先安装环境：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install gcc-c++&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;安装步骤：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1. 将Redis源码包上传到服务器&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2. 解压缩&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tar zxf redis-3.0.0.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3. 进入redis-3.0.0目录下编译&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4. 安装&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make install PREFIX=/root/redis&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5.复制配置文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp redis.conf ~/redis-3.0.0/redis.conf &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6.修改配置文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vim redis.conf&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;修改    daemonize yes&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7.启动&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./redis-server redis.conf&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;这样redis在后端启动了&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8.查看&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ps aux|grep redis&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>CentOS安装JDK、MySQL、tomcat、zookeeper</title>
    <link href="http://yoursite.com/2017/11/07/CentOS%E5%AE%89%E8%A3%85JDK/"/>
    <id>http://yoursite.com/2017/11/07/CentOS安装JDK/</id>
    <published>2017-11-07T08:28:05.000Z</published>
    <updated>2018-02-02T14:33:13.960Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;最近跟着视频做项目的时候发觉如果本机又是服务端又是客户端总感觉哪里有点那么不爽–<br>&ensp;&ensp;于是本来打算在我本机上的虚拟机试试看结果感觉效果不是很好，然后就珍惜自己最后一年的学生身份去晚上买了一个云服务器= =</p><ul><li><a href="https://www.mtyun.com/activity-school?site=mos&amp;campaign=20170706sales" target="_blank" rel="external">云帆校园扶持计划-美团云</a></li></ul><hr><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">1.查看是否安装JDK</div><div class="line">rpm -qa|grep java</div><div class="line"></div><div class="line">2.卸载已经安装的两个openJDK</div><div class="line">rpm -e--nodeps [要卸载的软件]</div><div class="line"></div><div class="line">3.上传JDK到Linux</div><div class="line">//安装JDK运行需要的插件 yum install glibc.i686</div><div class="line">4.解压JDK到/usr/local/目录下</div><div class="line">tar –xvf jdk-7u71-linux-i586.tar.gz –C /usr/local</div><div class="line"></div><div class="line">5.配置JDK环境变量，将下面的配置拷贝进去</div><div class="line">vim /etc/profile</div><div class="line"></div><div class="line">#set java environment</div><div class="line">JAVA_HOME=/usr/local/jdk1.7.0_71</div><div class="line">CLASSPATH=.:$JAVA_HOME/lib.tools.jar</div><div class="line">PATH=$JAVA_HOME/bin:$PATH</div><div class="line">export JAVA_HOME CLASSPATH PATH </div><div class="line"></div><div class="line">6.重新加载/etc/profile配置文件</div><div class="line">source /etc/profile</div><div class="line"></div><div class="line">测试是否安装成功</div><div class="line">java -version</div></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">1.查看Centos自带的MySQL</div><div class="line">rpm -qa|grep mysql</div><div class="line"></div><div class="line">2.卸载自带的MySQL  （rpm -e--nodeps)</div><div class="line"></div><div class="line">3.上传MySQL到Linux</div><div class="line">/*</div><div class="line">安装MySQL所需要的依赖</div><div class="line">yum -y install libaio.so.1 libgcc_s.so.1 libstdc++.so.6</div><div class="line">yum  update libstdc++-4.4.7-4.el6.x86_64</div><div class="line">*/</div><div class="line">4.解压Mysql到/usr/local/下的mysql目录(mysql目录需要手动创建)内</div><div class="line">cd /usr/local</div><div class="line">mkdir mysql</div><div class="line">tar -xvf MySQL-5.6.22-1.el6.i686.rpm-bundle.tar -C /usr/local/mysql</div><div class="line">5.在/usr/local/mysql下安装mysql</div><div class="line">安装服务器端：rpm -ivh MySQL-server-5.6.22-1.el6.i686.rpm</div><div class="line">安装客户端：rpm -ivh MySQL-client-5.6.22-1.el6.i686.rpm</div><div class="line">6.启动mysql</div><div class="line">service mysql start</div><div class="line">7.将mysql加到系统服务中并设置开机启动</div><div class="line">加入到系统服务：chkconfig --add mysql</div><div class="line">自动启动：chkconfig mysql on</div><div class="line">8.登录mysql</div><div class="line">mysql安装好后会生成一个临时随机密码，存储位置在/root/.mysql_secret</div><div class="line">9.登录后修改密码</div><div class="line">set password = password(&apos;root&apos;);</div><div class="line">10.开启mysql的远程登录</div><div class="line">默认情况下mysql为安全起见，不支持远程登录mysql，所以需要设置开启远程登录mysql的权限</div><div class="line">登录mysql后输入如下命令：</div><div class="line">grant all privileges on *.* to &apos;root&apos; @&apos;%&apos; identified by &apos;root&apos;;</div><div class="line">flush privileges;</div><div class="line">11.开放Linux的对外访问的端口3306</div><div class="line">/sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</div><div class="line">/etc/rc.d/init.d/iptables save ---将修改永久保存到防火墙中</div><div class="line"></div><div class="line">PS：后面操作数据库时发现中文会乱码。。。。</div><div class="line">-进入/etc/my.cnf文件</div><div class="line">在[mysqld]段增加下面的代码</div><div class="line">character-set-server=utf8</div><div class="line">collation-server=utf8_general_ci</div><div class="line">重启mysql。</div><div class="line">/*</div><div class="line">如果没有这个文件只需要复制一个/usr/share/mysql目录下的.cnf文件到/etc目录，并改名为my.cnf即可。</div><div class="line">*/</div></pre></td></tr></table></figure><hr><h3 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h3><p><a href="http://pan.baidu.com/s/1kVvJKKv" target="_blank" rel="external">tomcat压缩包</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1.上传Tomcat到linux上</div><div class="line">2.解压Tomcat到/usr/local下</div><div class="line">3.开放Linux的对外访问的端口8080</div><div class="line">/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</div><div class="line">/etc/rc.d/init.d/iptables save</div><div class="line">4.启动关闭Tomcat</div><div class="line">进入tomcat的bin下启动：./startup.sh</div><div class="line">进入tomcat的bin下关闭：./shutdown.sh</div></pre></td></tr></table></figure></p><hr><h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><ol><li><p>创建/usr/local/zookeeper文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /usr/local/zookeeper</div></pre></td></tr></table></figure></li><li><p>进入到/usr/local/zookeeper目录中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/zookeeper</div></pre></td></tr></table></figure></li><li><p>下载 zookeeper-3.4.9.tar.gz：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.9/zookeeper-3.4.9.tar.gz</div></pre></td></tr></table></figure></li><li><p>解压缩 zookeeper-3.4.9.tar.gz：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf zookeeper-3.4.9.tar.gz</div></pre></td></tr></table></figure></li><li><p>新建/usr/local/services/zookeeper/zookeeper-3.4.9/data:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /usr/local/services/zookeeper/zookeeper-3.4.9/data</div></pre></td></tr></table></figure></li><li><p>进入到 /usr/local/services/zookeeper/zookeeper-3.4.9/conf 目录中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd zookeeper-3.4.9/conf/</div></pre></td></tr></table></figure></li><li><p>复制 zoo_sample.cfg 文件的并命名为为 zoo.cfg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp zoo_sample.cfg zoo.cfg</div></pre></td></tr></table></figure></li><li><p>用 vim 打开 zoo.cfg 文件并修改其dataDir内容为如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 数据文件夹</div><div class="line">dataDir=/root/usr/local/services/zookeeper/zookeeper-3.4.9/data</div></pre></td></tr></table></figure></li><li><p>保存并关闭 zoo.cfg 文件:</p></li><li><p>进入到 /usr/local/services/zookeeper/zookeeper-3.4.9/bin 目录中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ../bin/</div></pre></td></tr></table></figure></li><li><p>启动 zookeeper 服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">    zkServer.sh start</div><div class="line">    如打印如下信息则表明启动成功：</div><div class="line">    ZooKeeper JMX enabled by default</div><div class="line">    Using config: /usr/local/services/zookeeper/zookeeper-3.4.9/bin/../conf/zoo.cfg</div><div class="line">    Starting zookeeper ... STARTED</div><div class="line">``` </div><div class="line">12. 查询 zookeeper 状态：</div><div class="line">```    </div><div class="line">zkServer.sh status</div></pre></td></tr></table></figure></li></ol><ol><li><p>关闭 zookeeper 服务：<br>zkServer.sh stop<br>如打印如下信息则表明成功关闭：<br>ZooKeeper JMX enabled by default<br>Using config: /usr/local/services/zookeeper/zookeeper-3.4.9/bin/../conf/zoo.cfg<br>Stopping zookeeper … STOPPED</p></li><li><p>重启 zookeeper 服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">zkServer.sh restart</div><div class="line">如打印如下信息则表明重启成功：</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /usr/local/services/zookeeper/zookeeper-3.4.9/bin/../conf/zoo.cfg</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /usr/local/services/zookeeper/zookeeper-3.4.9/bin/../conf/zoo.cfg</div><div class="line">Stopping zookeeper ... STOPPED</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /usr/local/services/zookeeper/zookeeper-3.4.9/bin/../conf/zoo.cfg</div><div class="line">Starting zookeeper ... STARTED</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;最近跟着视频做项目的时候发觉如果本机又是服务端又是客户端总感觉哪里有点那么不爽–&lt;br&gt;&amp;ensp;&amp;ensp;于是本来打算在我本机上的虚拟机试试看结果感觉效果不是很好，然后就珍惜自己最后一年的学生身份去晚上买了一个云服务器= =&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mtyun.com/activity-school?site=mos&amp;amp;campaign=20170706sales&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;云帆校园扶持计划-美团云&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;安装JDK&quot;&gt;&lt;a href=&quot;#安装JDK&quot; class=&quot;headerlink&quot; title=&quot;安装JDK&quot;&gt;&lt;/a&gt;安装JDK&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.查看是否安装JDK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	rpm -qa|grep java&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.卸载已经安装的两个openJDK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	rpm -e--nodeps [要卸载的软件]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.上传JDK到Linux&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//安装JDK运行需要的插件 yum install glibc.i686&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4.解压JDK到/usr/local/目录下&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	tar –xvf jdk-7u71-linux-i586.tar.gz –C /usr/local&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5.配置JDK环境变量，将下面的配置拷贝进去&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	vim /etc/profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	#set java environment&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	JAVA_HOME=/usr/local/jdk1.7.0_71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	CLASSPATH=.:$JAVA_HOME/lib.tools.jar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	PATH=$JAVA_HOME/bin:$PATH&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	export JAVA_HOME CLASSPATH PATH &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6.重新加载/etc/profile配置文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	source /etc/profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;测试是否安装成功&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	java -version&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="软件安装" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>SQL优化</title>
    <link href="http://yoursite.com/2017/11/02/SQL%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2017/11/02/SQL优化/</id>
    <published>2017-11-02T12:14:16.000Z</published>
    <updated>2017-11-02T15:05:23.274Z</updated>
    
    <content type="html"><![CDATA[<ol><li>避免查询的模糊匹配</li><li>索引问题</li></ol><ul><li>避免对索引字段进行计算操作</li><li>避免在索引字段上使用not,&lt;&gt;,!=</li><li>避免在索引列上使用IS NULL和IS NOT NULL</li><li>避免在索引列上出现数据类型转换</li><li>避免在索引字段上使用函数</li><li>避免建立索引的列中使用空值</li></ul><ol><li><p>复杂操作<br>&ensp;&ensp;部分UPDATE、SELETE语句写的很复杂（经常嵌套多级子查询）—可以考虑适当拆成几步，先生成一些临时数据表，再进行关联操作。</p></li><li><p>在可以使用UNION ALL的语句里，使用了UNION</p></li><li>在WHERE语句中，尽量避免对索引字段进行计算操作</li><li>对WHERE语句的法则</li></ol><ul><li>避免在WHERE子句中使用in，not  in，or 或者having。</li><li>不要以字符格式声明数字，要以数字格式声明字符值。（日期同样）否则会使索引无效，产生全表扫描。</li></ul><ol><li><p>对SELECT语句的法则<br>&ensp;&ensp;尽量避免使用SELECT * FROM 这种方式</p></li><li><p>排序<br>&ensp;&ensp;避免使用耗费资源的操作，带有DISTINCT,UNION,MINUS,INTERSECT,ORDER BY的SQL语句会启动SQL引擎 执行，耗费资源的排序(SORT)功能. DISTINCT需要一次排序操作, 而其他的至少需要执行两次排序</p></li><li><p>慎重使用临时表可以极大的提高系统性能</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;避免查询的模糊匹配&lt;/li&gt;
&lt;li&gt;索引问题&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;避免对索引字段进行计算操作&lt;/li&gt;
&lt;li&gt;避免在索引字段上使用not,&amp;lt;&amp;gt;,!=&lt;/li&gt;
&lt;li&gt;避免在索引列上使用IS NULL和IS NOT NULL&lt;
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习--Sorted-Sets数据结构</title>
    <link href="http://yoursite.com/2017/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0--Sorted-Sets%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/10/31/Redis/Redis学习--Sorted-Sets数据类型/</id>
    <published>2017-10-31T04:20:18.000Z</published>
    <updated>2017-11-08T07:38:00.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>&ensp;&ensp;Sorted-Sets和Sets类型极为相似，它们都是字符串的集合，都不允许重复的成员出现在一个Set中。它们之间的主要差别是Sorted-Sets中的每一个成员都会有一个分数(score)与之关联，Redis正是通过分数来为集合中的成员进行从小到大的排序。然而需要额外指出的是，尽管Sorted-Sets中的成员必须是唯一的，但是分数(score)却是可以重复的。<br>&ensp;&ensp;在Sorted-Set中添加、删除或更新一个成员都是非常快速的操作，其时间复杂度为集合中成员数量的对数。由于Sorted-Sets中的成员在集合中的位置是有序的，因此，即便是访问位于集合中部的成员也仍然是非常高效的。事实上，Redis所具有的这一特征在很多其它类型的数据库中是很难实现的，换句话说，在该点上要想达到和Redis同样的高效，在其它数据库中进行建模是非常困难的。<br><a id="more"></a></p><h3 id="相关命令列表"><a href="#相关命令列表" class="headerlink" title="相关命令列表"></a>相关命令列表</h3><table><thead><tr><th style="text-align:center">命令原型</th><th style="text-align:center">时间复杂度</th><th style="text-align:center">命令描述</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td style="text-align:center">ZADD key score member [score] [member]</td><td style="text-align:center">O(log(N))</td><td style="text-align:center">时间复杂度中的N表示Sorted-Sets中成员的数量。添加参数中指定的所有成员及其分数到指定key的Sorted-Set中，在该命令中我们可以指定多组score/member作为参数。如果在添加时参数中的某一成员已经存在，该命令将更新此成员的分数为新值，同时再将该成员基于新值重新排序。如果键不存在，该命令将为该键创建一个新的Sorted-Sets Value，并将score/member对插入其中。如果该键已经存在，但是与其关联的Value不是Sorted-Sets类型，相关的错误信息将被返回。</td><td style="text-align:center">本次操作实际插入的成员数量。</td></tr><tr><td style="text-align:center">ZCARD key</td><td style="text-align:center">O(1)</td><td style="text-align:center">获取与该Key相关联的Sorted-Sets中包含的成员数量。</td><td style="text-align:center">返回Sorted-Sets中的成员数量，如果该Key不存在，返回0。</td></tr><tr><td style="text-align:center">ZCOUNT key min max</td><td style="text-align:center">O(log(N)+M)</td><td style="text-align:center">时间复杂度中的N表示Sorted-Sets中成员的数量，M则表示min和max之间元素的数量。该命令用于获取分数(score)在min和max之间的成员数量。针对min和max参数需要额外说明的是，-inf和+inf分别表示Sorted-Sets中分数的最高值和最低值。缺省情况下，min和max表示的范围是闭区间范围，即min &lt;= score &lt;= max内的成员将被返回。然而我们可以通过在min和max的前面添加”(“字符来表示开区间，如(min max表示min &lt; score &lt;= max，而(min (max表示min &lt; score &lt; max。</td><td style="text-align:center">分数指定范围内成员的数量。</td></tr><tr><td style="text-align:center">ZINCRBY key increment member</td><td style="text-align:center">O(log(N))</td><td style="text-align:center">时间复杂度中的N表示Sorted-Sets中成员的数量。该命令将为指定Key中的指定成员增加指定的分数。如果成员不存在，该命令将添加该成员并假设其初始分数为0，此后再将其分数加上increment。如果Key不存，该命令将创建该Key及其关联的Sorted-Sets，并包含参数指定的成员，其分数为increment参数。如果与该Key关联的不是Sorted-Sets类型，相关的错误信息将被返回。</td><td style="text-align:center">以字符串形式表示的新分数。</td></tr><tr><td style="text-align:center">ZRANGE key start stop [WITHSCORES]</td><td style="text-align:center">O(log(N)+M)</td><td style="text-align:center">时间复杂度中的N表示Sorted-Set中成员的数量，M则表示返回的成员数量。该命令返回顺序在参数start和stop指定范围内的成员，这里start和stop参数都是0-based，即0表示第一个成员，-1表示最后一个成员。如果start大于该Sorted-Set中的最大索引值，或start &gt; stop，此时一个空集合将被返回。如果stop大于最大索引值，该命令将返回从start到集合的最后一个成员。如果命令中带有可选参数WITHSCORES选项，该命令在返回的结果中将包含每个成员的分数值，如value1,score1,value2,score2…。　　</td><td style="text-align:center">返回索引在start和stop之间的成员列表。</td></tr><tr><td style="text-align:center">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</td><td style="text-align:center">O(log(N)+M)</td><td style="text-align:center">时间复杂度中的N表示Sorted-Set中成员的数量，M则表示返回的成员数量。该命令将返回分数在min和max之间的所有成员，即满足表达式min &lt;= score &lt;= max的成员，其中返回的成员是按照其分数从低到高的顺序返回，如果成员具有相同的分数，则按成员的字典顺序返回。可选参数LIMIT用于限制返回成员的数量范围。可选参数offset表示从符合条件的第offset个成员开始返回，同时返回count个成员。可选参数WITHSCORES的含义参照ZRANGE中该选项的说明。最后需要说明的是参数中min和max的规则可参照命令ZCOUNT。</td><td style="text-align:center">返回分数在指定范围内的成员列表。</td></tr><tr><td style="text-align:center">ZRANK key member</td><td style="text-align:center">O(log(N))</td><td style="text-align:center">时间复杂度中的N表示Sorted-Set中成员的数量。Sorted-Set中的成员都是按照分数从低到高的顺序存储，该命令将返回参数中指定成员的位置值，其中0表示第一个成员，它是Sorted-Set中分数最低的成员。</td><td style="text-align:center">如果该成员存在，则返回它的位置索引值。否则返回nil。</td></tr><tr><td style="text-align:center">ZREM key member [member …]</td><td style="text-align:center">O(M log(N))</td><td style="text-align:center">时间复杂度中N表示Sorted-Set中成员的数量，M则表示被删除的成员数量。该命令将移除参数中指定的成员，其中不存在的成员将被忽略。如果与该Key关联的Value不是Sorted-Set，相应的错误信息将被返回。</td><td style="text-align:center">实际被删除的成员数量。</td></tr><tr><td style="text-align:center">ZREVRANGE key start stop [WITHSCORES]</td><td style="text-align:center">O(log(N)+M)</td><td style="text-align:center">时间复杂度中的N表示Sorted-Set中成员的数量，M则表示返回的成员数量。该命令的功能和ZRANGE基本相同，唯一的差别在于该命令是通过反向排序获取指定位置的成员，即从高到低的顺序。如果成员具有相同的分数，则按降序字典顺序排序。</td><td style="text-align:center">返回指定的成员列表。</td></tr><tr><td style="text-align:center">ZREVRANK key member</td><td style="text-align:center">O(log(N))</td><td style="text-align:center">时间复杂度中的N表示Sorted-Set中成员的数量。该命令的功能和ZRANK基本相同，唯一的差别在于该命令获取的索引是从高到低排序后的位置，同样0表示第一个元素，即分数最高的成员。</td><td style="text-align:center">如果该成员存在，则返回它的位置索引值。否则返回nil。</td></tr><tr><td style="text-align:center">ZSCORE key member</td><td style="text-align:center">O(1)</td><td style="text-align:center">获取指定Key的指定成员的分数。</td><td style="text-align:center">如果该成员存在，以字符串的形式返回其分数，否则返回nil。</td></tr><tr><td style="text-align:center">ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</td><td style="text-align:center">O(log(N)+M)</td><td style="text-align:center">时间复杂度中的N表示Sorted-Set中成员的数量，M则表示返回的成员数量。该命令除了排序方式是基于从高到低的分数排序之外，其它功能和参数含义均与ZRANGEBYSCORE相同。</td><td style="text-align:center">返回分数在指定范围内的成员列表。</td></tr><tr><td style="text-align:center">ZREMRANGEBYRANK key start stop</td><td style="text-align:center">O(log(N)+M)</td><td style="text-align:center">时间复杂度中的N表示Sorted-Set中成员的数量，M则表示被删除的成员数量。删除索引位置位于start和stop之间的成员，start和stop都是0-based，即0表示分数最低的成员，-1表示最后一个成员，即分数最高的成员。</td><td style="text-align:center">被删除的成员数量。</td></tr><tr><td style="text-align:center">ZREMRANGEBYSCORE key min max</td><td style="text-align:center">O(log(N)+M)</td><td style="text-align:center">时间复杂度中的N表示Sorted-Set中成员的数量，M则表示被删除的成员数量。删除分数在min和max之间的所有成员，即满足表达式min &lt;= score &lt;= max的所有成员。对于min和max参数，可以采用开区间的方式表示，具体规则参照ZCOUNT。</td><td style="text-align:center">被删除的成员数量。</td></tr></tbody></table><h3 id="命令示例"><a href="#命令示例" class="headerlink" title="命令示例"></a>命令示例</h3><ol><li><p>ZADD/ZCARD/ZCOUNT/ZREM/ZINCRBY/ZSCORE/ZRANGE/ZRANK:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">#在Shell的命令行下启动Redis客户端工具。</div><div class="line">/&gt; redis-cli</div><div class="line">#添加一个分数为<span class="number">1</span>的成员。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd myzset <span class="number">1</span> <span class="string">"one"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line">#添加两个分数分别是<span class="number">2</span>和<span class="number">3</span>的两个成员。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd myzset <span class="number">2</span> <span class="string">"two"</span> <span class="number">3</span> <span class="string">"three"</span></div><div class="line">(integer) <span class="number">2</span></div><div class="line">#<span class="number">0</span>表示第一个成员，<span class="number">-1</span>表示最后一个成员。WITHSCORES选项表示返回的结果中包含每个成员及其分数，否则只返回成员。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange myzset <span class="number">0</span> <span class="number">-1</span> WITHSCORES</div><div class="line"><span class="number">1</span>) <span class="string">"one"</span></div><div class="line"><span class="number">2</span>) <span class="string">"1"</span></div><div class="line"><span class="number">3</span>) <span class="string">"two"</span></div><div class="line"><span class="number">4</span>) <span class="string">"2"</span></div><div class="line"><span class="number">5</span>) <span class="string">"three"</span></div><div class="line"><span class="number">6</span>) <span class="string">"3"</span></div><div class="line">#获取成员one在Sorted-Set中的位置索引值。<span class="number">0</span>表示第一个位置。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrank myzset one</div><div class="line">(integer) <span class="number">0</span></div><div class="line">#成员four并不存在，因此返回nil。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrank myzset four</div><div class="line">(nil)</div><div class="line">#获取myzset键中成员的数量。    </div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zcard myzset</div><div class="line">(integer) <span class="number">3</span></div><div class="line">#返回与myzset关联的Sorted-Set中，分数满足表达式<span class="number">1</span> &lt;= score &lt;= <span class="number">2</span>的成员的数量。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zcount myzset <span class="number">1</span> <span class="number">2</span></div><div class="line">(integer) <span class="number">2</span></div><div class="line">#删除成员one和two，返回实际删除成员的数量。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrem myzset one two</div><div class="line">(integer) <span class="number">2</span></div><div class="line">#查看是否删除成功。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zcard myzset</div><div class="line">(integer) <span class="number">1</span></div><div class="line">#获取成员three的分数。返回值是字符串形式。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zscore myzset three</div><div class="line"><span class="string">"3"</span></div><div class="line">#由于成员two已经被删除，所以该命令返回nil。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zscore myzset two</div><div class="line">(nil)</div><div class="line">#将成员one的分数增加<span class="number">2</span>，并返回该成员更新后的分数。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zincrby myzset <span class="number">2</span> one</div><div class="line"><span class="string">"3"</span></div><div class="line">#将成员one的分数增加<span class="number">-1</span>，并返回该成员更新后的分数。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zincrby myzset <span class="number">-1</span> one</div><div class="line"><span class="string">"2"</span></div><div class="line">#查看在更新了成员的分数后是否正确。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange myzset <span class="number">0</span> <span class="number">-1</span> WITHSCORES</div><div class="line"><span class="number">1</span>) <span class="string">"one"</span></div><div class="line"><span class="number">2</span>) <span class="string">"2"</span></div><div class="line"><span class="number">3</span>) <span class="string">"two"</span></div><div class="line"><span class="number">4</span>) <span class="string">"2"</span></div><div class="line"><span class="number">5</span>) <span class="string">"three"</span></div><div class="line"><span class="number">6</span>) <span class="string">"3"</span></div></pre></td></tr></table></figure></li><li><p>ZRANGEBYSCORE/ZREMRANGEBYRANK/ZREMRANGEBYSCORE</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; del myzset</div><div class="line">(integer) <span class="number">1</span></div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd myzset <span class="number">1</span> one <span class="number">2</span> two <span class="number">3</span> three <span class="number">4</span> four</div><div class="line">(integer) <span class="number">4</span></div><div class="line">#获取分数满足表达式<span class="number">1</span> &lt;= score &lt;= <span class="number">2</span>的成员。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrangebyscore myzset <span class="number">1</span> <span class="number">2</span></div><div class="line"><span class="number">1</span>) <span class="string">"one"</span></div><div class="line"><span class="number">2</span>) <span class="string">"two"</span></div><div class="line">#获取分数满足表达式<span class="number">1</span> &lt; score &lt;= <span class="number">2</span>的成员。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrangebyscore myzset (<span class="number">1</span> <span class="number">2</span></div><div class="line"><span class="number">1</span>) <span class="string">"two"</span></div><div class="line">#-inf表示第一个成员，+inf表示最后一个成员，limit后面的参数用于限制返回成员的自己，</div><div class="line">#<span class="number">2</span>表示从位置索引(<span class="number">0</span>-based)等于<span class="number">2</span>的成员开始，去后面<span class="number">3</span>个成员。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrangebyscore myzset -inf +inf limit <span class="number">2</span> <span class="number">3</span></div><div class="line"><span class="number">1</span>) <span class="string">"three"</span></div><div class="line"><span class="number">2</span>) <span class="string">"four"</span></div><div class="line">#删除分数满足表达式<span class="number">1</span> &lt;= score &lt;= <span class="number">2</span>的成员，并返回实际删除的数量。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zremrangebyscore myzset <span class="number">1</span> <span class="number">2</span></div><div class="line">(integer) <span class="number">2</span></div><div class="line">#看出一下上面的删除是否成功。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange myzset <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"three"</span></div><div class="line"><span class="number">2</span>) <span class="string">"four"</span></div><div class="line">#删除位置索引满足表达式<span class="number">0</span> &lt;= rank &lt;= <span class="number">1</span>的成员。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zremrangebyrank myzset <span class="number">0</span> <span class="number">1</span></div><div class="line">(integer) <span class="number">2</span></div><div class="line">#查看上一条命令是否删除成功。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zcard myzset</div><div class="line">(integer) <span class="number">0</span></div></pre></td></tr></table></figure></li><li><p>ZREVRANGE/ZREVRANGEBYSCORE/ZREVRANK:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#为后面的示例准备测试数据。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; del myzset</div><div class="line">(integer) <span class="number">0</span></div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd myzset <span class="number">1</span> one <span class="number">2</span> two <span class="number">3</span> three <span class="number">4</span> four</div><div class="line">(integer) <span class="number">4</span></div><div class="line">#以位置索引从高到低的方式获取并返回此区间内的成员。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrevrange myzset <span class="number">0</span> <span class="number">-1</span> WITHSCORES</div><div class="line"><span class="number">1</span>) <span class="string">"four"</span></div><div class="line"><span class="number">2</span>) <span class="string">"4"</span></div><div class="line"><span class="number">3</span>) <span class="string">"three"</span></div><div class="line"><span class="number">4</span>) <span class="string">"3"</span></div><div class="line"><span class="number">5</span>) <span class="string">"two"</span></div><div class="line"><span class="number">6</span>) <span class="string">"2"</span></div><div class="line"><span class="number">7</span>) <span class="string">"one"</span></div><div class="line"><span class="number">8</span>) <span class="string">"1"</span></div><div class="line">#由于是从高到低的排序，所以位置等于<span class="number">0</span>的是four，<span class="number">1</span>是three，并以此类推。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrevrange myzset <span class="number">1</span> <span class="number">3</span></div><div class="line"><span class="number">1</span>) <span class="string">"three"</span></div><div class="line"><span class="number">2</span>) <span class="string">"two"</span></div><div class="line"><span class="number">3</span>) <span class="string">"one"</span></div><div class="line">#由于是从高到低的排序，所以one的位置是<span class="number">3</span>。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrevrank myzset one</div><div class="line">(integer) <span class="number">3</span></div><div class="line">#由于是从高到低的排序，所以four的位置是<span class="number">0</span>。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrevrank myzset four</div><div class="line">(integer) <span class="number">0</span></div><div class="line">#获取分数满足表达式<span class="number">3</span> &gt;= score &gt;= <span class="number">0</span>的成员，并以相反的顺序输出，即从高到底的顺序。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrevrangebyscore myzset <span class="number">3</span> <span class="number">0</span></div><div class="line"><span class="number">1</span>) <span class="string">"three"</span></div><div class="line"><span class="number">2</span>) <span class="string">"two"</span></div><div class="line"><span class="number">3</span>) <span class="string">"one"</span></div><div class="line">#该命令支持limit选项，其含义等同于zrangebyscore中的该选项，只是在计算位置时按照相反的顺序计算和获取。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrevrangebyscore myzset <span class="number">4</span> <span class="number">0</span> limit <span class="number">1</span> <span class="number">2</span></div><div class="line"><span class="number">1</span>) <span class="string">"three"</span></div><div class="line"><span class="number">2</span>) <span class="string">"two"</span></div></pre></td></tr></table></figure></li></ol><h3 id="应用范围"><a href="#应用范围" class="headerlink" title="应用范围"></a>应用范围</h3><ol><li>可以用于一个大型在线游戏的积分排行榜。每当玩家的分数发生变化时，可以执行ZADD命令更新玩家的分数，此后再通过ZRANGE命令获取积分TOP TEN的用户信息。当然我们也可以利用ZRANK命令通过username来获取玩家的排行信息。最后我们将组合使用ZRANGE和ZRANK命令快速的获取和某个玩家积分相近的其他用户的信息。</li><li>Sorted-Sets类型还可用于构建索引数据。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;&amp;ensp;&amp;ensp;Sorted-Sets和Sets类型极为相似，它们都是字符串的集合，都不允许重复的成员出现在一个Set中。它们之间的主要差别是Sorted-Sets中的每一个成员都会有一个分数(score)与之关联，Redis正是通过分数来为集合中的成员进行从小到大的排序。然而需要额外指出的是，尽管Sorted-Sets中的成员必须是唯一的，但是分数(score)却是可以重复的。&lt;br&gt;&amp;ensp;&amp;ensp;在Sorted-Set中添加、删除或更新一个成员都是非常快速的操作，其时间复杂度为集合中成员数量的对数。由于Sorted-Sets中的成员在集合中的位置是有序的，因此，即便是访问位于集合中部的成员也仍然是非常高效的。事实上，Redis所具有的这一特征在很多其它类型的数据库中是很难实现的，换句话说，在该点上要想达到和Redis同样的高效，在其它数据库中进行建模是非常困难的。&lt;br&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习--Hashs数据结构</title>
    <link href="http://yoursite.com/2017/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0--Hashs%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/10/31/Redis/Redis学习--Hashs数据结构/</id>
    <published>2017-10-31T01:46:18.000Z</published>
    <updated>2017-10-31T02:03:03.641Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>&ensp;&ensp;我们可以将Redis中的Hashes类型看成具有String Key和String Value的map容器。所以该类型非常适合于存储值对象的信息。如Username、Password和Age等。如果Hash中包含很少的字段，那么该类型的数据也将仅占用很少的磁盘空间。每一个Hash可以存储4294967295个键值对。<br><a id="more"></a></p><h3 id="相关命令列表"><a href="#相关命令列表" class="headerlink" title="相关命令列表"></a>相关命令列表</h3><table><thead><tr><th style="text-align:center">命令原型</th><th style="text-align:center">时间复杂度</th><th style="text-align:center">命令描述</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td style="text-align:center">HSET key field value</td><td style="text-align:center">O(1)</td><td style="text-align:center">为指定的Key设定Field/Value对，如果Key不存在，该命令将创建新Key以参数中的Field/Value对，如果参数中的Field在该Key中已经存在，则用新值覆盖其原有值。</td><td style="text-align:center">1表示新的Field被设置了新值，0表示Field已经存在，用新值覆盖原有值。</td></tr><tr><td style="text-align:center">HGET key field</td><td style="text-align:center">O(1)</td><td style="text-align:center">返回指定Key中指定Field的关联值。</td><td style="text-align:center">返回参数中Field的关联值，如果参数中的Key或Field不存，返回nil。</td></tr><tr><td style="text-align:center">HEXISTS key field</td><td style="text-align:center">O(1)</td><td style="text-align:center">判断指定Key中的指定Field是否存在。</td><td style="text-align:center">1表示存在，0表示参数中的Field或Key不存在。</td></tr><tr><td style="text-align:center">HLEN key</td><td style="text-align:center">O(1)</td><td style="text-align:center">获取该Key所包含的Field的数量。</td><td style="text-align:center">返回Key包含的Field数量，如果Key不存在，返回0。</td></tr><tr><td style="text-align:center">HDEL key field [field …]</td><td style="text-align:center">O(N)</td><td style="text-align:center">时间复杂度中的N表示参数中待删除的字段数量。从指定Key的Hashes Value中删除参数中指定的多个字段，如果不存在的字段将被忽略。如果Key不存在，则将其视为空Hashes，并返回0.</td><td style="text-align:center">实际删除的Field数量。</td></tr><tr><td style="text-align:center">HSETNX key field value</td><td style="text-align:center">O(1)</td><td style="text-align:center">只有当参数中的Key或Field不存在的情况下，为指定的Key设定Field/Value对，否则该命令不会进行任何操作。</td><td style="text-align:center">1表示新的Field被设置了新值，0表示Key或Field已经存在，该命令没有进行任何操作。</td></tr><tr><td style="text-align:center">HINCRBY key field increment</td><td style="text-align:center">O(1)</td><td style="text-align:center">增加指定Key中指定Field关联的Value的值。如果Key或Field不存在，该命令将会创建一个新Key或新Field，并将其关联的Value初始化为0，之后再指定数字增加的操作。该命令支持的数字是64位有符号整型，即increment可以负数。</td><td style="text-align:center">返回运算后的值。</td></tr><tr><td style="text-align:center">HGETALL key</td><td style="text-align:center">O(N)</td><td style="text-align:center">时间复杂度中的N表示Key包含的Field数量。获取该键包含的所有Field/Value。其返回格式为一个Field、一个Value，并以此类推。</td><td style="text-align:center">Field/Value的列表。</td></tr><tr><td style="text-align:center">HKEYS key</td><td style="text-align:center">O(N)</td><td style="text-align:center">时间复杂度中的N表示Key包含的Field数量。返回指定Key的所有Fields名</td><td style="text-align:center">Field的列表。</td></tr><tr><td style="text-align:center">HVALS key</td><td style="text-align:center">O(N)</td><td style="text-align:center">时间复杂度中的N表示Key包含的Field数量。返回指定Key的所有Values名。</td><td style="text-align:center">Value的列表。</td></tr><tr><td style="text-align:center">HMGET key field [field …]</td><td style="text-align:center">O(N)</td><td style="text-align:center">时间复杂度中的N表示请求的Field数量。获取和参数中指定Fields关联的一组Values。如果请求的Field不存在，其值返回nil。如果Key不存在，该命令将其视为空Hash，因此返回一组nil。</td><td style="text-align:center">返回和请求Fields关联的一组Values，其返回顺序等同于Fields的请求顺序。</td></tr><tr><td style="text-align:center">HMSET key field value [field value …]</td><td style="text-align:center">O(N)</td><td style="text-align:center">时间复杂度中的N表示被设置的Field数量。逐对依次设置参数中给出的Field/Value对。如果其中某个Field已经存在，则用新值覆盖原有值。如果Key不存在，则创建新Key，同时设定参数中的Field/Value。</td></tr></tbody></table><h3 id="命令示例"><a href="#命令示例" class="headerlink" title="命令示例"></a>命令示例</h3><ol><li><p>LPUSH/LPUSHX/LRANGE:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#在Shell命令行启动Redis客户端程序</div><div class="line">/&gt; redis-cli</div><div class="line">#给键值为myhash的键设置字段为field1，值为stephen。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hset myhash field1 <span class="string">"stephen"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line">#获取键值为myhash，字段为field1的值。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hget myhash field1</div><div class="line"><span class="string">"stephen"</span></div><div class="line"><span class="meta">#myhash键中不存在field2字段，因此返回nil。</span></div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hget myhash field2</div><div class="line">(nil)</div><div class="line">#给myhash关联的Hashes值添加一个新的字段field2，其值为liu。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hset myhash field2 <span class="string">"liu"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line">#获取myhash键的字段数量。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hlen myhash</div><div class="line">(integer) <span class="number">2</span></div><div class="line">#判断myhash键中是否存在字段名为field1的字段，由于存在，返回值为<span class="number">1</span>。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hexists myhash field1</div><div class="line">(integer) <span class="number">1</span></div><div class="line">#删除myhash键中字段名为field1的字段，删除成功返回<span class="number">1</span>。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hdel myhash field1</div><div class="line">(integer) <span class="number">1</span></div><div class="line">#再次删除myhash键中字段名为field1的字段，由于上一条命令已经将其删除，因为没有删除，返回<span class="number">0</span>。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hdel myhash field1</div><div class="line">(integer) <span class="number">0</span></div><div class="line">#判断myhash键中是否存在field1字段，由于上一条命令已经将其删除，因为返回<span class="number">0</span>。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hexists myhash field1</div><div class="line">(integer) <span class="number">0</span></div><div class="line">#通过hsetnx命令给myhash添加新字段field1，其值为stephen，因为该字段已经被删除，所以该命令添加成功并返回<span class="number">1</span>。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hsetnx myhash field1 stephen</div><div class="line">(integer) <span class="number">1</span></div><div class="line">#由于myhash的field1字段已经通过上一条命令添加成功，因为本条命令不做任何操作后返回<span class="number">0</span>。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hsetnx myhash field1 stephen</div><div class="line">(integer) <span class="number">0</span></div></pre></td></tr></table></figure></li><li><p>HINCRBY：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#删除该键，便于后面示例的测试。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; del myhash</div><div class="line">(integer) <span class="number">1</span></div><div class="line">#准备测试数据，该myhash的field字段设定值<span class="number">1</span>。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hset myhash field <span class="number">5</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line">#给myhash的field字段的值加<span class="number">1</span>，返回加后的结果。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hincrby myhash field <span class="number">1</span></div><div class="line">(integer) <span class="number">6</span></div><div class="line">#给myhash的field字段的值加<span class="number">-1</span>，返回加后的结果。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hincrby myhash field <span class="number">-1</span></div><div class="line">(integer) <span class="number">5</span></div><div class="line">#给myhash的field字段的值加<span class="number">-10</span>，返回加后的结果。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hincrby myhash field <span class="number">-10</span></div><div class="line">(integer) <span class="number">-5</span></div></pre></td></tr></table></figure></li><li><p>HGETALL/HKEYS/HVALS/HMGET/HMSET:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#删除该键，便于后面示例测试。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; del myhash</div><div class="line">(integer) <span class="number">1</span></div><div class="line">#为该键myhash，一次性设置多个字段，分别是field1 = <span class="string">"hello"</span>, field2 = <span class="string">"world"</span>。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hmset myhash field1 <span class="string">"hello"</span> field2 <span class="string">"world"</span></div><div class="line">OK</div><div class="line">#获取myhash键的多个字段，其中field3并不存在，因为在返回结果中与该字段对应的值为nil。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hmget myhash field1 field2 field3</div><div class="line"><span class="number">1</span>) <span class="string">"hello"</span></div><div class="line"><span class="number">2</span>) <span class="string">"world"</span></div><div class="line"><span class="number">3</span>) (nil)</div><div class="line">#返回myhash键的所有字段及其值，从结果中可以看出，他们是逐对列出的。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hgetall myhash</div><div class="line"><span class="number">1</span>) <span class="string">"field1"</span></div><div class="line"><span class="number">2</span>) <span class="string">"hello"</span></div><div class="line"><span class="number">3</span>) <span class="string">"field2"</span></div><div class="line"><span class="number">4</span>) <span class="string">"world"</span></div><div class="line">#仅获取myhash键中所有字段的名字。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hkeys myhash</div><div class="line"><span class="number">1</span>) <span class="string">"field1"</span></div><div class="line"><span class="number">2</span>) <span class="string">"field2"</span></div><div class="line">#仅获取myhash键中所有字段的值。</div><div class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hvals myhash</div><div class="line"><span class="number">1</span>) <span class="string">"hello"</span></div><div class="line"><span class="number">2</span>) <span class="string">"world"</span></div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;&amp;ensp;&amp;ensp;我们可以将Redis中的Hashes类型看成具有String Key和String Value的map容器。所以该类型非常适合于存储值对象的信息。如Username、Password和Age等。如果Hash中包含很少的字段，那么该类型的数据也将仅占用很少的磁盘空间。每一个Hash可以存储4294967295个键值对。&lt;br&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
</feed>
