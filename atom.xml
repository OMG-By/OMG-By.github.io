<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你走与不走，路就在那里</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-17T11:30:53.689Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>OMG_By</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java的四种线程池</title>
    <link href="http://yoursite.com/2017/10/17/%E5%9B%9B%E7%A7%8D%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://yoursite.com/2017/10/17/四种线程池/</id>
    <published>2017-10-17T04:42:31.000Z</published>
    <updated>2017-10-17T11:30:53.689Z</updated>
    
    <content type="html"><![CDATA[<p>Java通过Executors提供了四种线程池：</p><ul><li>newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorTest</span> </span>&#123;</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">  ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> index = i;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">    Thread.sleep(index * <span class="number">1000</span>);</div><div class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">   &#125;</div><div class="line">   cachedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">     System.out.println(index);</div><div class="line">    &#125;</div><div class="line">   &#125;);</div><div class="line">  &#125;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程.</p><ul><li>newFixedThreadPool创建一个定长线程池，可控制线程最大并发数，超过的线程会在队列中等待。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test;  </div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;  </div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorTest</span> </span>&#123;  </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">  ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class="number">3</span>);  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> index = i;  </div><div class="line">   fixedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">     <span class="keyword">try</span> &#123;  </div><div class="line">      System.out.println(index);  </div><div class="line">      Thread.sleep(<span class="number">2000</span>);  </div><div class="line">     &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">      e.printStackTrace();  </div><div class="line">     &#125;  </div><div class="line">    &#125;  </div><div class="line">   &#125;);  </div><div class="line">  &#125;  </div><div class="line"> &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>因为线程池大小为3，每个任务输出index后sleep 2秒，所以没两秒打印3个数字。</p><ul><li>newScheduledThreadPool创建一个定长线程池，支持定时及周期性任务执行。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test;  </div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;  </div><div class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;  </div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorTest</span> </span>&#123;  </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">  ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class="number">5</span>);  </div><div class="line">  scheduledThreadPool.schedule(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">    System.out.println(<span class="string">"delay 3 seconds"</span>);  </div><div class="line">   &#125;  </div><div class="line">  &#125;, <span class="number">3</span>, TimeUnit.SECONDS);  </div><div class="line"> &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>表示延迟3秒执行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test;  </div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;  </div><div class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;  </div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorTest</span> </span>&#123;  </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">  ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class="number">5</span>);  </div><div class="line">  scheduledThreadPool.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">    System.out.println(<span class="string">"delay 1 seconds, and excute every 3 seconds"</span>);  </div><div class="line">   &#125;  </div><div class="line">  &#125;, <span class="number">1</span>, <span class="number">3</span>, TimeUnit.SECONDS);  </div><div class="line"> &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>表示延迟1秒后每3秒执行一次。</p><ul><li>newSingleThreadExecutor创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有的任务按照指定顺序（FIFO，LIFO,优先级）执行。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test;  </div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;  </div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorTest</span> </span>&#123;  </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">  ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> index = i;  </div><div class="line">   singleThreadExecutor.execute(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">     <span class="keyword">try</span> &#123;  </div><div class="line">      System.out.println(index);  </div><div class="line">      Thread.sleep(<span class="number">2000</span>);  </div><div class="line">     &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">      e.printStackTrace();  </div><div class="line">     &#125;  </div><div class="line">    &#125;  </div><div class="line">   &#125;);  </div><div class="line">  &#125;  </div><div class="line"> &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>顺序执行每个任务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java通过Executors提供了四种线程池：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。&lt;figure class=&quot;highlight java&quot;&gt;&lt;t
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
</feed>
