<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OMG_By</title>
  
  <subtitle>你走与不走，路就在那里</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-14T17:49:05.175Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>OMG_By</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis初始化启动过程</title>
    <link href="http://yoursite.com/2019/12/15/Redis/Redis%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/12/15/Redis/Redis初始化启动过程/</id>
    <published>2019-12-14T17:48:31.000Z</published>
    <updated>2019-12-14T17:49:05.175Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博文将基于Redis5.0 unstable版本介绍其在启动过程中所做的主要操作以及相关流程函数方法。<br>在此，先放上一张Redis初始化流程的大意图。<br><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9wqij4tmaj30a008edfz.jpg" alt=""></p><a id="more"></a><p>Redis的启动函数位于<code>server.c</code>文件main方法下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char **argv) &#123;</span><br><span class="line">    struct timeval tv;</span><br><span class="line">    int j;</span><br><span class="line">#ifdef REDIS_TEST</span><br><span class="line">    if (argc == 3 &amp;&amp; !strcasecmp(argv[1], &quot;test&quot;)) &#123;</span><br><span class="line">        if (!strcasecmp(argv[2], &quot;ziplist&quot;)) &#123;</span><br><span class="line">            return ziplistTest(argc, argv);</span><br><span class="line">        &#125; else if (!strcasecmp(argv[2], &quot;quicklist&quot;)) &#123;</span><br><span class="line">            quicklistTest(argc, argv);</span><br><span class="line">        &#125; else if (!strcasecmp(argv[2], &quot;intset&quot;)) &#123;</span><br><span class="line">            return intsetTest(argc, argv);</span><br><span class="line">        &#125; else if (!strcasecmp(argv[2], &quot;zipmap&quot;)) &#123;</span><br><span class="line">            return zipmapTest(argc, argv);</span><br><span class="line">        &#125; else if (!strcasecmp(argv[2], &quot;sha1test&quot;)) &#123;</span><br><span class="line">            return sha1Test(argc, argv);</span><br><span class="line">        &#125; else if (!strcasecmp(argv[2], &quot;util&quot;)) &#123;</span><br><span class="line">            return utilTest(argc, argv);</span><br><span class="line">        &#125; else if (!strcasecmp(argv[2], &quot;sds&quot;)) &#123;</span><br><span class="line">            return sdsTest(argc, argv);</span><br><span class="line">        &#125; else if (!strcasecmp(argv[2], &quot;endianconv&quot;)) &#123;</span><br><span class="line">            return endianconvTest(argc, argv);</span><br><span class="line">        &#125; else if (!strcasecmp(argv[2], &quot;crc64&quot;)) &#123;</span><br><span class="line">            return crc64Test(argc, argv);</span><br><span class="line">        &#125; else if (!strcasecmp(argv[2], &quot;zmalloc&quot;)) &#123;</span><br><span class="line">            return zmalloc_test(argc, argv);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return -1; /* test not found */</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    /* We need to initialize our libraries, and the server configuration. */</span><br><span class="line">#ifdef INIT_SETPROCTITLE_REPLACEMENT</span><br><span class="line">    spt_init(argc, argv);</span><br><span class="line">#endif</span><br><span class="line">    setlocale(LC_COLLATE,&quot;&quot;);</span><br><span class="line">    tzset(); /* Populates &apos;timezone&apos; global. */</span><br><span class="line">    zmalloc_set_oom_handler(redisOutOfMemoryHandler);</span><br><span class="line">    srand(time(NULL)^getpid());</span><br><span class="line">    gettimeofday(&amp;tv,NULL);</span><br><span class="line"></span><br><span class="line">    char hashseed[16];</span><br><span class="line">    getRandomHexChars(hashseed,sizeof(hashseed));</span><br><span class="line">    dictSetHashFunctionSeed((uint8_t*)hashseed);</span><br><span class="line">    server.sentinel_mode = checkForSentinelMode(argc,argv);</span><br><span class="line">    initServerConfig();</span><br><span class="line">    ACLInit(); /* The ACL subsystem must be initialized ASAP because the</span><br><span class="line">                  basic networking code and client creation depends on it. */</span><br><span class="line">    moduleInitModulesSystem();</span><br><span class="line"></span><br><span class="line">    /* Store the executable path and arguments in a safe place in order</span><br><span class="line">     * to be able to restart the server later. */</span><br><span class="line">    server.executable = getAbsolutePath(argv[0]);</span><br><span class="line">    server.exec_argv = zmalloc(sizeof(char*)*(argc+1));</span><br><span class="line">    server.exec_argv[argc] = NULL;</span><br><span class="line">    for (j = 0; j &lt; argc; j++) server.exec_argv[j] = zstrdup(argv[j]);</span><br><span class="line"></span><br><span class="line">    /* We need to init sentinel right now as parsing the configuration file</span><br><span class="line">     * in sentinel mode will have the effect of populating the sentinel</span><br><span class="line">     * data structures with master nodes to monitor. */</span><br><span class="line">    if (server.sentinel_mode) &#123;</span><br><span class="line">        initSentinelConfig();</span><br><span class="line">        initSentinel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* Check if we need to start in redis-check-rdb/aof mode. We just execute</span><br><span class="line">     * the program main. However the program is part of the Redis executable</span><br><span class="line">     * so that we can easily execute an RDB check on loading errors. */</span><br><span class="line">    if (strstr(argv[0],&quot;redis-check-rdb&quot;) != NULL)</span><br><span class="line">        redis_check_rdb_main(argc,argv,NULL);</span><br><span class="line">    else if (strstr(argv[0],&quot;redis-check-aof&quot;) != NULL)</span><br><span class="line">        redis_check_aof_main(argc,argv);</span><br><span class="line"></span><br><span class="line">    if (argc &gt;= 2) &#123;</span><br><span class="line">        j = 1; /* First option to parse in argv[] */</span><br><span class="line">        sds options = sdsempty();</span><br><span class="line">        char *configfile = NULL;</span><br><span class="line"></span><br><span class="line">        /* Handle special options --help and --version */</span><br><span class="line">        if (strcmp(argv[1], &quot;-v&quot;) == 0 ||</span><br><span class="line">            strcmp(argv[1], &quot;--version&quot;) == 0) version();</span><br><span class="line">        if (strcmp(argv[1], &quot;--help&quot;) == 0 ||</span><br><span class="line">            strcmp(argv[1], &quot;-h&quot;) == 0) usage();</span><br><span class="line">        if (strcmp(argv[1], &quot;--test-memory&quot;) == 0) &#123;</span><br><span class="line">            if (argc == 3) &#123;</span><br><span class="line">                memtest(atoi(argv[2]),50);</span><br><span class="line">                exit(0);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                fprintf(stderr,&quot;Please specify the amount of memory to test in megabytes.\n&quot;);</span><br><span class="line">                fprintf(stderr,&quot;Example: ./redis-server --test-memory 4096\n\n&quot;);</span><br><span class="line">                exit(1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* First argument is the config file name? */</span><br><span class="line">        if (argv[j][0] != &apos;-&apos; || argv[j][1] != &apos;-&apos;) &#123;</span><br><span class="line">            configfile = argv[j];</span><br><span class="line">            server.configfile = getAbsolutePath(configfile);</span><br><span class="line">            /* Replace the config file in server.exec_argv with</span><br><span class="line">             * its absolute path. */</span><br><span class="line">            zfree(server.exec_argv[j]);</span><br><span class="line">            server.exec_argv[j] = zstrdup(server.configfile);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* All the other options are parsed and conceptually appended to the</span><br><span class="line">         * configuration file. For instance --port 6380 will generate the</span><br><span class="line">         * string &quot;port 6380\n&quot; to be parsed after the actual file name</span><br><span class="line">         * is parsed, if any. */</span><br><span class="line">        while(j != argc) &#123;</span><br><span class="line">            if (argv[j][0] == &apos;-&apos; &amp;&amp; argv[j][1] == &apos;-&apos;) &#123;</span><br><span class="line">                /* Option name */</span><br><span class="line">                if (!strcmp(argv[j], &quot;--check-rdb&quot;)) &#123;</span><br><span class="line">                    /* Argument has no options, need to skip for parsing. */</span><br><span class="line">                    j++;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                if (sdslen(options)) options = sdscat(options,&quot;\n&quot;);</span><br><span class="line">                options = sdscat(options,argv[j]+2);</span><br><span class="line">                options = sdscat(options,&quot; &quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                /* Option argument */</span><br><span class="line">                options = sdscatrepr(options,argv[j],strlen(argv[j]));</span><br><span class="line">                options = sdscat(options,&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (server.sentinel_mode &amp;&amp; configfile &amp;&amp; *configfile == &apos;-&apos;) &#123;</span><br><span class="line">            serverLog(LL_WARNING,</span><br><span class="line">                &quot;Sentinel config from STDIN not allowed.&quot;);</span><br><span class="line">            serverLog(LL_WARNING,</span><br><span class="line">                &quot;Sentinel needs config file on disk to save state.  Exiting...&quot;);</span><br><span class="line">            exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">        resetServerSaveParams();</span><br><span class="line">        loadServerConfig(configfile,options);</span><br><span class="line">        sdsfree(options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serverLog(LL_WARNING, &quot;oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo&quot;);</span><br><span class="line">    serverLog(LL_WARNING,</span><br><span class="line">        &quot;Redis version=%s, bits=%d, commit=%s, modified=%d, pid=%d, just started&quot;,</span><br><span class="line">            REDIS_VERSION,</span><br><span class="line">            (sizeof(long) == 8) ? 64 : 32,</span><br><span class="line">            redisGitSHA1(),</span><br><span class="line">            strtol(redisGitDirty(),NULL,10) &gt; 0,</span><br><span class="line">            (int)getpid());</span><br><span class="line"></span><br><span class="line">    if (argc == 1) &#123;</span><br><span class="line">        serverLog(LL_WARNING, &quot;Warning: no config file specified, using the default config. In order to specify a config file use %s /path/to/%s.conf&quot;, argv[0], server.sentinel_mode ? &quot;sentinel&quot; : &quot;redis&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        serverLog(LL_WARNING, &quot;Configuration loaded&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server.supervised = redisIsSupervised(server.supervised_mode);</span><br><span class="line">    int background = server.daemonize &amp;&amp; !server.supervised;</span><br><span class="line">    if (background) daemonize();</span><br><span class="line"></span><br><span class="line">    initServer();</span><br><span class="line">    if (background || server.pidfile) createPidFile();</span><br><span class="line">    redisSetProcTitle(argv[0]);</span><br><span class="line">    redisAsciiArt();</span><br><span class="line">    checkTcpBacklogSettings();</span><br><span class="line"></span><br><span class="line">    if (!server.sentinel_mode) &#123;</span><br><span class="line">        /* Things not needed when running in Sentinel mode. */</span><br><span class="line">        serverLog(LL_WARNING,&quot;Server initialized&quot;);</span><br><span class="line">    #ifdef __linux__</span><br><span class="line">        linuxMemoryWarnings();</span><br><span class="line">    #endif</span><br><span class="line">        moduleLoadFromQueue();</span><br><span class="line">        ACLLoadUsersAtStartup();</span><br><span class="line">        loadDataFromDisk();</span><br><span class="line">        if (server.cluster_enabled) &#123;</span><br><span class="line">            if (verifyClusterConfigWithData() == C_ERR) &#123;</span><br><span class="line">                serverLog(LL_WARNING,</span><br><span class="line">                    &quot;You can&apos;t have keys in a DB different than DB 0 when in &quot;</span><br><span class="line">                    &quot;Cluster mode. Exiting.&quot;);</span><br><span class="line">                exit(1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (server.ipfd_count &gt; 0)</span><br><span class="line">            serverLog(LL_NOTICE,&quot;Ready to accept connections&quot;);</span><br><span class="line">        if (server.sofd &gt; 0)</span><br><span class="line">            serverLog(LL_NOTICE,&quot;The server is now ready to accept connections at %s&quot;, server.unixsocket);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        sentinelIsRunning();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* Warning the user about suspicious maxmemory setting. */</span><br><span class="line">    if (server.maxmemory &gt; 0 &amp;&amp; server.maxmemory &lt; 1024*1024) &#123;</span><br><span class="line">        serverLog(LL_WARNING,&quot;WARNING: You specified a maxmemory value that is less than 1MB (current value is %llu bytes). Are you sure this is what you really want?&quot;, server.maxmemory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    aeSetBeforeSleepProc(server.el,beforeSleep);</span><br><span class="line">    aeSetAfterSleepProc(server.el,afterSleep);</span><br><span class="line">    aeMain(server.el);</span><br><span class="line">    aeDeleteEventLoop(server.el);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="初始化默认状态"><a href="#初始化默认状态" class="headerlink" title="初始化默认状态"></a>初始化默认状态</h2><p>我们可以看到在main方法中，进行的第一步操作就是初始化默认配置<code>initServerConfig</code>。有很多初始化操作都需要设置了一些默认配置后才能够继续进行的。</p><p>在这一阶段中进行初始化的主要有：</p><ul><li>Redis server的状态默认值</li><li>Redis服务运行的默认参数配置</li><li>复制参数配置</li><li>客户端输入输出缓冲区设置</li><li>部分命令参数初始化</li><li>slow log初始化</li></ul><p>为什么需要先对部分命令进行初始化：<br>因为这一部分命令是Redis对外提供服务之前时，就需要先调用的，所以必须先进行初始化。而其他非必须的命令此时仍未进行初始化。</p><h2 id="权限初始化"><a href="#权限初始化" class="headerlink" title="权限初始化"></a>权限初始化</h2><p>用户这个概念，是Redis在6.0版本中提出的。虽然还未正式投入线上使用，但是已经在unstable版本中开始投入开发。<br><code>ACLInit()</code>这个方法非常简单，只会初始化一个拥有所有权限的默认用户。</p><h2 id="初始化模块系统"><a href="#初始化模块系统" class="headerlink" title="初始化模块系统"></a>初始化模块系统</h2><p>模块系统，是Redis4.0版本中推出的一个新特性，它允许用户自己编写适合于自己的模块，并以插件的形式导入到Redis当中。<br>通过<code>moduleInitModulesSystem()</code>方法，创建模块系统所需要数据结构和资源。</p><h2 id="解析命令行参数以及读取配置"><a href="#解析命令行参数以及读取配置" class="headerlink" title="解析命令行参数以及读取配置"></a>解析命令行参数以及读取配置</h2><p>在启动Redis的时候，是允许用户在命令行中指定Redis运行的模式和参数。<br>将配置文件和运行时参数等信息通过遍历的方式确认后，调用<code>loadServerConfig</code>方法，将运行时参数写入到配置文件中。如果没有指定配置文件，就会使用默认的配置文件来运行服务。</p><p>最终会通过<code>initServer</code>方法来初始化参数配置。<br>这个方法主要会做以下的一些初始化操作：</p><ul><li>初始化共享对象<code>createSharedObjects</code></li><li>检查系统参数配置<code>adjustOpenFilesLimit</code></li><li>开启端口监听</li><li>创建事件监听和时间监听文件句柄</li><li>创建数据库并初始化状态<br>在这个方法中创建创建文件驱动和时间驱动的监听句柄。并且会进行以下的一些初始数据的初始化。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (server.cluster_enabled) clusterInit();</span><br><span class="line">replicationScriptCacheInit();</span><br><span class="line">scriptingInit(1);</span><br><span class="line">slowlogInit();</span><br><span class="line">latencyMonitorInit();</span><br><span class="line">bioInit();</span><br><span class="line">server.initial_memory_usage = zmalloc_used_memory();</span><br></pre></td></tr></table></figure></li></ul><h2 id="模块文件、用户权限、数据导入"><a href="#模块文件、用户权限、数据导入" class="headerlink" title="模块文件、用户权限、数据导入"></a>模块文件、用户权限、数据导入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">moduleLoadFromQueue();</span><br><span class="line">ACLLoadUsersAtStartup();</span><br><span class="line">loadDataFromDisk();</span><br></pre></td></tr></table></figure><p>如果数据文件中有数据，则需要进行数据的初始化操作。<br>如果开启了AOF，那么会优先从AOF文件中进行数据导入操作。如果没有开启AOF文件，才会去查找RDB文件。<code>loadDataFromDisk</code></p><h2 id="循环监听时间"><a href="#循环监听时间" class="headerlink" title="循环监听时间"></a>循环监听时间</h2><p>Redis服务主要运行函数为<code>aeMain()</code>。在函数中，是一个死循环操作。一旦监听的文件事件存在了可操作事件，就会进行处理逻辑流程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aeSetBeforeSleepProc(server.el,beforeSleep);</span><br><span class="line">aeSetAfterSleepProc(server.el,afterSleep);</span><br><span class="line">aeMain(server.el);</span><br><span class="line">aeDeleteEventLoop(server.el);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博文将基于Redis5.0 unstable版本介绍其在启动过程中所做的主要操作以及相关流程函数方法。&lt;br&gt;在此，先放上一张Redis初始化流程的大意图。&lt;br&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006tNbRwgy1g9wqij4tmaj30a008edfz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>缓存雪崩穿透击穿介绍</title>
    <link href="http://yoursite.com/2019/12/15/Redis/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F%E5%87%BB%E7%A9%BF%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2019/12/15/Redis/缓存雪崩穿透击穿介绍/</id>
    <published>2019-12-14T16:40:24.000Z</published>
    <updated>2019-12-14T16:49:41.954Z</updated>
    
    <content type="html"><![CDATA[<p>看到这个标题，你肯定在想：什么是雪崩？什么是穿透？什么是击穿？怎么感觉都是一个意思，都是缓存失效导致的数据库压力问题。</p><p>这三个问题的确都会导致数据库压力问题，但是出现的场景还是存在区别滴。在处理手段上也有很大的区别。</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>需要使用的热点数据都做了缓存，但是为了保证Redis的内存够用，所以会对一些数据进行设置过期时间操作。一般情况下存在定时任务去刷新缓存信息，这个时候就存在一个隐患的问题：假设在定时任务中设置的过期时间都一样，那么在某一个时间点时，大量的key同时过期。本来缓存抵挡住了大量的请求，key过期后，这些压力全部同时打到了数据库中，数据库可能就扛不住。直接被打挂了，重启数据库后，立马又被新的流量打挂了。这就是缓存雪崩。<br>(注：这里还有个隐患，Redis可能会频繁的处理过期key，从而导致Redis性能降低)<br><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9wq4egoo5j30er0a6aao.jpg" alt=""></p><p>处理缓存雪崩主要有以下几个思路：</p><ol><li>分散过期时间。把每个key的过期时间都加上一个随机的过期值。保证数据不会在同一时间大面积失效。</li><li>设置过期标志更新缓存。给每一个缓存数据都增加一个相应的缓存标记，记录缓存是否失效。如果缓存失效，则更新数据缓存。这样虽然在缓存首次失效时，仍会带来数据库压力问题。但是能够在一定程度上缓解后续被新流量打挂以及所有服务不可用的情况。</li><li>在代码层面上设定一定策略，比如加锁等待、减慢请求速度。给数据库留下启动和重建缓存的机会。</li></ol><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透就是指客户端不断的查询缓存和数据库都没有的数据。相当于进行了两次无用的查询。降低缓存的命中率，增加数据库的压力。<br><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9wq4nqarcj30dx0ak751.jpg" alt=""></p><p>解决手段：</p><ol><li>客户端进行校验，先将明显不符合的key给过滤掉。</li><li>对于查询不到的数据，直接赋值一个null给它。</li><li>使用布隆过滤器来对不存在数据进行过滤掉。</li><li>限流。</li></ol><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>缓存击穿和缓存雪崩有点像。但是又不一样，缓存雪崩是大面积的缓存同时失效，打崩了DB。而缓存击穿是指一个key非常热点，在不停的扛着大并发，当这个key失效的瞬间，持续的大并发就击穿缓存，直接请求数据库。</p><p>解决手段:<br>主要场景是多个线程同时去查询数据库的这条数据，那么我们可以在第一个查询数据的请求上使用一个 互斥锁来锁住它。<br>其他的线程走到这一步拿不到锁就等着，等第一个线程查询到了数据，然后做缓存。后面的线程进来发现已经有缓存了，就直接走缓存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看到这个标题，你肯定在想：什么是雪崩？什么是穿透？什么是击穿？怎么感觉都是一个意思，都是缓存失效导致的数据库压力问题。&lt;/p&gt;
&lt;p&gt;这三个问题的确都会导致数据库压力问题，但是出现的场景还是存在区别滴。在处理手段上也有很大的区别。&lt;/p&gt;
&lt;h2 id=&quot;缓存雪崩&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="概念介绍" scheme="http://yoursite.com/tags/%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>python装饰器</title>
    <link href="http://yoursite.com/2018/08/19/python/python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://yoursite.com/2018/08/19/python/python装饰器/</id>
    <published>2018-08-19T13:40:56.000Z</published>
    <updated>2019-12-14T16:27:53.885Z</updated>
    
    <content type="html"><![CDATA[<p>python装饰器就是用于<font color="red">扩展原来函数功能的一种函数</font>，这个函数的特殊之处在于它的返回值也是一个函数。使用python装饰器的好处就是在不用更改原函数的代码前提下给函数增加新的功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">原函数</span><br><span class="line">def func():</span><br><span class="line">print(&quot;hello&quot;)</span><br></pre></td></tr></table></figure></p><p>要想扩展一个函数的功能，最简单的方法就是直接修改原函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">print(&quot;before&quot;)</span><br><span class="line">print(&quot;hello&quot;)</span><br><span class="line">print(&quot;after&quot;)</span><br></pre></td></tr></table></figure></p><p>如果不想修改原函数，还是想增强函数的功能时，可以另外定义一个函数调用原函数。（类似于设计模式中的装饰模式，有组合和代理两种方式）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def deco(func):</span><br><span class="line">print(&quot;before&quot;)</span><br><span class="line">func()</span><br><span class="line">print(&quot;after&quot;)</span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">print(&quot;hello&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    f = func</span><br><span class="line">    deco(f)#只有把func()或者f()作为参数执行，新加入功能才会生效</span><br><span class="line">    print(&quot;f.__name__ is&quot;,f.__name__)#f的name就是func()</span><br><span class="line">    print()</span><br><span class="line">    #func()</span><br></pre></td></tr></table></figure></p><p>但是如果存在很多个类似于func的函数需要相同的扩展，那岂不是要执行deco函数许多次？<br>下面我们实现一个最简陋的装饰器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def deco(func):</span><br><span class="line">def wrapper(*args, **kwargs):</span><br><span class="line">print(&quot;before&quot;)</span><br><span class="line">func(*args, **kwargs)</span><br><span class="line">print(&quot;after&quot;)</span><br><span class="line">return wrapper</span><br><span class="line"></span><br><span class="line">@deco</span><br><span class="line">def func():</span><br><span class="line">print(&quot;hello&quot;)</span><br></pre></td></tr></table></figure></p><p>这里的deco函数就是最原始的装饰器，它的参数是一个函数，然后返回值也是一个函数。其中作为参数的这个函数func()就在返回函数wrapper()的内部执行。然后在函数func()前面加上@deco。<br>所以这里装饰器就像一个注入符号：有了它，拓展了原来函数的功能既不需要侵入函数内更改代码，也不需要重复执行原函数。<br>在func函数前还可以使用多个@的方式来执行多个装饰器，多个装饰器的执行顺序就是从最后一个装饰器开始执行到第一个装饰器，在执行函数本身。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">def dec1(func):  </span><br><span class="line">    print(&quot;1111&quot;)  </span><br><span class="line">    def one():  </span><br><span class="line">        print(&quot;2222&quot;)  </span><br><span class="line">        func()  </span><br><span class="line">        print(&quot;3333&quot;)  </span><br><span class="line">    return one  </span><br><span class="line"></span><br><span class="line">def dec2(func):  </span><br><span class="line">    print(&quot;aaaa&quot;)  </span><br><span class="line">    def two():  </span><br><span class="line">        print(&quot;bbbb&quot;)  </span><br><span class="line">        func()  </span><br><span class="line">        print(&quot;cccc&quot;)  </span><br><span class="line">    return two  </span><br><span class="line"></span><br><span class="line">@dec1  </span><br><span class="line">@dec2  </span><br><span class="line">def test():  </span><br><span class="line">    print(&quot;test test&quot;)  </span><br><span class="line"></span><br><span class="line">test()  </span><br><span class="line"></span><br><span class="line">aaaa  </span><br><span class="line">1111  </span><br><span class="line">2222  </span><br><span class="line">bbbb  </span><br><span class="line">test test  </span><br><span class="line">cccc  </span><br><span class="line">3333</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python装饰器就是用于&lt;font color=&quot;red&quot;&gt;扩展原来函数功能的一种函数&lt;/font&gt;，这个函数的特殊之处在于它的返回值也是一个函数。使用python装饰器的好处就是在不用更改原函数的代码前提下给函数增加新的功能。&lt;br&gt;&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python获取本机IP</title>
    <link href="http://yoursite.com/2018/07/21/python/%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAIP/"/>
    <id>http://yoursite.com/2018/07/21/python/获取本机IP/</id>
    <published>2018-07-21T08:28:05.000Z</published>
    <updated>2019-12-14T16:27:53.884Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_host_ip</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">      s.connect((<span class="string">'8.8.8.8'</span>, <span class="number">80</span>))</span><br><span class="line">      ip = s.getsockname()[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">finally</span>:</span><br><span class="line">      s.close()</span><br><span class="line">  <span class="keyword">return</span> ip</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
